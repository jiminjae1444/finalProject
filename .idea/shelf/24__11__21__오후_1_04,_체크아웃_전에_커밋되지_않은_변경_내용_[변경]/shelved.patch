Index: src/main/webapp/WEB-INF/views/header.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n         pageEncoding=\"UTF-8\"%>\r\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\r\n<%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %>\r\n<%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\" %>\r\n<c:set var=\"cpath\" value=\"${pageContext.request.contextPath }\" />\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>finalProject</title>\r\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Do+Hyeon&family=Gugi&family=Noto+Sans+KR:wght@100..900&display=swap\" rel=\"stylesheet\">\r\n    <style>\r\n    \tbody, html {\r\n\t        margin: 0;\r\n\t        padding: 0;\r\n\t        font-family: Arial, sans-serif;\r\n    \t}\r\n        /*    챗봇 아이콘 */\r\n        #chat_icon img {\r\n            position: fixed;\r\n            right: 50px;\r\n            bottom: 50px;\r\n        }\r\n\r\n        /*   민재 파트 (홈 검색 기능) */\r\n\r\n\r\n        #mapModal {\r\n            z-index: 4;\r\n            width: 100%;\r\n            height: 100%;\r\n            display: none; /* 기본적으로 숨김 */\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            background-color: rgba(0, 0, 0, 0.7); /* 반투명 검은색 배경 */\r\n        }\r\n\r\n        #mapModal.show {\r\n            display: block;\r\n        }\r\n\r\n        #mapModal > .content {\r\n            border: 2px solid grey;\r\n            background-color: white;\r\n            position: fixed;\r\n            width: 80%; /* 모달 너비 설정 */\r\n            max-width: 1000px; /* 최대 너비 */\r\n            height: 80%; /* 모달 높이 설정 */\r\n            max-height: 500px; /* 최대 높이 */\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            display: flex; /* 지도와 리스트를 가로로 나란히 배치 */\r\n            flex-direction: row; /* 가로 배치 */\r\n            border-radius: 25px;\r\n            box-shadow: 10px 10px 10px grey;\r\n        }\r\n\r\n\r\n        #hospitalList {\r\n            list-style-type: none;\r\n            padding:50px 10px;\r\n            overflow-y: auto;\r\n            margin: 0;\r\n            max-height: 100%; /* 리스트가 모달 높이에 맞게 늘어나도록 설정 */\r\n            width: 30%; /* 리스트 영역을 지도 옆에 붙게 설정 */\r\n            background-color: rgba(255, 255, 255, 0.4); /* 투명한 배경 설정 (투명도 높임) */\r\n            opacity: 0.8;\r\n            border-radius: 10px;\r\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); /* 그림자 효과 */\r\n            position: relative; /* 부모 요소에 맞춰 위치 */\r\n        }\r\n        #hospitalList::-webkit-scrollbar {\r\n            display: none;\r\n        }\r\n        .hospital-list li {\r\n            margin: 5px 0;\r\n            cursor: pointer;\r\n            padding: 5px;\r\n            border: 1px solid #ccc;\r\n            border-radius: 5px;\r\n            transition: background-color 0.3s;\r\n        }\r\n\r\n        .hospital-list li:hover {\r\n            background-color: #e9ecef; /* 마우스 오버 시 배경색 변경 */\r\n        }\r\n\r\n\r\n        #map2 {\r\n            width: 70%; /* 지도 영역 크기 */\r\n            height: 100%;\r\n            position: relative;\r\n        }\r\n\r\n\r\n\r\n        .hospital-list li.selected {\r\n            background-color: #007bff; /* 선택된 항목 배경색 */\r\n            color: white; /* 선택된 항목 글자색 */\r\n            font-weight: bold; /* 선택된 항목 글씨 진하게 */\r\n        }\r\n\r\n        \r\n        header{\r\n            width: 100%;\r\n            height: 80px;\r\n            display: flex;\r\n            z-index: 100;\r\n            background-color: rgba(255, 255, 255, 0.2);\r\n   \t\t\tbackdrop-filter: blur(3px);\r\n        }\r\n        .bookingModal {\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            z-index: 1000;\r\n        }\r\n\r\n        .hidden {\r\n            display: none!important;\r\n        }\r\n\r\n\r\n        .bookingOverlay {\r\n            position: absolute;\r\n            width: 100%;\r\n            height: 100%;\r\n            background-color: rgba(0, 0, 0, 0.5); /* 반투명한 검은색 배경 */\r\n        }\r\n\r\n        .bookingContent {\r\n            position: relative;\r\n            background-color: white;\r\n            padding: 30px;\r\n            border-radius: 15px;\r\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n            z-index: 5;\r\n            max-width: 500px;\r\n            width: 90%;\r\n            max-height: 80vh;\r\n            overflow-y: auto;\r\n            scrollbar-width: none; /* Firefox */\r\n            -ms-overflow-style: none; /* Internet Explorer 10+ */\r\n        }\r\n\r\n        .bookingContent::-webkit-scrollbar {\r\n            display: none; /* WebKit */\r\n        }\r\n\r\n        .bookingTitle {\r\n            font-size: 24px;\r\n            color: #2c3e50;\r\n            text-align: center;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .bookingDetail {\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        #bookingInsertForm input[type=\"datetime-local\"],\r\n        #bookingUpdateForm input[type=\"datetime-local\"] {\r\n            width: 100%;\r\n            padding: 5px;\r\n            border: 1px solid #ddd;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n            color: #333;\r\n        }\r\n\r\n        #bookingInsertForm input[type=\"submit\"],\r\n        #bookingUpdateForm input[type=\"submit\"] {\r\n            width: 100%;\r\n            padding: 12px;\r\n            background-color: #2c3e50;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 8px;\r\n            font-size: 18px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            transition: background-color 0.3s ease;\r\n        }\r\n\r\n        #bookingInsertForm input[type=\"submit\"]:hover,\r\n        #bookingUpdateForm input[type=\"submit\"]:hover {\r\n            background-color: #34495e;\r\n        }\r\n\r\n        #closeBookingBtn ,#closeMapModalBtn{\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 10px;\r\n            background-color: #ff4d4d;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 5px;\r\n            padding: 5px 10px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            transition: background-color 0.3s ease, transform 0.2s ease;\r\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        #closeBookingBtn:hover ,#closeMapModalBtn:hover{\r\n           background-color: #ff3333;\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\r\n        }\r\n\r\n        #closeBookingBtn:active {\r\n            transform: translateY(0);\r\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        /* 애니메이션 효과 */\r\n        @keyframes fadeIn {\r\n            from { opacity: 0; transform: translateY(-20px); }\r\n            to { opacity: 1; transform: translateY(0); }\r\n        }\r\n\r\n        .bookingContent {\r\n            animation: fadeIn 0.3s ease-out;\r\n        }\r\n\r\n        /* 반응형 디자인을 위한 미디어 쿼리 */\r\n        @media (max-width: 600px) {\r\n            .bookingContent {\r\n                padding: 25px;\r\n                width: 95%;\r\n            }\r\n\r\n            .bookingTitle {\r\n                font-size: 20px;\r\n            }\r\n        }\r\n\r\n\r\n        #notificationPaging {\r\n            justify-content: space-between;\r\n            display: flex;\r\n        }\r\n\r\n        #notificationCountSpan {\r\n            position: absolute;\r\n            top: -5px;\r\n            right: -5px;\r\n            background-color: red;\r\n            color: white;\r\n            border-radius: 50%;\r\n            padding: 2px 6px;\r\n            font-size: 12px;\r\n        }\r\n\r\n        #myFavoritesPaging {\r\n            justify-content: space-between;\r\n            display: flex;\r\n        }\r\n        a {\r\n            color: inherit;\r\n            text-decoration: none;\r\n        }\r\n        /* 최근 본 병원 스타일 */\r\n        #recentHospitalsContainer {\r\n            width: 180px; /* 컨테이너 너비를 조금 더 줄임 */\r\n            position: fixed; /* 화면에 고정 */\r\n            top: 118px; /* 상단에서 80px 떨어지게 위치 */\r\n            right: 20px; /* 화면 오른쪽에 위치 */\r\n            background-color: #f9f9f9;\r\n            padding: 10px;\r\n            border-radius: 8px; /* 카드와 동일하게 둥글게 */\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n            z-index: 5; /* 다른 콘텐츠 위에 표시 */\r\n            max-height: 75vh; /* 화면 높이에 맞게 제한 */\r\n            overflow-y: hidden; /* 스크롤 숨기기 */\r\n            border: 1px solid #e0e0e0; /* 약간의 테두리로 강조 */\r\n        }\r\n\r\n        #recentHospitalsContainer h2 {\r\n            font-size: 18px; /* 제목 크기 약간 줄임 */\r\n            font-weight: bold;\r\n            margin-bottom: 10px; /* 여백 줄이기 */\r\n            color: #333;\r\n            text-align: center;\r\n        }\r\n\r\n        .recent-hospitals {\r\n            display: flex;\r\n            flex-direction: column; /* 세로로 정렬 */\r\n            gap: 8px; /* 카드 간격을 조금 줄임 */\r\n            max-height: 70vh; /* 내용이 많으면 더 이상 스크롤되지 않게 */\r\n        }\r\n\r\n        .hospital-card {\r\n            width: 100%; /* 카드가 컨테이너에 맞게 꽉 차게 */\r\n            background-color: #fff;\r\n            border-radius: 6px; /* 카드 모서리 둥글게 */\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n            overflow: hidden;\r\n            transition: transform 0.3s ease-in-out;\r\n            display: flex;\r\n            flex-direction: column;\r\n            margin: 10px 0px;\r\n        }\r\n\r\n        .hospital-card:hover {\r\n            transform: scale(1.03); /* 카드 호버시 확대 효과 */\r\n        }\r\n\r\n        .recentHospital-image {\r\n            width: 100%;\r\n            height: 100px; /* 이미지 크기를 조금 더 줄임 */\r\n            object-fit: cover; /* 이미지 비율 유지하면서 잘리도록 설정 */\r\n        }\r\n\r\n        .recentHospital-info {\r\n            padding: 8px; /* 패딩을 줄여서 내용 영역을 더 좁게 */\r\n            font-size: 13px; /* 폰트 크기 좀 더 줄임 */\r\n        }\r\n\r\n        .hospital-name {\r\n            font-size: 14px; /* 병원 이름 폰트 크기 더 줄임 */\r\n            font-weight: bold;\r\n            margin-bottom: 5px;\r\n            color: #007bff;\r\n            white-space: nowrap; /* 텍스트가 한 줄로 나오도록 */\r\n            overflow: hidden;\r\n            text-overflow: ellipsis; /* 긴 이름은 ... 으로 표시 */\r\n        }\r\n\r\n        .loginIcon ,.loginIcon2 {\r\n            background-image: url('${cpath}/resources/image/로그인아이콘최종.png');\r\n            position: absolute;\r\n            width: 30px;\r\n            height: 30px;\r\n            top: 30px;\r\n            right: 30px;\r\n            background-size: cover;\r\n            cursor: pointer;\r\n        }\r\n        .notificationIcon {\r\n            background-image: url('${cpath}/resources/image/알림.png');\r\n            position: absolute;\r\n            width: 27px;\r\n            height: 27px;\r\n            top: 33px;\r\n            right: 150px;\r\n            background-size: cover;\r\n        }\r\n        .healthInfoIcon {\r\n        \tbackground-image: url('${cpath}/resources/image/건강정보.png');\r\n            position: absolute;\r\n            width: 30px;\r\n            height: 30px;\r\n            top: 31px;\r\n            right: 90px;\r\n            background-size: cover;\r\n        }\r\n        .myFavoritesIcon{\r\n            background-image: url('${cpath}/resources/image/즐겨찾기.png');\r\n            position: absolute;\r\n            width: 30px;\r\n            height: 30px;\r\n            top: 31px;\r\n            right: 205px;\r\n            background-size: cover;\r\n        }\r\n    </style>\r\n\r\n<%--    알림 메시지 스타일--%>\r\n        <style>\r\n            /* 알림 테이블 스타일 */\r\n            #notificationTable {\r\n                width: 100%;\r\n                border-collapse: collapse;\r\n                margin-top: 20px;\r\n                box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n            }\r\n\r\n            #notificationTable th, #notificationTable td {\r\n                padding: 12px 15px;\r\n                text-align: left;\r\n                border-bottom: 1px solid #e0e0e0;\r\n            }\r\n\r\n            #notificationTable th {\r\n                background-color: #f8f8f8;\r\n                font-weight: bold;\r\n                color: #333;\r\n            }\r\n\r\n            /* 읽지 않은 알림 스타일 */\r\n            #notificationTable th[style*=\"background-color: lightskyblue\"] {\r\n                background-color: #e3f2fd;\r\n                font-weight: bold;\r\n            }\r\n\r\n            /* 알림 삭제 버튼 스타일 */\r\n            .notificationDeleteBtn {\r\n                padding: 6px 12px;\r\n                background-color: #ff4d4d;\r\n                color: white;\r\n                border: none;\r\n                border-radius: 4px;\r\n                cursor: pointer;\r\n                transition: background-color 0.3s;\r\n            }\r\n\r\n            .notificationDeleteBtn:hover  {\r\n                background-color: #ff3333; /* 삭제 버튼의 호버 효과는 유지 */\r\n            }\r\n\r\n            /* 페이징 스타일 */\r\n            #notificationPaging {\r\n                display: flex;\r\n                justify-content: space-around;\r\n                margin-top: 20px;\r\n                margin-bottom: 20px;\r\n            }\r\n\r\n            #notificationPaging td {\r\n                padding: 8px 12px;\r\n                margin: 0 5px;\r\n                cursor: pointer;\r\n                border: 1px solid #ddd;\r\n                border-radius: 4px;\r\n            }\r\n\r\n            /* 현재 페이지 강조 스타일 */\r\n            #notificationPaging td[style*=\"font-weight: bold\"] {\r\n                background-color: #007bff; /* 강조 색상 */\r\n                color: white; /* 강조 색상에서의 글자 색상 */\r\n            }\r\n\r\n            /* '이전'과 '다음' 버튼 스타일 */\r\n            #notificationPaging td:first-child,\r\n            #notificationPaging td:last-child {\r\n                background-color: #f8f9fa; /* 기본 배경색 */\r\n                font-weight: bold; /* 두꺼운 폰트 */\r\n            }\r\n\r\n            /* 알림 없음 메시지 스타일 */\r\n            #notificationTableBody:empty::before {\r\n                content: '알림이 없습니다.';\r\n                display: block;\r\n                text-align: center;\r\n                padding: 20px;\r\n                color: #666; /* 회색 글자 색상 */\r\n                font-style: italic; /* 이탤릭체 */\r\n            }\r\n\r\n            /* 알림 셀 스타일 */\r\n            .notification-cell {\r\n                padding: 15px; /* 패딩 */\r\n                border-bottom: 1px solid #ddd; /* 하단 테두리 */\r\n            }\r\n\r\n            /* 알림 내용 스타일 */\r\n            .notification-content {\r\n                display: flex; /* 플렉스 박스 사용 */\r\n                flex-direction: column; /* 세로 방향 정렬 */\r\n            }\r\n\r\n            /* 날짜 및 이름 강조 스타일 */\r\n            .notification-date {\r\n                font-size: 0.9em; /* 폰트 크기 조정 */\r\n                color: #666; /* 회색 글자 색상 */\r\n            }\r\n\r\n            .notification-name {\r\n                font-weight: bold; /* 두꺼운 폰트 */\r\n                color: #333; /* 어두운 글자 색상 */\r\n            }\r\n\r\n            /* 메시지 스타일 */\r\n            .notification-message {\r\n                font-size: 1em; /* 기본 폰트 크기 */\r\n                color: #444; /* 어두운 회색 글자 색상 */\r\n            }\r\n\r\n            /* '일괄 삭제하기' 버튼 스타일 */\r\n            #deleteNotificationAllBtn {\r\n                margin: 10px 10px;\r\n                padding: 10px 20px;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                background-color: #ff4d4d;\r\n                color: white;\r\n                border: none;\r\n                border-radius: 8px;\r\n                cursor: pointer;\r\n                transition: background-color 0.3s ease, transform 0.2s ease;\r\n            }\r\n\r\n            /* '일괄 삭제하기' 버튼 호버 및 클릭 효과 */\r\n            #deleteNotificationAllBtn:hover {\r\n                background-color: #ff3333; /* 호버 시 배경색 */\r\n            }\r\n    </style>\r\n\r\n<%--    즐겨찾기 스타일--%>\r\n    <style>\r\n        #myFavoritesTable {\r\n            width: 500px;\r\n            border-collapse: collapse;\r\n            margin-top: 20px;\r\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n\r\n        }\r\n\r\n        #myFavoritesTable th, #myFavoritesTable td {\r\n            text-align: center;\r\n            border-bottom: 1px solid #e0e0e0;\r\n        }\r\n        #myFavoritesTable th {\r\n            background-color: #f8f8f8;\r\n            font-weight: bold;\r\n            color: #333;\r\n            padding: 20px 0px;\r\n        }\r\n        /* 즐겨찾기 목록의 링크 스타일 */\r\n        #myFavoritesTable a {\r\n            color: #007bff; /* 링크 색상 */\r\n            text-decoration: none; /* 밑줄 제거 */\r\n        }\r\n        #myFavoritesTable th:nth-child(2){\r\n            width: 18%;\r\n            font-size: 14px;\r\n        }\r\n        #myFavoritesTable a:hover {\r\n            text-decoration: underline; /* 호버 시 밑줄 추가 */\r\n        }\r\n        /* 페이징 스타일 */\r\n        #myFavoritesPaging {\r\n            display: flex;\r\n            justify-content: space-around;\r\n            margin-top: 20px;\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        #myFavoritesPaging td {\r\n            padding: 8px 10px; /* 패딩 조정 (위아래 8px, 좌우 10px) */\r\n            margin: 0 5px; /* 좌우 여백 */\r\n            cursor: pointer; /* 커서 모양 변경 */\r\n            border: 1px solid #ddd; /* 테두리 색상 */\r\n            border-radius: 4px; /* 둥근 모서리 */\r\n            min-width: 40px; /* 최소 너비 설정 */\r\n            text-align: center; /* 텍스트 중앙 정렬 */\r\n        }\r\n\r\n        /* 현재 페이지 강조 스타일 */\r\n        #myFavoritesPaging td[style*=\"font-weight: bold\"] {\r\n            background-color: #007bff; /* 강조 색상 */\r\n            color: white; /* 강조 색상에서의 글자 색상 */\r\n        }\r\n\r\n        /* '이전'과 '다음' 버튼 스타일 */\r\n        #myFavoritesPaging td:first-child,\r\n        #myFavoritesPaging td:last-child {\r\n            background-color: #f8f9fa; /* 기본 배경색 */\r\n            font-weight: bold; /* 두꺼운 폰트 */\r\n        }\r\n        /* 알림 없음 메시지 스타일 */\r\n        #myFavoritesTableBody:empty::before {\r\n            content: '즐겨찾기 한 병원이 없습니다.';\r\n            display: block;\r\n            text-align: center;\r\n            padding: 20px;\r\n            color: #666; /* 회색 글자 색상 */\r\n            font-style: italic; /* 이탤릭체 */\r\n        }\r\n\r\n        /* 삭제 버튼 스타일 */\r\n        .myFavoritesDeleteBtn {\r\n            padding: 6px 12px;\r\n            background-color: #ff4d4d; /* 삭제 버튼 배경색 */\r\n            color: white; /* 버튼 텍스트 색상 */\r\n            border: none; /* 테두리 제거 */\r\n            border-radius: 4px; /* 버튼 모서리 둥글게 */\r\n            cursor: pointer; /* 클릭 가능 커서 */\r\n            transition: background-color 0.3s ease, transform 0.2s ease; /* 효과 */\r\n        }\r\n\r\n        .myFavoritesDeleteBtn:hover {\r\n            background-color: #ff3333; /* 호버 시 배경색 */\r\n        }\r\n\r\n        .myFavoritesDeleteBtn:active {\r\n            transform: scale(0.95); /* 클릭 시 버튼 크기 감소 */\r\n        }\r\n\r\n        /* '일괄 삭제하기' 버튼 스타일 */\r\n        #deleteMyFavoritesAllBtn {\r\n            margin: 10px 10px;\r\n            padding: 10px 20px;\r\n            font-size: 14px;\r\n            font-weight: bold;\r\n            background-color: #ff4d4d;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 8px;\r\n            cursor: pointer;\r\n            transition: background-color 0.3s ease, transform 0.2s ease;\r\n        }\r\n\r\n        #deleteMyFavoritesAllBtn:hover {\r\n            background-color: #ff3333;\r\n        }\r\n\r\n        #deleteMyFavoritesAllBtn:active {\r\n            transform: scale(0.95);\r\n        }\r\n    </style>\r\n    \r\n    <style>\r\n    \t/* footer */\r\n\t\t#footer {\r\n\t\t    position: relative;\r\n\t\t    width: 100%;\r\n\t\t    background-color: #8a8e92;\r\n\t\t    padding: 20px;\r\n\t\t    color: white;\r\n\t\t    z-index: 2;\r\n\t\t    display: flex;\r\n\t\t}\r\n\t\tfooter p {\r\n\t\t    color: white;\r\n\t\t    font-weight: 400;\r\n\t\t    align-items: center;\r\n\t\t    line-height: 30px;\r\n\t\t    font-size: 20px;\r\n\t\t    font-family: \"Do Hyeon\", sans-serif;\r\n\t\t}\r\n\t\tfooter p:first-child {\r\n\t\t    padding-left: 500px;\r\n\t\t}\r\n\t\t.footerRight {\r\n\t\t    margin-left: 90px;\r\n\t\t}\r\n\t\t.icons {\r\n\t\t    display: flex;\r\n\t\t    margin: 20px;\r\n\t\t    margin-left: 0;\r\n\t\t    align-items: center;\r\n\t\t}\r\n\t\t.icons a {\r\n\t\t    background-size: cover;\r\n\t\t    background-repeat: no-repeat;\r\n\t\t    background-position: center;\r\n\t\t    margin: 0 8px;\r\n\t\t}\r\n\t\t.icon_youtube {\r\n\t\t\twidth: 50px;\r\n\t\t\theight: 45px;\r\n\t\t    background-image: url('${cpath}/resources/image/icon_youtube.png');\r\n\t\t}\r\n\t\t.icon_instagram {\r\n\t\t\twidth: 43px;\r\n\t\t    height: 43px;\r\n\t\t    background-image: url('${cpath}/resources/image/icon_instagram.png');\r\n\t\t}\r\n\t\t.icon_facebook {\r\n\t\t\twidth: 45px;\r\n\t\t    height: 45px;\r\n\t\t    background-image: url('${cpath}/resources/image/icon_facebook.png');\r\n\t\t}\r\n\t\t.logo img {\r\n\t\t\twidth: 146px;\r\n\t\t\theight: 145px;\r\n\t\t\tmargin-top: -32px;\r\n\t\t\tmargin-left: -33px;\r\n\t\t}\r\n\r\n    </style>\r\n    <%--    chart    --%>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js@4.4.4/dist/chart.umd.min.js\"></script>\r\n    <!--  sweetalert2 -->\r\n    <script src=\"https://unpkg.com/sweetalert/dist/sweetalert.min.js\"></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>\r\n    <%-- sweetalert --%>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.js\"\r\n            integrity=\"sha512-7VTiy9AhpazBeKQAlhaLRUk+kAMAb8oczljuyJHPsVPWox/QIXDFOnT9DUk1UC8EbnHKRdQowT7sOBe7LAjajQ==\"\r\n            crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css\"\r\n          integrity=\"sha512-gOQQLjHRpD3/SEOtalVq50iDn4opLVup2TF8c4QPI3/NmUPNZOk2FG0ihi8oCU/qYEsw4P6nuEZT2lAG0UNYaw==\"\r\n          crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"/>\r\n\r\n    <%-- 카카오맵 API --%>\r\n    <script type=\"text/javascript\"\r\n            src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=f714ffceece9359c7acaeb2b338b1ae7&libraries=services,clusterer,drawing\"></script>\r\n\r\n    <%-- 좌표계산을 쉽게 할 수 있음 --%>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/geolib@3.3.4/lib/index.min.js\"></script>\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css\"/>\r\n\r\n    <!-- 다음 주소 API -->\r\n    <script src=\"https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n<%--아임포트 API--%>\r\n    <script type=\"text/javascript\" src=\"https://cdn.iamport.kr/js/iamport.payment-1.2.0.js\"></script>\r\n    <!-- jQuery 로드 -->\r\n    <script src=\"https://code.jquery.com/jquery-1.12.4.min.js\"></script>\r\n<%--    포트원 결제--%>\r\n    <script src=\"https://cdn.iamport.kr/v1/iamport.js\"></script>\r\n\r\n\r\n</head>\r\n<body>\r\n<!-- 즐겨찾기 테이블 -->\r\n<table id=\"myFavoritesTable\" class=\"hidden\">\r\n    <thead></thead>\r\n    <tbody></tbody>\r\n</table>\r\n\r\n<!-- 챗봇 아이콘 -->\r\n<div id=\"chat_icon\">\r\n    <a href=\"${cpath }/chat/room\" onclick=\"window.open(this.href, '_blank', 'width=600, height=1080'); return false;\">\r\n        <img src=\"${cpath }/resources/image/chat-icon.png\" width=\"50\">\r\n    </a>\r\n</div>\r\n\r\n\r\n<header>\r\n\t<div class=\"logo\">\r\n\t\t<a href=\"${cpath }\"><img src=\"${cpath }/resources/image/로고.png\"></a>\r\n\t</div>\r\n    <a href=\"${cpath }/healthInfo/healthInfo\">\r\n\t\t<div class=\"healthInfoIcon\"></div>\r\n\t</a>\r\n    <div class=\"-container\">\r\n        <c:if test=\"${empty login }\">\r\n        <div class=\"loginIcon\"></div>\r\n\t    </c:if>\r\n    </div>\r\n\r\n    <c:set var=\"default\" value=\"${cpath }/resources/image/default.png\" />\r\n    <c:if test=\"${not empty login }\">\r\n        <div class=\"header-right\">\r\n            <div class=\"loginIcon2\"></div>\r\n            <div class=\"notificationIcon\" id=\"notification\" data-page=\"1\"><span id=\"notificationCountSpan\" class=\"hidden\"></span></div>\r\n            <div class=\"myFavoritesIcon\" id=\"myFavorites\" data-page=\"1\"></div>\r\n            <span>${login.name }</span>\r\n            <a href=\"${cpath }/member/logout\"><button>로그아웃</button></a>\r\n\r\n        </div>\r\n    </c:if>\r\n</header>\r\n\r\n<!--예약 모달 -->\r\n<div id=\"bookingModal\" class=\"bookingModal hidden\" >\r\n    <div class=\"bookingOverlay\"></div>\r\n    <div class=\"bookingContent\">\r\n        <h3 class=\"bookingTitle\"></h3>\r\n        <div class=\"bookingDetail\"></div>\r\n        <button id=\"closeBookingBtn\">닫기</button>\r\n    </div>\r\n</div>\r\n\r\n<%-- 최근 본 병원 목록 표시 (로그인 후) --%>\r\n<c:if test=\"${not empty recentHospitals}\">\r\n<div id=\"recentHospitalsContainer\">\r\n    <h2>최근 본 병원</h2>\r\n    <div class=\"recent-hospitals\">\r\n        <c:forEach var=\"hospital\" items=\"${recentHospitals}\">\r\n            <a href=\"${cpath}/hospitalInfo/${hospital.id}\">\r\n                <div class=\"hospital-card\">\r\n                    <img src=\"${hospital.imageUrl}\" class=\"recentHospital-image\"/>\r\n                    <div class=\"recentHospital-info\">\r\n                        <h3 class=\"hospital-name\">${hospital.hospital_name}</h3>\r\n                    </div>\r\n                </div>\r\n            </a>\r\n        </c:forEach>\r\n    </div>\r\n</div>\r\n</c:if>\r\n\r\n<!-- 예약하기 입력 폼 -->\r\n<form id=\"bookingInsertForm\" class=\"hidden\">\r\n    <p><input type=\"hidden\" name=\"member_id\" value=\"${login.id }\"></p>\r\n    <p><input id=\"hospital_id\" type=\"hidden\" name=\"hospital_id\" value=\"${hospital.id }\"></p>\r\n    <p><input type=\"hidden\" name=\"status\" value=1></p>\r\n    <p><input id=\"booking_date\" type=\"datetime-local\" name=\"booking_date\"  value=\"${now }\" required></p>\r\n    <p><input type=\"submit\" value=\"예약하기\"></p>\r\n</form>\r\n\r\n<!-- 예약 변경 입력 폼 -->\r\n<form id=\"bookingUpdateForm\" class=\"hidden\">\r\n    <p><input type=\"hidden\" name=\"member_id\" value=\"${login.id }\"></p>\r\n    <p><input id=\"hospital_id\" type=\"hidden\" name=\"hospital_id\" value=\"${hospital.id }\"></p>\r\n    <p><input id=\"booking_date\" type=\"datetime-local\" name=\"booking_date\" required><p>\r\n    <p><input type=\"submit\" value=\"예약변경\"></p>\r\n</form>\r\n\r\n<!-- 알림 정보 테이블 -->\r\n<table id=\"notificationTable\" class=\"hidden\">\r\n    <thead></thead>\r\n    <tbody></tbody>\r\n</table>\r\n\r\n<%--로그인--%>\r\n<script>\r\n    const cpath = '${cpath}'\r\n    const loginIcon = document.querySelector('div.loginIcon')\r\n    console.log(loginIcon)\r\n    const loginIcon2 = document.querySelector('div.loginIcon2')\r\n    if (loginIcon) {\r\n        loginIcon.addEventListener('click', function() {\r\n            location.href = cpath + '/member/login'\r\n        })\r\n    }\r\n\r\n    if (loginIcon2) {\r\n        loginIcon2.addEventListener('click', function() {\r\n            location.href =  '${cpath}/member/info/${login.id}'\r\n        })\r\n    }\r\n</script>\r\n\r\n<!-- 호원 스크립트 -->\r\n<script>\r\n    <!-- 알림 스크립트 -->\r\n    const notification = document.getElementById('notification')\r\n    const notificationTable = document.getElementById('notificationTable')\r\n    const notificationTableHead = document.querySelector('#notificationTable thead')\r\n    const notificationTableBody = document.querySelector('#notificationTable tbody')\r\n    const bookingTitleElement = document.querySelector('.bookingTitle')\r\n    const bookingDetailElement = document.querySelector('.bookingDetail')\r\n    const bookingOverlay = document.querySelector('.bookingOverlay')\r\n    const notificationCountSpan = document.getElementById('notificationCountSpan')\r\n    const closeBookingBtn = document.getElementById('closeBookingBtn')\r\n    const bookingInsertForm = document.getElementById('bookingInsertForm')\r\n    const bookingUpdateForm = document.getElementById('bookingUpdateForm')\r\n\r\n    // 밀리초단위의 시간정보를 년월일시분 형태의 문자열로 변환하는 함수\r\n    function formatDate(d) {\r\n        const date = new Date(d)\r\n        const year = date.getFullYear()\r\n        const month = String(date.getMonth() + 1).padStart(2, '0') // 월은 0부터 시작하므로 +1\r\n        const day = String(date.getDate()).padStart(2, '0')\r\n        const hours = String(date.getHours()).padStart(2, '0')\r\n        const minutes = String(date.getMinutes()).padStart(2, '0')\r\n        return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes\r\n    }\r\n\r\n    // 예약 모달 여는 함수\r\n    function openBookingModal(bookingTitle, bookingDetail) {\r\n        bookingTitleElement.innerText = bookingTitle\r\n        bookingDetailElement.appendChild(bookingDetail)\r\n        bookingModal.classList.remove('hidden')\r\n    }\r\n\r\n    // 예약 모달 닫는 함수\r\n    function closeBookingModal(event){\r\n        bookingModal.classList.add('hidden')\r\n        bookingInsertForm.classList.add('hidden')\r\n        bookingUpdateForm.classList.add('hidden')\r\n        notificationTable.classList.add('hidden')\r\n        myFavoritesTable.classList.add('hidden')\r\n    }\r\n\r\n\r\n\r\n    // 아직 안읽은 알림 갯수 가져와서 띄우는 함수\r\n    async function notificationCount(){\r\n        const url = '${cpath}/notificationCount'\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if (result > 0) {\r\n            notificationCountSpan.classList.remove('hidden')\r\n            if (result >= 10) {\r\n                notificationCountSpan.innerText = '9+' // 10 이상은 '9+'로 표시\r\n            } else {\r\n                notificationCountSpan.innerText = result // 10 미만은 해당 숫자 표시\r\n            }\r\n            return result\r\n        } else {\r\n            notificationCountSpan.innerText = '' // 0 이하일 경우 비움\r\n            notificationCountSpan.classList.add('hidden')\r\n            return ''\r\n        }\r\n    }\r\n\r\n    // 알림 페이징 최대 페이지 수 가져오는 함수\r\n    async function notificationMaxPage(startPage){\r\n        const url = '${cpath}/notificationMaxPage'\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if(result != 0){\r\n            let tag = '<tr id=\"notificationPaging\">'\r\n            tag += '<td>이전</td>'\r\n            for(let i = startPage; i <= Math.min(startPage + 4, result); i++){\r\n                tag += '<td data-page=\"' + i + '\">' + i + '</td>'\r\n            }\r\n            tag += '<td>다음</td></tr>'\r\n            notificationTableBody.innerHTML = tag\r\n        }\r\n        else notificationTableBody.innerText = '알림이 없습니다.'\r\n        return result\r\n    }\r\n\r\n\r\n    // 알림 리스트 가져와서 페이지별로 띄우는 함수\r\n    async function notificationList(thisPage){\r\n        const url = '${cpath}/notificationList/' + thisPage\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        let tag = ''\r\n        tag += '<tr><button id=\"deleteNotificationAllBtn\">일괄 삭제하기</button></tr>'\r\n        result.forEach(e => {\r\n            tag += '<tr>' +\r\n                '<td class=\"notification-cell\" style=\"background-color: ' + (e.read ? '#ffffff' : 'lightskyblue') + ';\">' +\r\n                '<div class=\"notification-content\">' +\r\n                '<span class=\"notification-date\">' + formatDate(e.sent_time) + '</span>  ' +\r\n                '<span class=\"notification-name\">' + e.name + '님의 ' + e.hospital_name + '</span> ' +\r\n                '<span class=\"notification-date\">' + formatDate(e.booking_date) + '</span> ' +\r\n                '<span class=\"notification-message\">' + e.message + '</span>' +\r\n                '</div>' +\r\n                '</td>' +\r\n                '<td>' +\r\n                '<button class=\"notificationDeleteBtn\" data-page=\"' + thisPage + '\" data-id=\"' + e.id + '\">삭제</button>' +\r\n                '</td>' +\r\n                '</tr>'\r\n        })\r\n        notificationTableHead.innerHTML = tag\r\n\r\n        // 알림삭제 버튼 기능부여\r\n        document.querySelectorAll('.notificationDeleteBtn').forEach(btn => {\r\n            btn.onclick = (event) => {\r\n                deleteNotification(event)\r\n                readNotification(event)\r\n            }\r\n        })\r\n        document.getElementById('deleteNotificationAllBtn').addEventListener('click', deleteNotificationAll)\r\n        return result  // 결과를 반환합니다.\r\n    }\r\n\r\n    // 알림 지우는 함수\r\n    async function deleteNotification(event) {\r\n        event.preventDefault()\r\n        const id = parseInt(event.target.dataset.id)\r\n        const thisPage = parseInt(event.target.dataset.page)\r\n        const url = '${cpath}/deleteNotification/' + id\r\n        const opt = {\r\n            method: 'DELETE'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json());\r\n        if (result == 1) {\r\n            await notificationCount()\r\n            await updateNotificationPage(thisPage)\r\n        }\r\n    }\r\n\r\n    // 알림 페이지 업데이트 함수\r\n    function updateNotificationPagination(currentPage, startPage, maxPage) {\r\n        document.querySelectorAll('#notificationPaging td').forEach((td, i, arr) => {\r\n            if(i == 0) {\r\n                td.onclick = () => {\r\n                    const prevPage = Math.max(1, currentPage - 1)\r\n                    readNotification({ target: { dataset: { page: prevPage } } })\r\n                }\r\n            } else if(i == arr.length - 1) {\r\n                td.onclick = () => {\r\n                    const nextPage = Math.min(maxPage, currentPage + 1)\r\n                    readNotification({ target: { dataset: { page: nextPage } } })\r\n                }\r\n            } else {\r\n                td.onclick = (e) => readNotification(e)\r\n            }\r\n\r\n            if(i + startPage - 1 == currentPage) td.style.fontWeight = 'bold'\r\n        })\r\n    }\r\n\r\n    // 알림 페이지 변경 함수\r\n    async function updateNotificationPage(currentPage) {\r\n        const startPage = (Math.floor((currentPage + 4) / 5) - 1) * 5 + 1\r\n        const maxPage = await notificationMaxPage(startPage)\r\n\r\n        // 현재 페이지의 알림 목록을 가져옵니다.\r\n        const notifications = await notificationList(currentPage)\r\n\r\n        if (notifications.length === 0 && currentPage > 1) {\r\n            // 현재 페이지가 비어있고, 첫 번째 페이지가 아니라면 이전 페이지로 이동\r\n            await readNotification({ target: { dataset: { page: currentPage - 1 } } })\r\n        } else {\r\n            // 페이징 업데이트\r\n            updateNotificationPagination(currentPage, startPage, maxPage)\r\n        }\r\n    }\r\n\r\n\r\n    // 알림 읽음 처리하는 함수\r\n    async function readNotification(event) {\r\n        const thisPage = parseInt(event.target.dataset.page)\r\n        const startPage = (Math.floor((thisPage + 4) / 5) - 1) * 5 + 1\r\n\r\n        // 알림 리스트 불러오기\r\n        await notificationList(thisPage)\r\n\r\n        // 알림 읽음 처리\r\n        const url = '${cpath}/readNotification/' + thisPage\r\n        const opt = {\r\n            method : 'PATCH'\r\n        }\r\n        await fetch(url, opt)\r\n\r\n        // 알림 안읽은 수에서 읽은만큼 빼기\r\n        notificationCount()\r\n\r\n        // 알림창 최대 페이지 수\r\n        const maxPage = await notificationMaxPage(startPage)\r\n\r\n        // 알림 페이징\r\n        document.querySelectorAll('#notificationPaging td').forEach((td, i, arr) => {\r\n\r\n            // 이전\r\n            if(i == 0) {\r\n                td.onclick = (e) => {\r\n                    const prevPage = Math.max(1, thisPage - 1)\r\n                    readNotification({ target: { dataset: { page: prevPage } } })\r\n                }\r\n            }\r\n\r\n            // 다음\r\n            else if(i == arr.length - 1) {\r\n                td.onclick = async (e) => {\r\n                    const nextPage = Math.min(maxPage, thisPage + 1)\r\n                    readNotification({ target: { dataset: { page: nextPage } } })\r\n                }\r\n            }\r\n\r\n            // 페이지\r\n            else td.onclick = (e) => readNotification(e)\r\n\r\n            // 현재 페이지 숫자 굵게 표시\r\n            if(i + startPage - 1 == thisPage) td.style.fontWeight = 'bold'\r\n        })\r\n        notificationTable.classList.remove('hidden')\r\n        openBookingModal('알림', notificationTable)\r\n    }\r\n\r\n    async function deleteNotificationAll(event){\r\n        const url = '${cpath}/deleteNotificationAll'\r\n        const opt = {\r\n            method : 'DELETE'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if(result > 0) readNotification({ target: { dataset: { page: 1 } } })\r\n\r\n\r\n    }\r\n\r\n\r\n    closeBookingBtn.addEventListener('click', closeBookingModal)\r\n    bookingOverlay.onclick = closeBookingModal\r\n    notification.addEventListener('click', readNotification)\r\n    document.addEventListener('DOMContentLoaded', notificationCount)\r\n</script>\r\n\r\n\r\n\r\n<!-- 즐겨찾기 -->\r\n<script>\r\n    const myFavorites = document.getElementById('myFavorites')\r\n    const myFavoritesTable = document.getElementById('myFavoritesTable')\r\n    const myFavoritesTableHead = document.querySelector('#myFavoritesTable thead')\r\n    const myFavoritesTableBody = document.querySelector('#myFavoritesTable tbody')\r\n\r\n\r\n    async function getFavorite(id){\r\n        const url = cpath + '/getFavorite/' + parseInt(id)\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        return result\r\n    }\r\n\r\n    // 즐겨찾기 추가하는 함수\r\n    async function myFavorite(event){\r\n        event.preventDefault()\r\n        const url = cpath + '/myFavorite/' + parseInt(event.target.dataset.id)\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        location.reload()\r\n    }\r\n\r\n    // 즐겨찾기 목록 가져오는 함수\r\n    async function myFavoritesList(thisPage){\r\n        const url = cpath + '/myFavoritesList/' + thisPage\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        let tag = ''\r\n        tag += '<tr><button id=\"deleteMyFavoritesAllBtn\">일괄 삭제하기</button></tr>'\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        console.log(result)\r\n        result.forEach(favorite => {\r\n            tag += '<tr>'\r\n            tag += '<th><a href=\"${cpath }/hospitalInfo/' + favorite.hospital_id + '\">' + favorite.hospital_name + '</a></th>'\r\n            tag += '<th>' + favorite.address + '</th><th>' + favorite.tel + '</th><th><button class=\"myFavoritesDeleteBtn\" data-page=\"' + thisPage + '\" data-id=\"' + favorite.hospital_id + '\">삭제</button></th>'\r\n            tag += '</tr>'\r\n        })\r\n        myFavoritesTableHead.innerHTML = tag\r\n\r\n        // 즐찾삭제 버튼 기능부여\r\n        document.querySelectorAll('.myFavoritesDeleteBtn').forEach(btn => {\r\n            btn.onclick = (event) => {\r\n                Swal.fire({\r\n                    title: '즐겨찾기 삭제',\r\n                    text: '해당 병원을 즐겨찾기 삭제 하시겠습니까?',\r\n                    icon: 'question',  // 'type' 대신 'icon' 사용\r\n                    showCancelButton: true,\r\n                    confirmButtonText: '확인',\r\n                    cancelButtonText: '취소',\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    reverseButtons: true, // 취소 버튼을 왼쪽에 배치하려면 추가\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        deleteMyFavorites(event)\r\n                        openMyFavorites(event)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        document.getElementById('deleteMyFavoritesAllBtn').addEventListener('click', () => {\r\n            if(result != ''){\r\n                Swal.fire({\r\n                    title: '즐겨찾기 일괄삭제',\r\n                    text: '즐겨찾기 목록을 전부 삭제 하시겠습니까?',\r\n                    icon: 'question',\r\n                    confirmButtonText: '확인',\r\n                    cancelButtonText: '취소',\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    showCancelButton: true,\r\n                    allowOutsideClick: false,\r\n                    allowEscapeKey: false,\r\n                    showCloseButton: false\r\n                }).then((result) => {if(result.isConfirmed) deleteMyFavoritesAll()})}})\r\n        return result\r\n    }\r\n\r\n    // 즐겨찾기 지우는 함수\r\n    async function deleteMyFavorites(event) {\r\n        event.preventDefault()\r\n        const id = parseInt(event.target.dataset.id)\r\n        const thisPage = parseInt(event.target.dataset.page)\r\n        console.log(thisPage)\r\n        const url = '${cpath}/deleteMyFavorites/' + id\r\n        const opt = {\r\n            method: 'DELETE'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json());\r\n        if (result == 1) {\r\n            await updateMyFavoritesPage(thisPage)\r\n        }\r\n    }\r\n\r\n    // 즐겨찾기 페이징 최대 페이지 수 가져오는 함수\r\n    async function myFavoritesMaxPage(startPage){\r\n        const url = '${cpath}/myFavoritesMaxPage'\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if(result != 0){\r\n            let tag = '<tr id=\"myFavoritesPaging\">'\r\n            tag += '<td>이전</td>'\r\n            for(let i = startPage; i <= Math.min(startPage + 4, result); i++){\r\n                tag += '<td data-page=\"' + i + '\">' + i + '</td>'\r\n            }\r\n            tag += '<td>다음</td></tr>'\r\n            myFavoritesTableBody.innerHTML = tag\r\n        }\r\n        else myFavoritesTableBody.innerText = '즐겨찾기 한 병원이 없습니다.'\r\n        return result\r\n    }\r\n\r\n    // 즐찾 페이지 업데이트 함수\r\n    function updateMyFavoritesPagination(currentPage, startPage, maxPage) {\r\n\r\n        document.querySelectorAll('#myFavoritesPaging td').forEach((td, i, arr) => {\r\n            if(i == 0) {\r\n                td.onclick = () => {\r\n                    const prevPage = Math.max(1, currentPage - 1)\r\n                    openMyFavorites({ target: { dataset: { page: prevPage } } })\r\n                }\r\n            } else if(i == arr.length - 1) {\r\n                td.onclick = () => {\r\n                    const nextPage = Math.min(maxPage, currentPage + 1)\r\n                    openMyFavorites({ target: { dataset: { page: nextPage } } })\r\n                }\r\n            } else {\r\n                td.onclick = (e) => openMyFavorites(e)\r\n            }\r\n\r\n            if(i + startPage - 1 == currentPage) td.style.fontWeight = 'bold'\r\n        })\r\n    }\r\n\r\n    // 즐찾 페이지 변경 함수\r\n    async function updateMyFavoritesPage(currentPage) {\r\n        const startPage = (Math.floor((currentPage + 4) / 5) - 1) * 5 + 1\r\n        const maxPage = await myFavoritesMaxPage(startPage)\r\n\r\n        // 현재 페이지의 알림 목록을 가져옵니다.\r\n        const myFavoritess = await myFavoritesList(currentPage)\r\n\r\n        if (myFavoritess.length === 0 && currentPage > 1) {\r\n            // 현재 페이지가 비어있고, 첫 번째 페이지가 아니라면 이전 페이지로 이동\r\n            await openMyFavorites({ target: { dataset: { page: currentPage - 1 } } })\r\n        } else {\r\n            // 페이징 업데이트\r\n            updateMyFavoritesPagination(currentPage, startPage, maxPage)\r\n        }\r\n    }\r\n\r\n    // 즐겨찾기 목록 여는 함수\r\n    async function openMyFavorites(event) {\r\n        console.log(event.target.dataset.page)\r\n        const thisPage = parseInt(event.target.dataset.page)\r\n        const startPage = (Math.floor((thisPage + 4) / 5) - 1) * 5 + 1\r\n\r\n        // 즐겨찾기 리스트 불러오기\r\n        await myFavoritesList(thisPage)\r\n\r\n        // 즐겨찾기 최대 페이지 수\r\n        const maxPage = await myFavoritesMaxPage(startPage)\r\n\r\n\r\n        // 즐겨찾기 페이징\r\n        document.querySelectorAll('#myFavoritesPaging td').forEach((td, i, arr) => {\r\n\r\n            // 이전\r\n            if(i == 0) {\r\n                td.onclick = (e) => {\r\n                    const prevPage = Math.max(1, thisPage - 1)\r\n                    openMyFavorites({ target: { dataset: { page: prevPage } } })\r\n                }\r\n            }\r\n\r\n            // 다음\r\n            else if(i == arr.length - 1) {\r\n                td.onclick = async (e) => {\r\n                    const nextPage = Math.min(maxPage, thisPage + 1)\r\n                    openMyFavorites({ target: { dataset: { page: nextPage } } })\r\n                }\r\n            }\r\n\r\n            // 페이지\r\n            else td.onclick = (e) => openMyFavorites(e)\r\n\r\n            // 현재 페이지 숫자 굵게 표시\r\n            if(i + startPage - 1 == thisPage) td.style.fontWeight = 'bold'\r\n        })\r\n\r\n        myFavoritesTable.classList.remove('hidden')\r\n        openBookingModal('즐겨찾기 목록', myFavoritesTable)\r\n    }\r\n\r\n    async function deleteMyFavoritesAll(event){\r\n        const url = '${cpath}/deleteMyfavoritesAll'\r\n        const opt = {\r\n            method : 'DELETE'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if(result > 0) openMyFavorites({ target: { dataset: { page: 1 } } })\r\n    }\r\n\r\n\r\n    myFavorites.addEventListener('click', (event) => {\r\n        if('${login}' != '') openMyFavorites(event)\r\n        else {\r\n            Swal.fire({\r\n                title: '',\r\n                text: '로그인 해주세요.',\r\n                icon: 'info',\r\n                confirmButtonText: '확인',\r\n                cancelButtonText: '취소',\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                showCancelButton: true,\r\n                allowOutsideClick: false,\r\n                allowEscapeKey: false,\r\n                showCloseButton: false\r\n            }).then((result) => {if(result.isConfirmed) location.href = '${cpath}/member/login'})\r\n        }\r\n    })\r\n</script>\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/WEB-INF/views/header.jsp b/src/main/webapp/WEB-INF/views/header.jsp
--- a/src/main/webapp/WEB-INF/views/header.jsp	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/src/main/webapp/WEB-INF/views/header.jsp	(date 1732156555922)
@@ -99,9 +99,9 @@
 
 
         .hospital-list li.selected {
-            background-color: #007bff; /* 선택된 항목 배경색 */
-            color: white; /* 선택된 항목 글자색 */
-            font-weight: bold; /* 선택된 항목 글씨 진하게 */
+            background-color: #007bff;
+            color: white;
+            font-weight: bold;
         }
 
         
@@ -134,7 +134,7 @@
             position: absolute;
             width: 100%;
             height: 100%;
-            background-color: rgba(0, 0, 0, 0.5); /* 반투명한 검은색 배경 */
+            background-color: rgba(0, 0, 0, 0.5);
         }
 
         .bookingContent {
Index: target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/info.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<%@ include file=\"../header.jsp\" %>\r\n\r\n<div class=\"main-content\">\r\n    <div class=\"user-info\">\r\n        <h2>반갑습니다! ${login.name }(${login.gender }) 회원님!</h2>\r\n\r\n        <div class=\"profile-image\">\r\n            <img class=\"size\" src=\"${cpath }/fpupload/image/${empty login.storedFileName ? 'default.png' : login.storedFileName }\" alt=\"프로필 이미지\">\r\n            <a href=\"${cpath }/member/imgUpdate/${login.id}\" class=\"upload-icon\">\r\n                <img class=\"uploadicon\" src=\"${cpath }/resources/image/upload_12080306.png\" alt=\"업로드\">\r\n            </a>\r\n        </div>\r\n        <div class=\"user-details\">\r\n            <p>[개명 신청시 1:1 챗봇 문의 부탁드립니다.]</p>\r\n            <p>${login.userid }으로 접속 중입니다.</p>\r\n            <p>주소 정보: ${login.location }</p>\r\n        </div>\r\n        <div>\r\n         <details>\r\n            <summary>추가 주소</summary>\r\n            <fieldset>\r\n               <legend>주소 리스트</legend>\r\n               <c:forEach var=\"dto\" items=\"${list }\">\r\n                  <form method=\"POST\" action=\"${cpath }/member/info/${dto.id}\">\r\n                     <p>${dto.memberLocation }|<input type=\"submit\" value=\"삭제\">\r\n                     </p>\r\n                  </form>\r\n               </c:forEach>\r\n            </fieldset>\r\n         </details>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"category-buttons\">\r\n        <a href=\"${cpath }/member/bookingList/${login.id}\" class=\"category-button\">\r\n            <i class=\"icon-reservation\"></i>\r\n            <span>예약 정보 리스트</span>\r\n        </a>\r\n        <a href=\"${cpath }/member/locationUpdate/${login.id}\" class=\"category-button\">\r\n            <i class=\"icon-location\"></i>\r\n            <span>주소 정보 수정</span>\r\n        </a>\r\n        <a href=\"${cpath }/member/addLocation/${login.id }\" class=\"category-button\">\r\n            <i class=\"icon-unknown\"></i>\r\n            <span>주소 추가 하기</span>\r\n        </a>\r\n        <a href=\"${cpath }/member/pwUpdate/${login.id}\" class=\"category-button\">\r\n            <i class=\"icon-password\"></i>\r\n            <span>패스워드 수정</span>\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/info.jsp b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/info.jsp
--- a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/info.jsp	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/info.jsp	(date 1732155578134)
@@ -2,56 +2,348 @@
     pageEncoding="UTF-8"%>
 <%@ include file="../header.jsp" %>
 
-<div class="main-content">
-    <div class="user-info">
-        <h2>반갑습니다! ${login.name }(${login.gender }) 회원님!</h2>
+<style>
+   body{
+        background: linear-gradient(to bottom,#2c3e50, #a4a4a4);
+        width:100vw;
+        height:100vh;
+    }
+    .Infomodal {
+       height: 91%;
+        display: flex;
+        justify-content: center;
+        align-items: center;
+    }
+    .Infocontent {
+        width: 600px;
+        height: auto;
+        padding: 20px;
+        background-color: rgba(247, 249, 250, 0.8);
+        border-radius: 8px;
+        box-shadow: 0 0 10px rgba(0,0,0,0.1);
+        text-align: center;
+    } 
+    .Infocontent .profile-image .size{
+        text-align: center;
+        width: 250px;
+        height: 250px;
+        border-radius: 10px;
+    }
+    .Infocontent .upload-Btn {
+        text-align: center;
+    }
+    .Infocontent .upload-Btn a{
+        background-color: #2c3e50;
+        font-size: 17px;
+        color: white;
+        width: 250px;
+        height: 33px;
+        margin-bottom: 0;
+        padding-top: 0px;
+        display: flex;
+        justify-content: center;
+        align-items: center;
+        text-align: center;
+        border: 0;
+        border-radius: 4px;
+        text-decoration: none;  
+    }
+    .Infocontent .upload-Btn a:hover {
+       background-color: #34495e;
+    }
+    .Infocontent .profile-container {
+       display: flex;
+       flex-direction: column;
+       align-items: center; /* 수평 중앙 정렬 */
+       justify-content: center; /* 수직 중앙 정렬 */
+       gap: 10px; /* 요소 간 간격 */
+   }
+   .user-details {
+      text-align: left;
+       width: 280px;
+       margin: auto;
+       padding-left:10px;
+       background-color: rgba(0, 0, 0, 0.2); 
+       border-radius: 10px;
+   }
+   .user-details p {
+      padding: 0;
+      margin: 0;
+      margin-top: 5px;
+   }
+   .category-buttons {
+       display: flex; /* Flexbox 활성화 */
+       flex-direction: row; /* 가로 정렬 */
+       justify-content: space-around; /* 버튼 간 균등 배치 */
+       align-items: center; /* 세로 가운데 정렬 */
+       gap: 0px; /* 버튼 간 간격 최소화 */
+       margin-top: 10px; /* 상단 여백 줄이기 */
+   }
+   
+   .category-button {
+       width: 135px;
+       height: 90px;
+       margin: 0; /* 버튼 외부 간격 제거 */
+       padding: 0;
+       display: flex; /* 아이콘과 텍스트 정렬 */
+       flex-direction: column; /* 세로 정렬 */
+       align-items: center; /* 중앙 정렬 */
+       justify-content: center; /* 세로 중앙 정렬 */
+       text-decoration: none; /* 링크 밑줄 제거 */
+       background-color: rgba(247, 249, 250, 0.9); /* 버튼 배경색 */
+       color: black; /* 텍스트 색상 */
+       font-size: 12px; /* 폰트 크기 줄이기 */
+       border-radius: 8px; /* 둥근 모서리 */
+       box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* 버튼 그림자 */
+   }
+   
+   .category-button:hover {
+       background-color: #34495e; /* 호버 배경색 */
+   }
+   
+   .category-button i {
+       font-size: 20px; /* 아이콘 크기 줄이기 */
+       margin-bottom: 4px; /* 아이콘과 텍스트 간격 최소화 */
+   }
+   
+   .category-button span {
+       font-weight: normal; /* 텍스트 강조 줄이기 */
+       font-size: 11px; /* 텍스트 크기 줄이기 */
+   }
+/* imgUpdate style */
+   .ImgModal {
+      position: fixed;
+        top: 136px;
+        left: 1100px;
+        width: 100%;
+        height: 100%;
+        display: flex;
+        justify-content: center;
+        align-items: center;
+   }
+   .Updateoverlay {
+      background-color: rgba(0, 0, 0, 0.8);
+      top: 0;
+       left: 0;
+      width: 100%;
+      height: 100%;
+      position: fixed;
+      z-index: 1;
+   }
+   .Imgcontent {
+        width: 280px;
+        height: 430px;
+        padding: 20px;
+        padding-bottom: 43px;
+        background-color: rgba(247, 249, 250, 0.8);
+        border-radius: 8px;
+        box-shadow: 0 0 10px rgba(0,0,0,0.1);
+        text-align: center;
+        z-index: 2;
+        position: relative;
+    }
+    .Imgoverlay {
+       background-color: rgba(0, 0, 0, 0.3);
+       border-radius: 8px;
+       height: 447px;
+    }
+    .topText {
+       width: 50px;
+       margin: 0px;
+       color: black;
+       padding-left: 13px;
+       padding-top: 5px;
+    }
+    .text1 {
+       width: 333px;
+       font-size: 11px;
+       color: white;
+       padding-bottom: 6px;
+    }
+    .imgUploadP {
+       margin-top: 0px;
+    }
+    .hidden-file-input {
+       display: none;
+   }
+   .custom-file-label {
+      background-color: #2c3e50;
+       font-size: 17px;
+       color: white;
+       width: 200px;
+       height: 32px;
+       margin-bottom: 0;
+       padding-top: 0px;
+       display: flex;
+       justify-content: center;
+       align-items: center;
+       text-align: center;
+       border: 0;
+       border-radius: 4px;
+       text-decoration: none;
+       margin-left: 40px;
+       padding-bottom: 3px;
+   }
+   .custom-file-label:hover {
+       background-color: #34495e;
+   }
 
-        <div class="profile-image">
-            <img class="size" src="${cpath }/fpupload/image/${empty login.storedFileName ? 'default.png' : login.storedFileName }" alt="프로필 이미지">
-            <a href="${cpath }/member/imgUpdate/${login.id}" class="upload-icon">
-                <img class="uploadicon" src="${cpath }/resources/image/upload_12080306.png" alt="업로드">
-            </a>
-        </div>
+</style>
+<div class="Infomodal">
+<div class="Infooverlay"></div>
+    <div class="Infocontent">
+    <h2>AMD, Members' Personal Information Service</h2>
+        <p style="color: gray;">회원님의 개인 정보와 일정을 수정 및 관리해보세요.</p>
+        <div class="profile-container">
+          <div class="profile-image">
+              <img class="size" src="${cpath }/fpupload/image/${empty login.storedFileName ? 'default.png' : login.storedFileName }" alt="프로필 이미지">
+          </div>
+          <p class="upload-Btn">
+              <a title="회원님의 개성을 나타내는 프로필 사진을 업로드 해보세요!" id="openImgUploadModal">IMG UPLOAD</a>
+          </p>
+      </div>
         <div class="user-details">
-            <p>[개명 신청시 1:1 챗봇 문의 부탁드립니다.]</p>
-            <p>${login.userid }으로 접속 중입니다.</p>
-            <p>주소 정보: ${login.location }</p>
+            <p style="font-weight: bold;">ID/E-mail   :</p>${login.userid } / ${login.email }
+            <p style="font-weight: bold;">NAME/GENDER :</p> ${login.name }   / ${login.gender }
+            <p style="font-weight: bold;">Address :</p> ${login.location }
         </div>
         <div>
-         <details>
-            <summary>추가 주소</summary>
-            <fieldset>
-               <legend>주소 리스트</legend>
-               <c:forEach var="dto" items="${list }">
-                  <form method="POST" action="${cpath }/member/info/${dto.id}">
-                     <p>${dto.memberLocation }|<input type="submit" value="삭제">
-                     </p>
-                  </form>
-               </c:forEach>
-            </fieldset>
-         </details>
-      </div>
-    </div>
-
+            <details>
+                <summary>Add Location List</summary>
+                <p>현재 위치 정보를 추가하여 List를 만들어,<br>Address정보로 등록하실 수 있습니다.</p>
+                <fieldset>
+                    <c:forEach var="dto" items="${list}">
+                        <form method="POST" action="${cpath}/member/info/${dto.id}"
+                            id="deleteForm_${dto.id}">
+                            <p>${dto.memberLocation}
+                                | <input type="submit" value="삭제">
+                            </p>
+                        </form>
+                    </c:forEach>
+                </fieldset>
+            </details>
+        </div>
     <div class="category-buttons">
         <a href="${cpath }/member/bookingList/${login.id}" class="category-button">
-            <i class="icon-reservation"></i>
-            <span>예약 정보 리스트</span>
+            <img src="${cpath }/resources/image/Reservation.png" style="width: 45px; height: 45px;">
+            <span style="font-size: 15px;">예약 정보 리스트</span>
         </a>
         <a href="${cpath }/member/locationUpdate/${login.id}" class="category-button">
-            <i class="icon-location"></i>
-            <span>주소 정보 수정</span>
+            <img src="${cpath }/resources/image/refresh_11316313.png" style="width: 45px; height: 45px;">
+            <span style="font-size: 15px;">주소 정보 수정</span>
         </a>
         <a href="${cpath }/member/addLocation/${login.id }" class="category-button">
-            <i class="icon-unknown"></i>
-            <span>주소 추가 하기</span>
+            <img src="${cpath }/resources/image/map-locator_4904196.png" style="width: 45px; height: 45px;">
+            <span style="font-size: 15px;">주소 추가 하기</span>
         </a>
         <a href="${cpath }/member/pwUpdate/${login.id}" class="category-button">
-            <i class="icon-password"></i>
-            <span>패스워드 수정</span>
+            <img src="${cpath }/resources/image/KakaoTalk_20241119_085732959.png" style="width: 45px; height: 45px;">
+            <span style="font-size: 15px;">패스워드 수정</span>
         </a>
     </div>
+    <p style="text-align: center;"><a href="${cpath }"><button>뒤로가기</button></a></p>
 </div>
+</div>
+
+<!-- imgUpdate -->
+<div id="ImgUploadModal" class="ImgModal" style="display: none;">
+<div class="Updateoverlay"></div>
+<div class="Imgcontent">
+   <div class="Imgoverlay">
+   <h3 class="topText">AMD, IMGupdate</h3>
+   <div class="text1">실물이 아니어도 좋습니다!<br>이미지를 변경하여 나의 개성을 표현하세요.</div>
+   <div>
+      <img src="${cpath }/fpupload/image/${empty login.storedFileName ? 'default.png' : login.storedFileName }" style="width: 200px; height: 190px; border-radius: 10px;">
+   </div>
+   <form method="POST" action="${cpath}/member/imgUpdate/${login.id}" enctype="multipart/form-data">
+      <p class="imgUploadP">
+         <input type="file" name="imgUpload" accept="image/*" class="hidden-file-input" id="fileInput" required>
+         <label for="fileInput" class="custom-file-label">IMG SEARCH</label>
+      </p>
+      <p><input type="submit" value="등록하기"></p>
+   </form>
+   <p class="closeImgUploadModal"><a href="${cpath }/member/info/${login.id}"><button>뒤로가기</button></a></p>
+   </div>
+   </div>
+</div>
+
+<%@ include file="../footer.jsp" %>
+
+<script>
+    document.addEventListener('DOMContentLoaded', function() {
+        // 서버에서 전송된 메시지 받기
+        const error2 = '${error2}'
+        const message3 = '${message3}'
+    
+        if (error2) {
+            swal({
+                title: "삭제 실패",
+                text: error2,
+                type: "error",
+                button: "확인"
+            })
+        }
+        if (message3) {
+            swal({
+                title: "삭제 성공",
+                text: message3,
+                type: "success",
+                button: "확인"
+            })
+        }
+    })
+    // imgUpdate 모달 코드
+    document.addEventListener('DOMContentLoaded', function() {
+       const modal = document.getElementById('ImgUploadModal') // 모달
+       const openModalBtn = document.getElementById('openImgUploadModal') // 모달을 여는 버튼
+       const closeModalBtn = document.querySelector('.closeImgUploadModal') // 뒤로가기 버튼
+   
+       // 모달 열기
+       openModalBtn.addEventListener('click', function(event) {
+           event.preventDefault() // 기본 링크 동작 방지
+           modal.style.display = 'block' // 모달 표시
+       })
+   
+       // 모달 닫기 함수
+       function closeModal() {
+           modal.style.display = 'none' // 모달 숨기기
+       }
+   
+       // 뒤로가기 버튼 클릭 시 모달 닫기
+       closeModalBtn.addEventListener('click', function(event) {
+           event.preventDefault() // 링크 기본 동작 방지 (페이지 리다이렉션 방지)
+           closeModal() // 모달 닫기
+       })
+   })
+   
+   // 프로필 업로드 sweetAlert 코드
+    document.addEventListener('DOMContentLoaded', function() {
+        
+        const message = '${message}' 
+        const error = '${error}'    
+
+        if (message) {
+            swal({
+                title: "업로드 성공",
+                text: message,
+                type: "success",
+                button: "확인"
+            })
+        }
+
+        if (error) {
+            swal({
+                title: "업로드 실패",
+                text: error,
+                type: "error",
+                button: "확인"
+            })
+        }
+    })
+    
+    const footer = document.getElementById('footer')
+   footer.style.backgroundColor = '#a2a3a3'
+</script>
 
 </body>
 </html>
\ No newline at end of file
Index: target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/join.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<%@ include file=\"../header.jsp\" %>\r\n\r\n<div id=\"joinModal\" class=\"modal\">\r\n<div class=\"joinoverlay\"></div>\r\n   \t<div class=\"joincontent\">\r\n   \t<h3><a href=\"${cpath }\">일반/통합회원가입</a></h3>\r\n\t<p><input id=\"joinWithNaver\" type=\"image\" src=\"${cpath }/resources/naver/btnG_완성형.png\" width=\"183\" height=\"43\"></p>\r\n\t\r\n\t<form method=\"POST\">\r\n\t\t<p>\r\n\t\t\t<input type=\"text\" name=\"userid\" placeholder=\"ID\" autocomplete=\"off\" required autofocus>\r\n\t\t\t<input type=\"button\" id=\"idCheck\" value=\"ID 중복 확인\">\r\n\t\t</p>\r\n\t\t<p><input type=\"password\" name=\"userpw\" placeholder=\"Password\" required>\r\n\t\t<p><input type=\"text\" name=\"name\" placeholder=\"이름 입력\" required></p>\r\n\t\t<p><input type=\"email\" name=\"email\" placeholder=\"email\"required></p>\r\n\t\t<p><input type=\"text\" name=\"location\" placeholder=\"주소를 검색하세요\" autocomplete=\"off\" required>\r\n\t\t<p><input type=\"text\" name=\"birth\" placeholder=\"주민번호 앞 6자리를 입력해주세요\" required>\r\n\t\t<p>\r\n\t\t\t<input id=\"gender\" type=\"radio\" name=\"gender\" value=\"M\">\r\n\t\t\t<label for=\"genderM\">남성</label>\r\n\t\t\t<input id=\"gender\" type=\"radio\" name=\"gender\" value=\"F\">\r\n\t\t\t<label for=\"genderF\">여성</label>\r\n\t\t</p>\r\n\t\t<div id=\"captcha\"></div>\r\n\t\t<p><input type=\"submit\" value=\"가입신청\"></p>\r\n\t</form>\r\n\t</div>\r\n</div>\r\n<script>\r\n\t// 다음 주소 찾기 함수 \r\n\tfunction onComplete(data) {\r\n\t\tdocument.querySelector('input[name=\"location\"]').value = data.address\r\n\t}\r\n\t\r\n\tfunction execDaumPostcode() {\r\n\t\tconst postCode = new daum.Postcode({\r\n\t        oncomplete: onComplete\r\n\t    })\r\n\t    postCode.open()\r\n\t}\r\n\t\r\n\t// 캡차 이미지를 로드하는 함수\r\n\tasync function loadCaptchaHandler() {\r\n\t    // members 요청을 통해 서버에서 캡차 데이터를 가져옵니다.\r\n\t    const url = '${cpath}/members/captcha'\r\n\t    const result = await fetch(url).then(resp => resp.json())\r\n\t    \r\n\t    let tag = '<fieldset><p>'\r\n\t    \r\n\t    // 이미지 경로 설정에서 \"${cpath}/upload/captcha/\"로 고정된 경로를 사용해야 합니다.\r\n\t    // 이 경로는 서버가 정적 리소스를 제공하는 경로와 일치해야 합니다.\r\n\t    // servlet-context.xml <resources> 부분에 경로 추가해야 404오류 안뜸\r\n\t    tag += '<img src=\"${cpath}/fpupload/captcha/' + result.captchaImage + '\" width=\"300\">'\r\n\t    tag += '<input type=\"button\" name=\"reload\" value=\"새로고침\">'\r\n\t    tag += '</p>'\r\n\t    tag += '<input type=\"text\" name=\"captcha\" placeholder=\"그림에 나타난 글자를 입력하세요\" required>'\r\n\t    tag += '</fieldset>'\r\n\r\n\t    // 생성한 HTML을 \"captcha\" 요소에 삽입합니다.\r\n\t    document.getElementById('captcha').innerHTML = tag\r\n\r\n\t    // 새로고침 버튼을 클릭하면 캡차 이미지를 다시 로드하도록 설정합니다.\r\n\t    document.querySelector('input[name=\"reload\"]').onclick = loadCaptchaHandler\r\n\t}\r\n\r\n\t// 페이지가 로드되면 첫 캡차 이미지를 불러오도록 설정\r\n\tasync function loadHandler() {\r\n\t    await loadCaptchaHandler()\r\n\t}\r\n\r\n\t// 폼을 제출할 때 캡차 인증을 확인하는 함수\r\n\tasync function submitHandler(event) {\r\n\t    // 기본 제출 이벤트를 방지하고 members 요청을 준비합니다.\r\n\t    event.preventDefault();\r\n\t    \r\n\t    const formData = new FormData()\r\n\t    formData.append('user', document.querySelector('input[name=\"captcha\"]').value)\r\n\t    \r\n\t    const url = '${cpath}/members/captcha'\r\n\t    const opt = {\r\n\t        method: 'POST',\r\n\t        body: formData\r\n\t    };\r\n\t    \r\n\t    const result = await fetch(url, opt).then(resp => resp.json());\r\n\t    \r\n\t    if(result.result) {  \r\n\t        // 캡차 검증 성공 시, 원래 진행하려던 회원가입 폼을 제출합니다.\r\n\t        event.target.submit()\r\n\t    }\r\n\t    else {  \r\n\t        // 캡차 검증 실패 시, 메시지를 출력하고 캡차 이미지를 새로 로드합니다.\r\n\t        swal('캡차 검증 실패', '입력값을 다시 확인해주세요', 'error')\r\n\t        loadCaptchaHandler()\r\n\t    }\r\n\t}\r\n\t\r\n\t// 네이버 로그인 누를 시 프로필 불러오는 스크립트 함수\r\n\tfunction joinWithNaverHandler() {\r\n\t\tconst url = '${naverLoginURL}'\r\n\t\tconst name = '_blank'\r\n\t\tconst options = 'menubar=no, toolbar=no, width=700, height=1000'\r\n\t\twindow.open(url, name, options)\r\n\t}\r\n\t\r\n\t// 아이디 중복 확인 스크립트 함수\r\n\tasync function idCheckHandler() {\r\n\t\tconst userid = document.querySelector('input[name=\"userid\"]')\r\n\t\tif(userid.value == '') {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst url = '${cpath}/members/idCheck?userid=' + userid.value\r\n\t\tconst result = await fetch(url).then(resp => resp.json())\r\n\t\t\r\n\t\tswal(result.title, result.content, result.type)\r\n\t\t\r\n\t\tconst userpw = document.querySelector('input[name=\"userpw\"]')\r\n\t\tif(result.success) userpw.focus()\t// 패스워드를 입력할 수 있도록 커서를 옮겨준다\r\n\t\telse\t\t\t   userid.select()\t// 아이디를 다시 입력하도록 커서를 옮기면서 입력\r\n\t\t\r\n\t}\r\n\t\r\n\t// 함수 선언 부\r\n\twindow.addEventListener('DOMContentLoaded', loadHandler)\r\n\tdocument.forms[0].onsubmit = submitHandler\r\n\tdocument.getElementById('idCheck').onclick = idCheckHandler\r\n\tdocument.getElementById('joinWithNaver').onclick = joinWithNaverHandler\r\n\tdocument.querySelector('input[name=\"location\"]').onclick = execDaumPostcode\r\n</script>\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/join.jsp b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/join.jsp
--- a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/join.jsp	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/join.jsp	(date 1732155578135)
@@ -2,133 +2,279 @@
     pageEncoding="UTF-8"%>
 <%@ include file="../header.jsp" %>
 
-<div id="joinModal" class="modal">
-<div class="joinoverlay"></div>
-   	<div class="joincontent">
-   	<h3><a href="${cpath }">일반/통합회원가입</a></h3>
-	<p><input id="joinWithNaver" type="image" src="${cpath }/resources/naver/btnG_완성형.png" width="183" height="43"></p>
-	
-	<form method="POST">
-		<p>
-			<input type="text" name="userid" placeholder="ID" autocomplete="off" required autofocus>
-			<input type="button" id="idCheck" value="ID 중복 확인">
-		</p>
-		<p><input type="password" name="userpw" placeholder="Password" required>
-		<p><input type="text" name="name" placeholder="이름 입력" required></p>
-		<p><input type="email" name="email" placeholder="email"required></p>
-		<p><input type="text" name="location" placeholder="주소를 검색하세요" autocomplete="off" required>
-		<p><input type="text" name="birth" placeholder="주민번호 앞 6자리를 입력해주세요" required>
-		<p>
-			<input id="gender" type="radio" name="gender" value="M">
-			<label for="genderM">남성</label>
-			<input id="gender" type="radio" name="gender" value="F">
-			<label for="genderF">여성</label>
-		</p>
-		<div id="captcha"></div>
-		<p><input type="submit" value="가입신청"></p>
-	</form>
-	</div>
+<style>
+
+/* 기본 설정 */
+body {
+    background: linear-gradient(to bottom, #2c3e50, #a4a4a4);
+    font-family: 'Arial', sans-serif;
+    width: 100vw;
+    box-sizing: border-box;
+}
+
+/* 회원가입 모달 */
+.joinModal {
+    width: 332px;
+    margin: auto;
+    margin-top: 50px;
+    background-color: rgba(247, 249, 250, 0.8);
+    border-radius: 12px; /* 둥글기 조정 */
+    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
+    z-index: 100;
+    padding: 40px;
+}
+
+   /* 제목 */
+   #joinTitle {
+       color: #2c3e50;
+       text-align: center;
+       margin: 0 0 15px;
+       font-size: 25px; /* 텍스트 크기 조정 */
+   }
+
+/* 설명 텍스트 */
+   .joinMainline p {
+       margin: 0 0 10px;
+       color: gray;
+       line-height: 1.4;
+       text-align: center;
+       font-size: 0.9rem; /* 글씨 크기 축소 */
+   }
+
+   /* 입력 필드 */
+   #idCheckText {
+      width: 50%;
+      border: 1px solid #d7dadd;
+   }
+   #idCheckBtn {
+      width: 40%;
+      height: 34px;
+      margin-top: 8px;
+      background-color: #2c3e50;
+      border: 1px solid #2c3e50;
+      border-radius: 5px;
+      font-weight: bold;
+      cursor: pointer;
+      color: white;
+   }
+   .joincontent > p {
+      text-align: center;
+   }
+   input[type='text'],
+   input[type='password'],
+   input[type='email'] {
+       width: 90%;
+       padding: 8px; /* 입력 필드 여백 축소 */
+       margin-top: 8px; /* 간격 축소 */
+       border: 1px solid #d7dadd;
+       border-radius: 4px; /* 둥글기 축소 */
+       box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
+       font-size: 0.9rem; /* 텍스트 크기 축소 */
+   }
+
+input:focus {
+    border-color: #2c3e50;
+    box-shadow: inset 0 1px 5px rgba(44, 62, 80, 0.2);
+}
+
+/* 라디오 버튼 */
+input[type='radio'] {
+    margin-right: 5px;
+}
+
+label {
+    color: #2c3e50;
+    margin-right: 10px; /* 간격 축소 */
+    font-size: 0.9rem; /* 텍스트 크기 조정 */
+}
+
+
+/* 제출 버튼 */
+.joinfinalBtn input[type='submit'] {
+    width: 330px;
+    padding: 8px; /* 여백 축소 */
+    border: none;
+    border-radius: 5px;
+    background: #2c3e50;
+    color: white;
+    font-weight: bold;
+    cursor: pointer;
+    transition: background 0.3s ease;
+    font-size: 0.9rem; /* 텍스트 크기 축소 */
+}
+
+.joinfinalBtn input[type='submit']:hover {
+    background: #34495e;
+}
+
+/* 뒤로가기 버튼 */
+.gotoBackBtn {
+    width: 330px;
+    margin-top: 10px;
+    padding: 8px; /* 여백 축소 */
+    background: none;
+    border: 1px solid #2c3e50;
+    border-radius: 4px; /* 둥글기 축소 */
+    color: #2c3e50;
+    cursor: pointer;
+    transition: background 0.3s ease, color 0.3s ease;
+    font-size: 0.9rem; /* 텍스트 크기 축소 */
+}
+
+.gotoBackBtn:hover {
+    background: #2c3e50;
+    color: white;
+}
+.reloadBtn {
+   margin-top: 10px;
+   height: 30px;
+}
+</style>
+
+<div id="joinModal" class="joinModal">
+
+   <h3 id="joinTitle">회원가입</h3>
+
+   <form method="POST">
+         <div class="joincontent">
+         <div class="joinMainline">
+            <p>
+               <input type="text" name="userid" id="idCheckText" placeholder="ID" autocomplete="off" required autofocus>
+               <input type="button" id="idCheckBtn" value="ID 중복 확인">
+            </p>
+         </div>
+         
+         <p><input type="password" name="userpw" placeholder="Password" required></p>
+         <p><input type="text" name="name" placeholder="이름 입력" required></p>
+         <p><input title="실제 사용하는 E-mail을 입력하여주세요" type="email" name="email" placeholder="Email"required></p>
+         <p><input type="text" name="location" placeholder="주소를 검색하세요" autocomplete="off" required>
+         <p><input type="text" name="birth" placeholder="주민번호 앞 6자리를 입력해주세요" required>
+         <p>
+            <input id="gender" type="radio" name="gender" value="M" required>
+            <label for="genderM" style="color: black;">남성</label>
+            <input id="gender" type="radio" name="gender" value="F" required>
+            <label for="genderF" style="color: black;">여성</label>
+         </p>
+         
+         
+         
+         <p class="naverP"><input id="joinWithNaver" type="image" src="${cpath }/resources/naver/btnG_완성형.png" width="177" height="38"></p>
+      </div>
+      
+      <div id="captcha" class="captchaline"></div>
+      
+      <p class="joinfinalBtn">   
+         <input type="submit" value="가입신청">
+      </p>
+      <p>
+         <a href="${cpath }/member/login">
+            <button type="button" class="gotoBackBtn">뒤로가기</button>
+         </a>
+      </p>
+   </form>
 </div>
+
+<%@ include file="../footer.jsp" %>
 <script>
-	// 다음 주소 찾기 함수 
-	function onComplete(data) {
-		document.querySelector('input[name="location"]').value = data.address
-	}
-	
-	function execDaumPostcode() {
-		const postCode = new daum.Postcode({
-	        oncomplete: onComplete
-	    })
-	    postCode.open()
-	}
-	
-	// 캡차 이미지를 로드하는 함수
-	async function loadCaptchaHandler() {
-	    // members 요청을 통해 서버에서 캡차 데이터를 가져옵니다.
-	    const url = '${cpath}/members/captcha'
-	    const result = await fetch(url).then(resp => resp.json())
-	    
-	    let tag = '<fieldset><p>'
-	    
-	    // 이미지 경로 설정에서 "${cpath}/upload/captcha/"로 고정된 경로를 사용해야 합니다.
-	    // 이 경로는 서버가 정적 리소스를 제공하는 경로와 일치해야 합니다.
-	    // servlet-context.xml <resources> 부분에 경로 추가해야 404오류 안뜸
-	    tag += '<img src="${cpath}/fpupload/captcha/' + result.captchaImage + '" width="300">'
-	    tag += '<input type="button" name="reload" value="새로고침">'
-	    tag += '</p>'
-	    tag += '<input type="text" name="captcha" placeholder="그림에 나타난 글자를 입력하세요" required>'
-	    tag += '</fieldset>'
+   // 다음 주소 찾기 함수 
+   function onComplete(data) {
+      document.querySelector('input[name="location"]').value = data.address
+   }
+   
+   function execDaumPostcode() {
+      const postCode = new daum.Postcode({
+           oncomplete: onComplete
+       })
+       postCode.open()
+   }
+   
+   // 캡차 이미지를 로드하는 함수
+   async function loadCaptchaHandler() {
+       // AJAX 요청을 통해 서버에서 캡차 데이터를 가져옵니다.
+       const url = '${cpath}/members/captcha'
+       const result = await fetch(url).then(resp => resp.json())
+       
+       let tag = '<fieldset><p>'       
+       // 이미지 경로 설정에서 "${cpath}/upload/captcha/"로 고정된 경로를 사용해야 합니다.
+       // 이 경로는 서버가 정적 리소스를 제공하는 경로와 일치해야 합니다.
+       // servlet-context.xml <resources> 부분에 경로 추가해야 404오류 안뜸
+       tag += '<img src="${cpath}/fpupload/captcha/' + result.captchaImage + '" width="300">'
+       tag += '<input type="text" name="captcha" placeholder="그림에 나타난 글자를 입력하세요" required>'
+       tag += '<input type="button" name="reload" class="reloadBtn" value="새로고침">'
+       tag += '</p>'
+       tag += '</fieldset>'
 
-	    // 생성한 HTML을 "captcha" 요소에 삽입합니다.
-	    document.getElementById('captcha').innerHTML = tag
+       // 생성한 HTML을 "captcha" 요소에 삽입합니다.
+       document.getElementById('captcha').innerHTML = tag
 
-	    // 새로고침 버튼을 클릭하면 캡차 이미지를 다시 로드하도록 설정합니다.
-	    document.querySelector('input[name="reload"]').onclick = loadCaptchaHandler
-	}
+       // 새로고침 버튼을 클릭하면 캡차 이미지를 다시 로드하도록 설정합니다.
+       document.querySelector('input[name="reload"]').onclick = loadCaptchaHandler
+   }
 
-	// 페이지가 로드되면 첫 캡차 이미지를 불러오도록 설정
-	async function loadHandler() {
-	    await loadCaptchaHandler()
-	}
+   // 페이지가 로드되면 첫 캡차 이미지를 불러오도록 설정
+   async function loadHandler() {
+       await loadCaptchaHandler()
+   }
 
-	// 폼을 제출할 때 캡차 인증을 확인하는 함수
-	async function submitHandler(event) {
-	    // 기본 제출 이벤트를 방지하고 members 요청을 준비합니다.
-	    event.preventDefault();
-	    
-	    const formData = new FormData()
-	    formData.append('user', document.querySelector('input[name="captcha"]').value)
-	    
-	    const url = '${cpath}/members/captcha'
-	    const opt = {
-	        method: 'POST',
-	        body: formData
-	    };
-	    
-	    const result = await fetch(url, opt).then(resp => resp.json());
-	    
-	    if(result.result) {  
-	        // 캡차 검증 성공 시, 원래 진행하려던 회원가입 폼을 제출합니다.
-	        event.target.submit()
-	    }
-	    else {  
-	        // 캡차 검증 실패 시, 메시지를 출력하고 캡차 이미지를 새로 로드합니다.
-	        swal('캡차 검증 실패', '입력값을 다시 확인해주세요', 'error')
-	        loadCaptchaHandler()
-	    }
-	}
-	
-	// 네이버 로그인 누를 시 프로필 불러오는 스크립트 함수
-	function joinWithNaverHandler() {
-		const url = '${naverLoginURL}'
-		const name = '_blank'
-		const options = 'menubar=no, toolbar=no, width=700, height=1000'
-		window.open(url, name, options)
-	}
-	
-	// 아이디 중복 확인 스크립트 함수
-	async function idCheckHandler() {
-		const userid = document.querySelector('input[name="userid"]')
-		if(userid.value == '') {
-			return
-		}
-		const url = '${cpath}/members/idCheck?userid=' + userid.value
-		const result = await fetch(url).then(resp => resp.json())
-		
-		swal(result.title, result.content, result.type)
-		
-		const userpw = document.querySelector('input[name="userpw"]')
-		if(result.success) userpw.focus()	// 패스워드를 입력할 수 있도록 커서를 옮겨준다
-		else			   userid.select()	// 아이디를 다시 입력하도록 커서를 옮기면서 입력
-		
-	}
-	
-	// 함수 선언 부
-	window.addEventListener('DOMContentLoaded', loadHandler)
-	document.forms[0].onsubmit = submitHandler
-	document.getElementById('idCheck').onclick = idCheckHandler
-	document.getElementById('joinWithNaver').onclick = joinWithNaverHandler
-	document.querySelector('input[name="location"]').onclick = execDaumPostcode
+   // 폼을 제출할 때 캡차 인증을 확인하는 함수
+   async function submitHandler(event) {
+       // 기본 제출 이벤트를 방지하고 AJAX 요청을 준비합니다.
+       event.preventDefault();
+       
+       const formData = new FormData(document.forms[0])
+       formData.append('user', document.querySelector('input[name="captcha"]').value)
+       
+       const url = '${cpath}/members/captcha'
+       const opt = {
+           method: 'POST',
+           body: formData
+       };
+       
+       const result = await fetch(url, opt).then(resp => resp.json());
+       
+       if(result.result) {  
+           // 캡차 검증 성공 시, 원래 진행하려던 회원가입 폼을 제출합니다.
+//            event.target.submit()
+         console.log(result.result)
+       }
+       else {  
+           // 캡차 검증 실패 시, 메시지를 출력하고 캡차 이미지를 새로 로드합니다.
+           swal('캡차 검증 실패', '입력값을 다시 확인해주세요', 'error')
+           loadCaptchaHandler()
+       }
+   }
+   
+   // 네이버 로그인 누를 시 프로필 불러오는 스크립트 함수
+   function joinWithNaverHandler() {
+      const url = '${naverLoginURL}'
+      const name = '_blank'
+      const options = 'menubar=no, toolbar=no, width=700, height=1000'
+      window.open(url, name, options)
+   }
+   
+   // 아이디 중복 확인 스크립트 함수
+   async function idCheckBtnHandler() {
+      const userid = document.querySelector('input[name="userid"]')
+      if(userid.value == '') {
+         return
+      }
+      const url = '${cpath}/members/idCheck?userid=' + userid.value
+      const result = await fetch(url).then(resp => resp.json())
+      
+      swal(result.title, result.content, result.type)
+      
+      const userpw = document.querySelector('input[name="userpw"]')
+      if(result.success) userpw.focus()   // 패스워드를 입력할 수 있도록 커서를 옮겨준다
+      else            userid.select()   // 아이디를 다시 입력하도록 커서를 옮기면서 입력
+      
+   }
+   
+   // 함수 선언 부
+   window.addEventListener('DOMContentLoaded', loadHandler)
+   document.forms[0].onsubmit = submitHandler
+   document.getElementById('idCheckBtn').onclick = idCheckBtnHandler
+   document.getElementById('joinWithNaver').onclick = joinWithNaverHandler
+   document.querySelector('input[name="location"]').onclick = execDaumPostcode
 </script>
 
 </body>
Index: target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/resetPassword.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<%@ include file=\"../header.jsp\" %>\r\n\r\n<h3>패스워드 재설정</h3>\r\n\r\n<form id=\"form\">\r\n   <p><input type=\"text\" name=\"userid\" placeholder=\"ID\" autocomplete=\"off\" required autofocus></p>\r\n   <p><input type=\"email\" name=\"email\" placeholder=\"Email\" autocomplete=\"off\" required></p>\r\n   <div id=\"captcha\"></div>\r\n   <p><input type=\"submit\" value=\"재발급\"></p>   \r\n</form>\r\n   <p><a href=\"${cpath }/member/reCheckUserid\">ID 재확인</a></p>\r\n   <p><a href=\"${cpath }/member/reCheckEmail\">Email 재확인</a></p>\r\n\r\n<script>\r\n\tconst form = document.getElementById('form')\r\n   async function loadCaptchaHandler() {\r\n      const url = '${cpath}/members/captcha'\r\n      const result = await fetch(url).then(resp => resp.json())\r\n      let tag = '<fieldset><p>'\r\n      tag += '<img src=\"${cpath}/fpupload/captcha/' + result.captchaImage + '\" width=\"300\">'\r\n      tag += '<input type=\"button\" name=\"reload\" value=\"새로고침\">'\r\n      tag += '</p>'\r\n      tag += '<input type=\"text\" name=\"user\" placeholder=\"그림에 나타난 글자를 입력하세요\" required>'\r\n      tag += '</fieldset>'\r\n      document.getElementById('captcha').innerHTML = tag\r\n      document.querySelector('input[name=\"reload\"]').onclick = loadCaptchaHandler\r\n   }\r\n   async function checkCaptcha() {\r\n      const url = '${cpath}/members/captcha'\r\n      const opt = {\r\n            method: 'POST',\r\n            body: new FormData(form)\r\n      }\r\n      const result = await fetch(url, opt).then(resp => resp.json())\r\n      console.log(result)\r\n      if(result.result == false) {\r\n         swal('캡차 검증 실패', '입력값을 다시 확인해주세요', 'error')\r\n         loadCaptchaHandler()\r\n      }\r\n      return result.result\r\n   }\r\n   \r\n   async function resetPasswordHandler(event) {\r\n      event.preventDefault()\r\n      const captchaResult = await checkCaptcha()\r\n      if(captchaResult == false) {\r\n         return\r\n      }      \r\n      \r\n      const url = '${cpath}/members/resetPassword'\r\n      console.log(url)\r\n      const opt = {\r\n            method: 'POST',\r\n            body: new FormData(event.target)\r\n      }\r\n      const result = await fetch(url, opt).then(resp => resp.json())\r\n      console.log(result)\r\n      if(result.success) {\r\n         swal({\r\n            title: '비밀번호 재설정',\r\n            text: '이메일로 변경된 비밀번호를 전송했습니다',\r\n            type: 'success',\r\n            confirmButtonText: '확인',\r\n            closeOnConfirm: true,\r\n         }, function(isConfirm) {\r\n            if(isConfirm) {\r\n               location.href = '${cpath}/member/login'\r\n            }\r\n         })\r\n      }\r\n      else {\r\n         swal('정보 재확인', '일치하는 계정 혹은 이메일을 찾을 수 없습니다', 'error')\r\n      }\r\n   }\r\n   form.addEventListener('submit', resetPasswordHandler)\r\n   window.addEventListener('DOMContentLoaded', loadCaptchaHandler)\r\n</script>\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/resetPassword.jsp b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/resetPassword.jsp
--- a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/resetPassword.jsp	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/resetPassword.jsp	(date 1732155578144)
@@ -1,20 +1,129 @@
 <%@ page language="java" contentType="text/html; charset=UTF-8"
     pageEncoding="UTF-8"%>
 <%@ include file="../header.jsp" %>
-
-<h3>패스워드 재설정</h3>
-
-<form id="form">
-   <p><input type="text" name="userid" placeholder="ID" autocomplete="off" required autofocus></p>
-   <p><input type="email" name="email" placeholder="Email" autocomplete="off" required></p>
-   <div id="captcha"></div>
-   <p><input type="submit" value="재발급"></p>   
-</form>
-   <p><a href="${cpath }/member/reCheckUserid">ID 재확인</a></p>
-   <p><a href="${cpath }/member/reCheckEmail">Email 재확인</a></p>
+<style>
+    body{
+        background: linear-gradient(to bottom,#2c3e50, #a2a3a3);
+        width: 100vw;
+        height: 100vh;
+    }
+    .resetmodal {
+       width: 100%;
+       height: 91%;
+       display: flex;
+       justify-content: center;
+       align-items: center;
+   }   
+   .resetmodal > .Imgresetoverlay {
+       width: 100%;
+       height: 100%;
+       position: fixed;
+       top: 0;
+       left: 0;
+       background-color: rgba(0, 0, 0, 0.8);
+       z-index: 1;
+   }   
+   .resetmodal > .Imgresetcontent {
+       width: 300px;
+       height: 400px;
+       display: flex;
+       flex-direction: column;
+       justify-content: center;
+       align-items: center;
+       z-index: 2;
+       position: fixed;
+       top: 50%;
+       left: 50%;
+       transform: translate(-50%, -50%);
+       border-radius: 25px;
+       box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
+   }
+   .resetcontent {
+       width: 100%;
+       max-width: 400px;
+       padding: 20px;
+       background-color: rgba(247, 249, 250, 0.8);
+       border-radius: 8px;
+       box-shadow: 0 0 10px rgba(0,0,0,0.1);
+       text-align: center;
+       /* background-color: rgba(0, 0, 0, 0.5); */
+   }   
+   .resetcontent form {
+       display: flex;
+       flex-direction: column;
+       align-items: center;
+   }   
+   .resetcontent input[type="text"],
+   .resetcontent input[type="email"],
+   .resetcontent input[type="submit"] {
+       width: 190px;
+       padding: 10px;
+       margin: 5px 0;
+       border: 1px solid #ddd;
+       border-radius: 4px;
+   }   
+   .resetcontent input[type="submit"] {
+       background-color: #2c3e50;
+       font-size: 17px;
+       color: white;
+       cursor: pointer;
+       width: 210px;
+       height: 37px;
+       margin-bottom: 0;
+       padding-top: 6.5px;
+       display: flex;
+       justify-content: center;
+       align-items: center;
+       text-align: center;
+       border: 0;
+   }   
+   .resetcontent a {
+       color: #333;
+       text-decoration: none;
+       margin: 5px;
+   }
+   .rpcaptchaline {
+        margin-top: 10px;
+    }    
+    .rpcaptchaline fieldset {
+        border: none;
+        padding: 0;
+    }   
+    .rpcaptchaline input[type="button"] {
+        margin-left: 10px;
+    }
+    .resetcontent .rpcaptchaline input[type="text"] {
+       text-align: center;
+       padding-left: 0px;
+       padding-right: 0px;
+     } 
+    .rpcaptchaline {
+       border: 1px solid white;
+          padding: 10px;
+       margin-top: 10px;
+       margin-bottom: 10px;
+       border-radius: 10px;
+   } 
+</style>
+<div class="resetmodal">
+<div class="resetoverlay"></div>
+      <div class="resetcontent">
+   <h2>AMD, Reset Password Service</h2>
+   <p style="color: gray;">정보를 조회하여 암호한 비밀번호를 메일로 보내드립니다.</p>
+   <form>
+      <p><input type="text" name="userid" placeholder="ID" autocomplete="off" required autofocus></p>
+      <p><input type="email" name="email" placeholder="Email" autocomplete="off" required></p>
+      <div id="captcha" class="rpcaptchaline"></div>
+      <p><input type="submit" value="재발급"></p>   
+   </form>
+      <p><a href="${cpath }/member/reCheckUserid">ID 재확인</a> | <a href="${cpath }/member/reCheckEmail">Email 재확인</a></p>
+      <p><a href="${cpath }/member/login"><button type="button" formnovalidate>뒤로가기</button></a></p>
+   </div>
+</div>
+
+<%@ include file="../footer.jsp" %>
 
 <script>
-	const form = document.getElementById('form')
    async function loadCaptchaHandler() {
       const url = '${cpath}/members/captcha'
       const result = await fetch(url).then(resp => resp.json())
@@ -31,10 +140,9 @@
       const url = '${cpath}/members/captcha'
       const opt = {
             method: 'POST',
-            body: new FormData(form)
+            body: new FormData(document.forms[0])
       }
       const result = await fetch(url, opt).then(resp => resp.json())
-      console.log(result)
       if(result.result == false) {
          swal('캡차 검증 실패', '입력값을 다시 확인해주세요', 'error')
          loadCaptchaHandler()
@@ -74,8 +182,11 @@
          swal('정보 재확인', '일치하는 계정 혹은 이메일을 찾을 수 없습니다', 'error')
       }
    }
-   form.addEventListener('submit', resetPasswordHandler)
+   document.forms[0].onsubmit = resetPasswordHandler
    window.addEventListener('DOMContentLoaded', loadCaptchaHandler)
+   
+   const footer = document.getElementById('footer')
+   footer.style.backgroundColor = '#a2a3a3'
 </script>
 
 </body>
Index: target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/locationUpdate.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<%@ include file=\"../header.jsp\" %>\r\n\r\n<h3>주소 정보 수정</h3>\r\n<div>\r\n\t<p>현재 주소 정보: ${login.location }</p>\r\n</div>\r\n\r\n<form method=\"POST\">\r\n\t<p><input type=\"text\" name=\"location\" placeholder=\"주소를 검색하세요\" autocomplete=\"off\" required></p>\r\n\t<p><input type=\"submit\" value=\"등록하기\" ></p>\r\n</form>\r\n\r\n<script>\r\n\t//다음 주소 찾기 함수 \r\n\tfunction onComplete(data) {\r\n\t\tdocument.querySelector('input[name=\"location\"]').value = data.address\r\n\t}\r\n\t\r\n\tfunction execDaumPostcode() {\r\n\t\tconst postCode = new daum.Postcode({\r\n\t        oncomplete: onComplete\r\n\t    })\r\n\t    postCode.open()\r\n\t}\r\n\tdocument.querySelector('input[name=\"location\"]').onclick = execDaumPostcode\r\n</script>\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/locationUpdate.jsp b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/locationUpdate.jsp
--- a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/locationUpdate.jsp	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/locationUpdate.jsp	(date 1732155578136)
@@ -1,19 +1,116 @@
 <%@ page language="java" contentType="text/html; charset=UTF-8"
     pageEncoding="UTF-8"%>
 <%@ include file="../header.jsp" %>
-
-<h3>주소 정보 수정</h3>
-<div>
-	<p>현재 주소 정보: ${login.location }</p>
-</div>
-
-<form method="POST">
-	<p><input type="text" name="location" placeholder="주소를 검색하세요" autocomplete="off" required></p>
-	<p><input type="submit" value="등록하기" ></p>
-</form>
-
+<style>
+	@keyframes slideBackground {
+        0% {
+            background-position: 0% 10%;
+        }
+        50% {
+            background-position: 100% 10%;
+        }
+        100% {
+            background-position: 0% 10%;
+        }
+    }
+    body {
+        background-image: linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)), url('${cpath}/resources/image/defocused-map-with-pinpoints.jpg');
+        background-size: 110% auto;
+        background-position: 0% 10%;
+        animation: slideBackground 50s ease infinite;
+        background-repeat: no-repeat;
+        background-attachment: fixed;
+    }
+    .locationUpdateModal {
+    	position: fixed;
+        top: 0;
+        left: 0;
+        width: 100%;
+        height: 100%;
+        display: flex;
+        justify-content: center;
+        align-items: center;
+    }
+    .locationUpdatecontent {
+    	width: 350px;
+        height: 273px;
+        padding: 20px;
+        padding-bottom: 43px;
+        background-color: rgba(247, 249, 250, 0.8);
+        border-radius: 8px;
+        box-shadow: 0 0 10px rgba(0,0,0,0.1);
+        text-align: center;
+        z-index: 2;
+        position: relative;
+    }
+    .locationUpdateoverlay {
+    	background-color: rgba(0, 0, 0, 0.3);
+    	border-radius: 8px;
+    	height: 288px;
+    }
+    .topText {
+    	display: flex;
+    }
+    .text1 {
+    	margin-top: 5px;
+    	text-align: left;
+	    margin-left: 15px;
+    }
+    .text2 {
+    	text-align: justify;
+	    margin-top: 39px;
+	    padding-right: 17px;
+    }
+    .mainContent {
+    	text-align: center;
+    }
+    .locationBtn {
+    	padding-left: 47px;
+    }
+    .locationBtn input[type="submit"]{
+    	background-color: #2c3e50;
+	    font-size: 17px;
+	    color: white;
+	    width: 177px;
+	    height: 32px;
+	    margin-bottom: 0;
+	    padding-top: 0px;
+	    display: flex;
+	    justify-content: center;
+	    align-items: center;
+	    text-align: center;
+	    border: 0;
+	    border-radius: 4px;
+	    text-decoration: none;
+	    margin-left: 40px;
+	    padding-bottom: 3px;
+    }
+    .locationBtn input[type="submit"]:hover {
+    	background-color: #34495e;
+    }
+</style>
+<div id="locationUpdateModal" class="locationUpdateModal" >
+<div class="locationUpdatecontent">
+	<div class="locationUpdateoverlay">
+	<div class="topText">
+		<div><h3 class="text1">AMD, Location Update</h3></div>
+		<div><p  class="text2">현재 위치를 수정하여 최적의 의료 서비스를 제공받으세요.</p></div>
+	</div>
+	<div class="mainContent">
+		<div>
+			<p>현재 주소 정보: ${login.location }</p>
+		</div>
+		<form method="POST" id="locationForm" >
+			<p><input type="text" name="location" placeholder="주소를 검색하세요" autocomplete="off" required></p>
+			<p class="locationBtn"><input type="submit" value="등록하기" ></p>
+		</form>
+	</div>	
+		<p><a href="${cpath }/member/info/${login.id}"><button>뒤로가기</button></a></p>
+	</div>
+</div>
+</div>
 <script>
-	//다음 주소 찾기 함수 
+	// 다음 주소 찾기 함수 
 	function onComplete(data) {
 		document.querySelector('input[name="location"]').value = data.address
 	}
@@ -25,6 +122,39 @@
 	    postCode.open()
 	}
 	document.querySelector('input[name="location"]').onclick = execDaumPostcode
+	
+	 const updateBtn = document.getElementById('locationForm')
+	
+	// sweetAlert
+	updateBtn.addEventListener('submit', async function(event) {
+		event.preventDefault()
+		const formData = new FormData(updateBtn);
+		const url = '${cpath}/member/locationUpdate/' + '${login.id}/' + formData.get('location')
+		const opt = {
+				method : 'POST'
+		}
+		console.log(formData.get('location'))
+		const result = await fetch(url, opt).then(resp => resp.json())
+		if(result != 1) {
+			swal({
+	            title: "주소 변경 실패",
+	            text: "주소 업데이트에 실패하였습니다. 다시 시도해주세요.",
+	            type: "error",
+	            button: "확인"
+ 	        })
+		}
+		else {
+			swal({
+			    title: "주소 변경 성공",
+			    text: "주소를 성공적으로 업데이트하였습니다.",
+			    type: "success",
+			    confirmButtonText: "확인"
+			}, function() {
+			    // 확인 버튼을 눌렀을 때 실행될 코드
+			    window.location.href = "${cpath}/member/info/" + '${login.id}';
+			});
+		}
+	})
 </script>
 
 </body>
Index: target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/addLocation.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<%@ include file=\"../header.jsp\" %>\r\n\r\n<h3>주소 정보 검색</h3>\r\n<p>[현재 추가된 주소]</p>\r\n<c:forEach var=\"dto\" items=\"${list }\">\r\n\t<p>${dto.memberLocation }</p>\r\n\t<hr>\r\n</c:forEach>\r\n\r\n\r\n<form method=\"POST\" id=\"addLocationForm\">\r\n\t<p><input type=\"text\" name=\"memberLocation\" placeholder=\"추가 하실 주소를 입력하세요.\" required></p>\r\n\t<p><input type=\"submit\" value=\"등록\" ></p>\r\n</form>\r\n\r\n<script>\r\n\t//다음 주소 찾기 함수\r\n\tfunction onComplete(data) {\r\n\t    document.querySelector('input[name=\"memberLocation\"]').value = data.address\r\n\t}\r\n\t\r\n\tfunction execDaumPostcode() {\r\n\t    const postCode = new daum.Postcode({\r\n\t        oncomplete: onComplete\r\n\t    })\r\n\t    postCode.open()\r\n\t}\r\n\t\r\n\tdocument.querySelector('input[name=\"memberLocation\"]').onclick = execDaumPostcode\r\n\t\r\n\t// swal 코드\r\n\tdocument.addEventListener('DOMContentLoaded', function() {\r\n\t    const form = document.getElementById('addLocationForm')\r\n\t    form.onsubmit = function(event) {\r\n\t        event.preventDefault()\r\n\t        \r\n\t        const formData = new FormData(form)\r\n\t        const url = '${cpath}/member/addLocation/${id}' // URL 경로에 {id} 변수를 적용하여 설정\r\n\t\r\n\t        fetch(url, {\r\n\t            method: 'POST',\r\n\t            body: formData\r\n\t        })\r\n\t        .then(response => response.json()) // JSON으로 응답 받기\r\n\t        .then(data => {\r\n\t            if (data.status === 'fail') {\r\n\t                swal({\r\n\t                    title: \"주소 추가 실패\",\r\n\t                    text: data.message,\r\n\t                    type: \"error\",\r\n\t                    confirmButtonText: \"확인\"\r\n\t                })\r\n\t            } else if (data.status === 'success') {\r\n\t                swal({\r\n\t                    title: \"주소 추가 성공\",\r\n\t                    text: data.message,\r\n\t                    type: \"success\",\r\n\t                    confirmButtonText: \"확인\"\r\n\t                }, function() {\r\n\t                    location.href = '${cpath}/member/info/${id}' // 성공 시 이동할 페이지 경로\r\n\t                })\r\n\t            } else {\r\n\t                swal(\"알림\", \"예상치 못한 응답을 받았습니다.\", \"warning\")\r\n\t            }\r\n\t        })\r\n\t        .catch(error => {\r\n\t            console.error('Error:', error)\r\n\t            swal(\"오류\", \"처리 중 오류가 발생했습니다.\", \"error\")\r\n\t        })\r\n\t    }\r\n\t})\r\n</script>\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/addLocation.jsp b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/addLocation.jsp
--- a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/addLocation.jsp	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/addLocation.jsp	(date 1732155578130)
@@ -1,19 +1,159 @@
 <%@ page language="java" contentType="text/html; charset=UTF-8"
     pageEncoding="UTF-8"%>
 <%@ include file="../header.jsp" %>
+<style>
+	@keyframes slideBackground {
+        0% {
+            background-position: 0% 10%;
+        }
+        50% {
+            background-position: 100% 10%;
+        }
+        100% {
+            background-position: 0% 10%;
+        }
+    }
+    body {
+        background-image: linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)), url('${cpath}/resources/image/side-view-hands-holding-smartphone.jpg');
+        background-size: 110% auto;
+        background-position: 0% 10%;
+        animation: slideBackground 50s ease infinite;
+        background-repeat: no-repeat;
+        background-attachment: fixed;
+    }
+    .addlocationModal {
+    	position: fixed;
+/*         top: -119px; */
+/*         left: -193px; */
+		top: 50%;
+		left: 50%;
+		transform: translate(-50%, -50%);
+        width: 100%;
+/*         height: 100%; */
+        display: flex;
+        justify-content: center;
+        align-items: flex-start;
+    }
+    .addlocationcontent {
+    	width: 380px;
+        height: 230px;
+        padding: 20px;
+        padding-bottom: 43px;
+        background-color: rgba(247, 249, 250, 0.8);
+        border-radius: 8px;
+        box-shadow: 0 0 10px rgba(0,0,0,0.1);
+        text-align: center;
+        z-index: 2;
+         position: relative; 
+         top: 0; 
+    }
+    .addlocationListcontent {
+    	width: 380px;
+        height: auto;
+        padding-top: 8px;
+	    padding-left: 20px;
+	    padding-bottom: 8px;
+	    padding-right: 20px;
+        background-color: rgba(247, 249, 250, 0.8);
+        border-radius: 8px;
+        box-shadow: 0 0 10px rgba(0,0,0,0.1);
+        text-align: center;
+        z-index: 2;
+        position: relative; 
+        top: 0; 
+    }
+    .addlocationoverlay {
+    	background-color: rgba(0, 0, 0, 0.3);
+    	border-radius: 8px;
+    	height: 250px;
+    }
+    .topText {
+    	display: flex;
+    }
+    .text1 {
+    	margin-top: 5px;
+    	text-align: left;
+	    margin-left: 15px;
+    }
+    .text2 {
+    	text-align: left;
+	    font-size: 14px;
+	    margin-top: 45px;
+    }
+    .addlocationBtn {
+    	padding-left: 62px;
+    }
+    .addlocationBtn input[type="submit"] {
+    	background-color: #2c3e50;
+	    font-size: 17px;
+	    color: white;
+	    width: 177px;
+	    height: 32px;
+	    margin-bottom: 0;
+	    padding-top: 0px;
+	    display: flex;
+	    justify-content: center;
+	    align-items: center;
+	    text-align: center;
+	    border: 0;
+	    border-radius: 4px;
+	    text-decoration: none;
+	    margin-left: 40px;
+	    padding-bottom: 3px;
+    }
+    .addlocationBtn input[type="submit"]:hover {
+    	background-color: #34495e;
+    }
+    .addlocationListModal {
+    	position: fixed;
+/*         top: -195px; */
+/*         left: 229px; */
+		top: 50%;
+		left: 50%;
+		transform: translate(-50%, -50%);
+        width: 100%;
+        height: 100%;
+        display: flex;
+        justify-content: center;
+        align-items: center;
+    }
+    
+    .addlocationListoverlay {
+    	background-color: rgba(0, 0, 0, 0.3);
+    	border-radius: 8px;
+    	height: auto;
+    }
+</style>
+<div id="addlocationListModal" class="addlocationListModal" >
 
+</div>
 <h3>주소 정보 검색</h3>
-<p>[현재 추가된 주소]</p>
-<c:forEach var="dto" items="${list }">
-	<p>${dto.memberLocation }</p>
-	<hr>
-</c:forEach>
-
-
-<form method="POST" id="addLocationForm">
-	<p><input type="text" name="memberLocation" placeholder="추가 하실 주소를 입력하세요." required></p>
-	<p><input type="submit" value="등록" ></p>
-</form>
+<div id="addlocationModal" class="addlocationModal" >
+	<div class="addlocationcontent">
+		<div class="addlocationoverlay">
+		<div class="topText">
+			<div><h3 class="text1">AMD, AddLocation Service</h3></div>
+			<div><p  class="text2">위치 정보를 추가하고, 효율적으로 의료 서비스 정보를 관리 해보세요.</p></div>
+		</div>
+		<form method="POST" id="addLocationForm">
+			<p><input type="text" name="memberLocation" placeholder="추가 하실 주소를 입력하세요." required></p>
+			<p class="addlocationBtn"><input type="submit" value="등록" ></p>
+		</form>
+		<p style="text-align: center;"><a href="${cpath }/member/info/${login.id}"><button>뒤로가기</button></a></p>
+		</div>
+	</div>
+	
+	<div class="addlocationListcontent">
+		<div class="addlocationListoverlay">
+		<p>[현재 추가된 주소]</p>
+		<c:forEach var="dto" items="${list }">
+			<ul style="list-style: none;">
+				<li>${dto.memberLocation }</li>
+			</ul>
+		</c:forEach>
+		</div>
+	</div>
+</div>
 
 <script>
 	//다음 주소 찾기 함수
Index: src/main/webapp/WEB-INF/views/home.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\r\n<%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %>\r\n<%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\" %>\r\n<c:set var=\"cpath\" value=\"${pageContext.request.contextPath }\" />\r\n\r\n<%--    chart    --%>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js@4.4.4/dist/chart.umd.min.js\"></script>\r\n    <!--  sweetalert2 -->\r\n    <script src=\"https://unpkg.com/sweetalert/dist/sweetalert.min.js\"></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>\r\n    <%-- sweetalert --%>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.js\"\r\n            integrity=\"sha512-7VTiy9AhpazBeKQAlhaLRUk+kAMAb8oczljuyJHPsVPWox/QIXDFOnT9DUk1UC8EbnHKRdQowT7sOBe7LAjajQ==\"\r\n            crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css\"\r\n          integrity=\"sha512-gOQQLjHRpD3/SEOtalVq50iDn4opLVup2TF8c4QPI3/NmUPNZOk2FG0ihi8oCU/qYEsw4P6nuEZT2lAG0UNYaw==\"\r\n          crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"/>\r\n\r\n    <%-- 카카오맵 API --%>\r\n    <script type=\"text/javascript\"\r\n            src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=f714ffceece9359c7acaeb2b338b1ae7&libraries=services,clusterer,drawing\"></script>\r\n\r\n    <%-- 좌표계산을 쉽게 할 수 있음 --%>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/geolib@3.3.4/lib/index.min.js\"></script>\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css\"/>\r\n\r\n    <!-- 다음 주소 API -->\r\n    <script src=\"https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n<%--아임포트 API--%>\r\n    <script type=\"text/javascript\" src=\"https://cdn.iamport.kr/js/iamport.payment-1.2.0.js\"></script>\r\n    <!-- jQuery 로드 -->\r\n    <script src=\"https://code.jquery.com/jquery-1.12.4.min.js\"></script>\r\n<%--    포트원 결제--%>\r\n    <script src=\"https://cdn.iamport.kr/v1/iamport.js\"></script>\r\n\r\n<style>\r\n   body, html {\r\n        margin: 0;\r\n        padding: 0;\r\n        font-family: Arial, sans-serif;\r\n    }\r\n\r\n    /*  ============ 첫번째 페이지 ============ */\r\n    .first {        \r\n        width: 100%;\r\n        height: 1190px;\r\n        justify-content: center;\r\n        align-items: center;\r\n        overflow: hidden;\r\n        display: flex;\r\n    }\r\n    @keyframes moveBackground {     /* 배경화면 이동효과 */\r\n        from {\r\n            background-position: -100 0;\r\n        }\r\n        to {\r\n            background-position: 0 0;\r\n        }\r\n    }\r\n    .main_right {\r\n        width: 50%;\r\n        height: 100%;\r\n        z-index: 1;\r\n\t\tposition: relative;\r\n    }\r\n    .main_left {\r\n        width: 50%;\r\n        height: 100%;\r\n        z-index: 1;\r\n    }\r\n   .main_left > p,\r\n    .main_right > p  {\r\n        text-align: center;\r\n        color: white;\r\n        font-weight: bold;\r\n    }\r\n     .main_left > p:first-child {\r\n         font-size: 60px;\r\n         margin: 0;\r\n         margin-top: 350px;\r\n     }\r\n     .main_left > p:nth-child(2) {\r\n         font-size: 20px;\r\n         margin: 0;\r\n         font-weight: bold;\r\n     }\r\n     .main_left > p:nth-child(3) {\r\n         font-size: 20px;\r\n         margin: 0;\r\n         margin-top: 50px;\r\n         font-weight: bold;\r\n     }\r\n     .overlay {\r\n         position: absolute;\r\n         background-color: black;\r\n         opacity: 0.5;\r\n         top: 0;\r\n         left: 0;\r\n         width: 100%;\r\n         height: 100vh;\r\n     }\r\n\r\n     .pages {\r\n         height: 100vh;\r\n         width: 100%;\r\n         position: absolute;\r\n         overflow: hidden;\r\n     }\r\n     .page {\r\n         height: 100%;\r\n         width: 100%;\r\n         position: absolute;\r\n         top: 100%;\r\n         transition: top .7s;\r\n     \r\n         background-attachment: fixed;\r\n         background-position: center;\r\n         background-repeat: no-repeat;\r\n         background-size: cover;\r\n     }\r\n     .first {\r\n         top: 0;\r\n         background-image: url('${cpath}/resources/image/배경최종.jpg');\r\n         animation: moveBackground 5s linear forwards;\r\n     }\r\n     .second {\r\n         background-color: white;\r\n     }\r\n     .third {\r\n     \t background-image: url(\"${cpath}/resources/image/배경실험용2.jpg\");\r\n     \t width: 100%;\r\n     \t height: 100%;\r\n         color: white;\r\n     }\r\n     .fourth {\r\n     \twidth: 100%;\r\n     \theight: 50vh;\r\n     }\r\n     .pagination {\r\n         position: absolute;\r\n         display: flex;\r\n         left: 50%;\r\n         top: 0%;\r\n         transform: translateX(-50%);\r\n         z-index: 100;\r\n     }\r\n     .pagination>li {\r\n     \t margin: 5px;\r\n         list-style: none;\r\n         height: 10px;\r\n         width: 10px;\r\n         background: #999999;\r\n         border-radius: 50%;\r\n         margin-top: 10px;\r\n         transition: background .7s;\r\n     }\r\n     .pagination>li.active {\r\n         background: #ffffff;\r\n     }\r\n\r\n\t/*  2번째 페이지  */\r\n     .categoryComment {\r\n         margin-left: 50px;\r\n         font-size: 100px;\r\n         font-weight: bold;\r\n         color: black;\r\n     }\r\n     .categoryComment p {\r\n         margin: 0;\r\n         margin-top: 45px;\r\n     }\r\n     .slideWrap {\r\n         display: flex;\r\n         position: relative;\r\n         height: 300px;\r\n         overflow: hidden;\r\n     }\r\n     .slideWrap:nth-child(2) {\r\n         margin-top: 70px;\r\n     }\r\n     .slideWrap .imgSlide {\r\n         display: flex;\r\n         align-items: center;\r\n         justify-content: space-between;\r\n         padding-left: 0;\r\n     }\r\n     .slideWrap .imgSlide.original {\r\n         animation: 50s linear 0s infinite normal forwards running slide01;\r\n     }\r\n     .slideWrap .imgSlide.clone {\r\n         animation: 50s linear 0s infinite normal none running slide02;\r\n     }\r\n     .slideWrap .imgSlide li {\r\n         position: relative;\r\n         width: 250px;\r\n         height: 250px;\r\n         line-height: 200px;\r\n         margin-right: 20px;\r\n         background-color: #ccc;\r\n         text-align: center;\r\n         list-style: none;\r\n         border-radius: 30px;\r\n         cursor: pointer;\r\n     }\r\n     .imgSlide img {\r\n         width: 250px;\r\n         height: 250px;\r\n         border-radius: 25px;\r\n     }\r\n     .categoryOverlay {\r\n         position: absolute; /* 절대 위치 설정 */\r\n         top: 0; \r\n         left: 0;\r\n         width: 100%;\r\n         height: 100%;\r\n         background-color: rgba(0, 0, 0, 0.4);\r\n         border-radius: 25px;\r\n     }\r\n     .imgSlide h4 {\r\n         position: absolute;\r\n         bottom: 10px;\r\n         left: 20px;\r\n         font-size: 25px;\r\n         color: white;\r\n         line-height: normal;\r\n         font-weight: bold;\r\n     }\r\n\r\n     @keyframes slide01 {\r\n         0% { transform: translateX(0);}\r\n         50% { transform: translateX(-100%);}\r\n         50.01% { transform: translateX(100%);}\r\n         100% { transform: translateX(0);}\r\n     }\r\n     @keyframes slide02 {\r\n         0% {transform: translateX(0);}\r\n         100% {transform: translateX(-200%);}\r\n     }\r\n     \r\n\t/* 3번째 페이지 */\r\n/*     .thirdPageOverlay { */\r\n/*     \twidth: 100%; */\r\n/*     \theight: 100%; */\r\n/*     \ttop: 0; */\r\n/*     \tleft: 0; */\r\n/*     \tbackground-color: black; */\r\n/*     \tposition: absolute; */\r\n/*     \topacity: 0.5; */\r\n/*     } */\r\n/*     응급실 스타일 */\r\n    .rollerWrap {\r\n\t\tposition: absolute;\r\n\t\tbottom: 0px;\r\n        border: 1px solid;\r\n        display: flex;\r\n        overflow: hidden;\r\n    }\r\n     .rollerWrap a{\r\n     \tcolor : blue;\r\n     }\r\n    .rolling-list ul {\r\n        padding: 0;\r\n        display: flex;\r\n        margin: 0;\r\n    }\r\n    .rolling-list ul li {\r\n        box-sizing: border-box;\r\n        display: flex;\r\n        align-items: center;\r\n        flex-shrink: 0;\r\n        padding: 10px;\r\n        border-right: 1px solid #ddd;\r\n        min-width: 200px;\r\n    }\r\n    .rolling-list.original {\r\n        animation: rollingleft1 1500s linear infinite;\r\n    }\r\n    .rolling-list.clone {\r\n        animation: rollingleft2 1500s linear infinite;\r\n    }\r\n    @keyframes rollingleft1 {\r\n        0% { transform: translateX(0); }\r\n        50% { transform: translateX(-100%); }\r\n        50.01% { transform: translateX(100%); }\r\n        100% { transform: translateX(0); }\r\n    }\r\n    @keyframes rollingleft2 {\r\n        0% { transform: translateX(0); }\r\n        100% { transform: translateX(-200%); }\r\n    }\r\n\r\n    .region-seoul { background-color: #ffebee; color: #c62828; }\r\n    .region-gyeonggi { background-color: #e3f2fd; color: #1565c0; }\r\n    .region-incheon { background-color: #f1f8e9; color: #2e7d32; }\r\n    .region-busan { background-color: #e0f7fa; color: #006064; }\r\n    .region-daegu { background-color: #fbe9e7; color: #bf360c; }\r\n    .region-daejeon { background-color: #e8eaf6; color: #303f9f; }\r\n    .region-gwangju { background-color: #f3e5f5; color: #6a1b9a; }\r\n    .region-ulsan { background-color: #e0f2f1; color: #004d40; }\r\n    .region-sejong { background-color: #ffecb3; color: #ff6f00; }\r\n    .region-gangwon { background-color: #fff3e0; color: #e65100; }\r\n    .region-chungbuk { background-color: #f0f4c3; color: #827717; }\r\n    .region-chungnam { background-color: #f9fbe7; color: #33691e; }\r\n    .region-jeonbuk { background-color: #ffe0b2; color: #e64a19; }\r\n    .region-jeonnam { background-color: #d7ccc8; color: #5e403a; }\r\n    .region-gyeongbuk { background-color: #c8e6c9; color: #2e7d32; }\r\n    .region-gyeongnam { background-color: #ffccbc; color: #d84315; }\r\n    .region-jeju { background-color: #dcedc8; color: #558b2f; }\r\n    .region-etc { background-color: #e0e0e0; color: #616161; }\r\n\r\n</style>\r\n\r\n<%--검색어 순위 스타일--%>\r\n<style>\r\n\t.ranking-list {\r\n\t\tposition:absolute;\r\n\t\ttop: 56%;\r\n\t\tleft: 4%;\r\n\t\tlist-style: none;\r\n\t\tpadding: 0;\r\n\t\tmargin: 0;\r\n\t\theight: 30px;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.ranking-item {\r\n\t\twidth: 300px;\r\n\t\tpadding: 5px 0;\r\n\t\tfont-size: 18px;\r\n\t\tcolor: white;\r\n\t\tcursor: pointer;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t}\r\n\r\n\r\n\t.ranking-index {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: white;\r\n\t\tmargin-right: 60px;\r\n\t\twidth: 20px;\r\n\t}\r\n\r\n\t.ranking-text {\r\n\t\tflex-grow: 1;\r\n\t}\r\n\r\n\t.ranking-count {\r\n\t\tcolor: red;\r\n\t\tfont-weight: bold;\r\n\t\tfont-size: 12px;\r\n\t}\r\n\r\n\t.ranking-list.expanded {\r\n\t\theight: auto;\r\n\t}\r\n</style>\r\n\r\n<%--검색창 스타일--%>\r\n<style>\r\n\t.input-group {\r\n\t\tbackground-color: white; /* 배경색 */\r\n\t\tdisplay: flex; /* 플렉스 박스 사용 */\r\n\t\talign-items: center; /* 수직 중앙 정렬 */\r\n\t\tpadding: 10px; /* 패딩 */\r\n\t\tborder: 2px solid #ddd; /* 테두리 색상 */\r\n\t\tborder-radius: 40px; /* 둥근 모서리 */\r\n\t\tmargin-top: 430px; /* 상단 여백 */\r\n\t\tposition: absolute;\r\n\t\twidth: 70%;\r\n\t}\r\n\r\n\t.search-buttons {\r\n\t\tmargin-right: 10px; /* 버튼과 입력 필드 간의 간격 */\r\n\t}\r\n\r\n\t.search-form {\r\n\t\tdisplay: flex; /* 플렉스 박스 사용 */\r\n\t\talign-items: center; /* 수직 중앙 정렬 */\r\n\t\tflex-grow: 1; /* 남은 공간 차지 */\r\n\t\tmargin: 0;\r\n\t}\r\n\r\n\t#searchInput {\r\n\t\tflex-grow: 1; /* 입력 필드가 가능한 공간을 모두 차지하도록 설정 */\r\n\t\tpadding: 10px; /* 패딩 */\r\n\t\tborder: 1px solid #ddd; /* 테두리 색상 */\r\n\t\tborder-radius: 20px; /* 둥근 모서리 */\r\n\t}\r\n\t.select-wrap {\r\n\t\twidth: 120px; /* 셀렉트 박스의 너비 설정 */\r\n\t\theight: 40px; /* 셀렉트 박스의 높이 설정 */\r\n\t\tborder: 1px solid #ccc; /* 테두리 색상 */\r\n\t\tborder-radius: 40px 40px 40px 40px;\r\n\t\tbackground: url('${cpath}/resources/image/try-me.gif') no-repeat 97% 50% / 25px auto; /* 화살표 이미지 지정 */\r\n\t}\r\n\r\n\t/* select 스타일 */\r\n\t#searchTypeSelect {\r\n\t\twidth: 100%; /* 전체 너비 사용 */\r\n\t\theight: 100%; /* 전체 높이 사용 */\r\n\t\tpadding: 0 28px 0 10px; /* 패딩 설정 (오른쪽, 왼쪽) */\r\n\t\tfont-size: 15px; /* 폰트 크기 설정 */\r\n\t\tborder: 0; /* 기본 스타일 제거 */\r\n\r\n\t\t-webkit-appearance: none; /* Chrome에서 기본 화살표 제거 */\r\n\t\t-moz-appearance: none; /* Firefox에서 기본 화살표 제거 */\r\n\t\tappearance: none; /* 모든 브라우저에서 기본 화살표 제거 */\r\n\r\n\t\tbox-sizing: border-box; /* 셀렉트 박스의 크기 방식 지정 */\r\n\t\tbackground: transparent; /* 배경색 투명 처리 */\r\n\t}\r\n\r\n\tselect::-ms-expand {\r\n\t\tdisplay: none; /* IE10,11에서 기본 화살표 숨기기 */\r\n\t}\r\n\r\n\tbutton.search {\r\n\t\tpadding: 10px 15px;\r\n\t\tborder: none;\r\n\t\tborder-radius: 20px;\r\n\t\tbackground-color: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tcursor: pointer;\r\n\t\tmargin: 10px;\r\n\t}\r\n\r\n\tbutton:hover {\r\n\t\tbackground-color: #34495e; /* 호버 시 어두운 파란색 */\r\n\t}\r\n</style>\r\n\r\n<%--지도모달 마커 스타일--%>\r\n<style>\r\n\t.infoMapListContent , .infoMapContent{\r\n\t\tpadding: 10px;\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tfont-size: 14px;\r\n\t\tmax-width: 300px; /* 인포윈도우 크기 제한 */\r\n\t\tword-wrap: break-word; /* 텍스트가 길어질 경우 줄바꿈 */\r\n\t}\r\n\r\n\t/* 병원 이름 링크 스타일 */\r\n\t.hospitalNameLink {\r\n\t\tfont-weight: bold;\r\n\t\tfont-size: 16px;\r\n\t\tcolor: #0077cc;\r\n\t\ttext-decoration: none; /* 링크 밑줄 제거 */\r\n\t}\r\n\r\n\t.hospitalNameLink:hover {\r\n\t\ttext-decoration: underline; /* 링크에 마우스를 올리면 밑줄 표시 */\r\n\t}\r\n\r\n\t/* 주소 스타일 */\r\n\t.hospitalAddress {\r\n\t\tmargin-top: 8px;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #333;\r\n\t}\r\n\r\n\t/* 전화번호 스타일 */\r\n\t.hospitalPhone {\r\n\t\tmargin-top: 5px;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #333;\r\n\t}\r\n\t/* 닫기 버튼 스타일 */\r\n\t.close-btn {\r\n\t\tposition: absolute;\r\n\t\ttop: 10px;\r\n\t\tright: 10px;\r\n\t\tbackground-color: #f44336; /* 빨간색 */\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tpadding: 10px 15px;\r\n\t\tfont-size: 16px;\r\n\t\tcursor: pointer;\r\n\t\tborder-radius: 5px;\r\n\t\ttransition: background-color 0.3s;\r\n\t}\r\n\r\n\t/* 닫기 버튼에 마우스 오버 시 색상 변경 */\r\n\t.close-btn:hover {\r\n\t\tbackground-color: #e53935;\r\n\t}\r\n\r\n</style>\r\n\r\n<!-- 헤더 스타일 -->\r\n<style>\r\n\t/*    챗봇 아이콘 */\r\n        #chat_icon img {\r\n            position: fixed;\r\n            right: 50px;\r\n            bottom: 50px;\r\n        }\r\n\r\n        /*   민재 파트 (홈 검색 기능) */\r\n\r\n\r\n        #mapModal {\r\n            z-index: 4;\r\n            width: 100%;\r\n            height: 100%;\r\n            display: none; /* 기본적으로 숨김 */\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            background-color: rgba(0, 0, 0, 0.7); /* 반투명 검은색 배경 */\r\n        }\r\n\r\n        #mapModal.show {\r\n            display: block;\r\n        }\r\n\r\n        #mapModal > .content {\r\n            border: 2px solid grey;\r\n            background-color: white;\r\n            position: fixed;\r\n            width: 80%; /* 모달 너비 설정 */\r\n            max-width: 1000px; /* 최대 너비 */\r\n            height: 80%; /* 모달 높이 설정 */\r\n            max-height: 500px; /* 최대 높이 */\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            display: flex; /* 지도와 리스트를 가로로 나란히 배치 */\r\n            flex-direction: row; /* 가로 배치 */\r\n            border-radius: 25px;\r\n            box-shadow: 10px 10px 10px grey;\r\n        }\r\n\r\n\r\n        #hospitalList {\r\n            list-style-type: none;\r\n            padding:50px 10px;\r\n            overflow-y: auto;\r\n            margin: 0;\r\n            max-height: 100%; /* 리스트가 모달 높이에 맞게 늘어나도록 설정 */\r\n            width: 30%; /* 리스트 영역을 지도 옆에 붙게 설정 */\r\n            background-color: rgba(255, 255, 255, 0.4); /* 투명한 배경 설정 (투명도 높임) */\r\n            opacity: 0.8;\r\n            border-radius: 10px;\r\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); /* 그림자 효과 */\r\n            position: relative; /* 부모 요소에 맞춰 위치 */\r\n        }\r\n        #hospitalList::-webkit-scrollbar {\r\n            display: none;\r\n        }\r\n        .hospital-list li {\r\n            margin: 5px 0;\r\n            cursor: pointer;\r\n            padding: 5px;\r\n            border: 1px solid #ccc;\r\n            border-radius: 5px;\r\n            transition: background-color 0.3s;\r\n        }\r\n\r\n        .hospital-list li:hover {\r\n            background-color: #e9ecef; /* 마우스 오버 시 배경색 변경 */\r\n        }\r\n\r\n\r\n        #map2 {\r\n            width: 70%; /* 지도 영역 크기 */\r\n            height: 100%;\r\n            position: relative;\r\n        }\r\n\r\n\r\n\r\n        .hospital-list li.selected {\r\n            background-color: #007bff; /* 선택된 항목 배경색 */\r\n            color: white; /* 선택된 항목 글자색 */\r\n            font-weight: bold; /* 선택된 항목 글씨 진하게 */\r\n        }\r\n        .bookingModal {\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            z-index: 1000;\r\n        }\r\n\r\n        .hidden {\r\n            display: none!important;\r\n        }\r\n\r\n\r\n        .bookingOverlay {\r\n            position: absolute;\r\n            width: 100%;\r\n            height: 100%;\r\n            background-color: rgba(0, 0, 0, 0.5); /* 반투명한 검은색 배경 */\r\n        }\r\n\r\n        .bookingContent {\r\n            position: relative;\r\n            background-color: white;\r\n            padding: 30px;\r\n            border-radius: 15px;\r\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n            z-index: 5;\r\n            max-width: 500px;\r\n            width: 90%;\r\n            max-height: 80vh;\r\n            overflow-y: auto;\r\n            scrollbar-width: none; /* Firefox */\r\n            -ms-overflow-style: none; /* Internet Explorer 10+ */\r\n        }\r\n\r\n        .bookingContent::-webkit-scrollbar {\r\n            display: none; /* WebKit */\r\n        }\r\n\r\n        .bookingTitle {\r\n            font-size: 24px;\r\n            color: #2c3e50;\r\n            text-align: center;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .bookingDetail {\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        #bookingInsertForm input[type=\"datetime-local\"],\r\n        #bookingUpdateForm input[type=\"datetime-local\"] {\r\n            width: 100%;\r\n            padding: 5px;\r\n            border: 1px solid #ddd;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n            color: #333;\r\n        }\r\n\r\n        #bookingInsertForm input[type=\"submit\"],\r\n        #bookingUpdateForm input[type=\"submit\"] {\r\n            width: 100%;\r\n            padding: 12px;\r\n            background-color: #2c3e50;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 8px;\r\n            font-size: 18px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            transition: background-color 0.3s ease;\r\n        }\r\n\r\n        #bookingInsertForm input[type=\"submit\"]:hover,\r\n        #bookingUpdateForm input[type=\"submit\"]:hover {\r\n            background-color: #34495e;\r\n        }\r\n\r\n        #closeBookingBtn ,#closeMapModalBtn{\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 10px;\r\n            background-color: #e74c3c;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 5px;\r\n            padding: 5px 10px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            transition: background-color 0.3s ease, transform 0.2s ease;\r\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        #closeBookingBtn:hover ,#closeMapModalBtn:hover{\r\n            background-color: #c0392b;\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\r\n        }\r\n\r\n        #closeBookingBtn:active {\r\n            transform: translateY(0);\r\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        /* 애니메이션 효과 */\r\n        @keyframes fadeIn {\r\n            from { opacity: 0; transform: translateY(-20px); }\r\n            to { opacity: 1; transform: translateY(0); }\r\n        }\r\n\r\n        .bookingContent {\r\n            animation: fadeIn 0.3s ease-out;\r\n        }\r\n\r\n        /* 반응형 디자인을 위한 미디어 쿼리 */\r\n        @media (max-width: 600px) {\r\n            .bookingContent {\r\n                padding: 25px;\r\n                width: 95%;\r\n            }\r\n\r\n            .bookingTitle {\r\n                font-size: 20px;\r\n            }\r\n        }\r\n\r\n\r\n        #notificationPaging {\r\n            justify-content: space-between;\r\n            display: flex;\r\n        }\r\n\r\n        #notificationCountSpan {\r\n            position: absolute;\r\n            top: -5px;\r\n            right: -5px;\r\n            background-color: red;\r\n            color: white;\r\n            border-radius: 50%;\r\n            padding: 2px 6px;\r\n            font-size: 12px;\r\n        }\r\n\r\n        #myFavoritesPaging {\r\n            justify-content: space-between;\r\n            display: flex;\r\n        }\r\n        a {\r\n            color: inherit;\r\n            text-decoration: none;\r\n        }\r\n        /* 최근 본 병원 스타일 */\r\n        #recentHospitalsContainer {\r\n            width: 180px; /* 컨테이너 너비를 조금 더 줄임 */\r\n            position: fixed; /* 화면에 고정 */\r\n            top: 80px; /* 상단에서 80px 떨어지게 위치 */\r\n            right: 20px; /* 화면 오른쪽에 위치 */\r\n            background-color: #f9f9f9;\r\n            padding: 10px;\r\n            border-radius: 8px; /* 카드와 동일하게 둥글게 */\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n            z-index: 2; /* 다른 콘텐츠 위에 표시 */\r\n            max-height: 75vh; /* 화면 높이에 맞게 제한 */\r\n            overflow-y: hidden; /* 스크롤 숨기기 */\r\n            border: 1px solid #e0e0e0; /* 약간의 테두리로 강조 */\r\n        }\r\n\r\n        #recentHospitalsContainer h2 {\r\n            font-size: 18px; /* 제목 크기 약간 줄임 */\r\n            font-weight: bold;\r\n            margin-bottom: 10px; /* 여백 줄이기 */\r\n            color: #333;\r\n            text-align: center;\r\n        }\r\n\r\n        .recent-hospitals {\r\n            display: flex;\r\n            flex-direction: column; /* 세로로 정렬 */\r\n            gap: 8px; /* 카드 간격을 조금 줄임 */\r\n            max-height: 70vh; /* 내용이 많으면 더 이상 스크롤되지 않게 */\r\n        }\r\n\r\n        .hospital-card {\r\n            width: 100%; /* 카드가 컨테이너에 맞게 꽉 차게 */\r\n            background-color: #fff;\r\n            border-radius: 6px; /* 카드 모서리 둥글게 */\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n            overflow: hidden;\r\n            transition: transform 0.3s ease-in-out;\r\n            display: flex;\r\n            flex-direction: column;\r\n            margin: 10px 0px;\r\n        }\r\n\r\n        .hospital-card:hover {\r\n            transform: scale(1.03); /* 카드 호버시 확대 효과 */\r\n        }\r\n\r\n        .recentHospital-image {\r\n            width: 100%;\r\n            height: 100px; /* 이미지 크기를 조금 더 줄임 */\r\n            object-fit: cover; /* 이미지 비율 유지하면서 잘리도록 설정 */\r\n        }\r\n\r\n        .recentHospital-info {\r\n            padding: 8px; /* 패딩을 줄여서 내용 영역을 더 좁게 */\r\n            font-size: 13px; /* 폰트 크기 좀 더 줄임 */\r\n        }\r\n\r\n        .hospital-name {\r\n            font-size: 14px; /* 병원 이름 폰트 크기 더 줄임 */\r\n            font-weight: bold;\r\n            margin-bottom: 5px;\r\n            color: #007bff;\r\n            white-space: nowrap; /* 텍스트가 한 줄로 나오도록 */\r\n            overflow: hidden;\r\n            text-overflow: ellipsis; /* 긴 이름은 ... 으로 표시 */\r\n        }\r\n\r\n        .loginIcon ,.loginIcon2 {\r\n            background-image: url('${cpath}/resources/image/로그인아이콘최종.png');\r\n            position: absolute;\r\n            width: 30px;\r\n            height: 30px;\r\n            top: 30px;\r\n            right: 30px;\r\n            background-size: cover;\r\n            cursor: pointer;\r\n        }\r\n        .notificationIcon {\r\n            background-image: url('${cpath}/resources/image/알림.png');\r\n            position: absolute;\r\n            width: 27px;\r\n            height: 27px;\r\n            top: 33px;\r\n            right: 150px;\r\n            background-size: cover;\r\n        }\r\n        .healthInfoIcon {\r\n        \tbackground-image: url('${cpath}/resources/image/건강정보.png');\r\n            position: absolute;\r\n            width: 30px;\r\n            height: 30px;\r\n            top: 31px;\r\n            right: 90px;\r\n            background-size: cover;\r\n        }\r\n        .myFavoritesIcon{\r\n            background-image: url('${cpath}/resources/image/즐겨찾기.png');\r\n            position: absolute;\r\n            width: 30px;\r\n            height: 30px;\r\n            top: 31px;\r\n            right: 205px;\r\n            background-size: cover;\r\n        }\r\n        \r\n    </style>\r\n\r\n<%--    알림 메시지 스타일--%>\r\n        <style>\r\n            /* 알림 테이블 스타일 */\r\n            #notificationTable {\r\n                width: 100%;\r\n                border-collapse: collapse;\r\n                margin-top: 20px;\r\n                box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n            }\r\n\r\n            #notificationTable th, #notificationTable td {\r\n                padding: 12px 15px;\r\n                text-align: left;\r\n                border-bottom: 1px solid #e0e0e0;\r\n            }\r\n\r\n            #notificationTable th {\r\n                background-color: #f8f8f8;\r\n                font-weight: bold;\r\n                color: #333;\r\n            }\r\n\r\n            /* 읽지 않은 알림 스타일 */\r\n            #notificationTable th[style*=\"background-color: lightskyblue\"] {\r\n                background-color: #e3f2fd;\r\n                font-weight: bold;\r\n            }\r\n\r\n            /* 알림 삭제 버튼 스타일 */\r\n            .notificationDeleteBtn {\r\n                padding: 6px 12px;\r\n                background-color: #ff4d4d;\r\n                color: white;\r\n                border: none;\r\n                border-radius: 4px;\r\n                cursor: pointer;\r\n                transition: background-color 0.3s;\r\n            }\r\n\r\n            .notificationDeleteBtn:hover  {\r\n                background-color: #ff3333; /* 삭제 버튼의 호버 효과는 유지 */\r\n            }\r\n\r\n            /* 페이징 스타일 */\r\n            #notificationPaging {\r\n                display: flex;\r\n                justify-content: space-around;\r\n                margin-top: 20px;\r\n                margin-bottom: 20px;\r\n            }\r\n\r\n            #notificationPaging td {\r\n                padding: 8px 12px;\r\n                margin: 0 5px;\r\n                cursor: pointer;\r\n                border: 1px solid #ddd;\r\n                border-radius: 4px;\r\n            }\r\n\r\n            /* 현재 페이지 강조 스타일 */\r\n            #notificationPaging td[style*=\"font-weight: bold\"] {\r\n                background-color: #007bff; /* 강조 색상 */\r\n                color: white; /* 강조 색상에서의 글자 색상 */\r\n            }\r\n\r\n            /* '이전'과 '다음' 버튼 스타일 */\r\n            #notificationPaging td:first-child,\r\n            #notificationPaging td:last-child {\r\n                background-color: #f8f9fa; /* 기본 배경색 */\r\n                font-weight: bold; /* 두꺼운 폰트 */\r\n            }\r\n\r\n            /* 알림 없음 메시지 스타일 */\r\n            #notificationTableBody:empty::before {\r\n                content: '알림이 없습니다.';\r\n                display: block;\r\n                text-align: center;\r\n                padding: 20px;\r\n                color: #666; /* 회색 글자 색상 */\r\n                font-style: italic; /* 이탤릭체 */\r\n            }\r\n\r\n            /* 알림 셀 스타일 */\r\n            .notification-cell {\r\n                padding: 15px; /* 패딩 */\r\n                border-bottom: 1px solid #ddd; /* 하단 테두리 */\r\n            }\r\n\r\n            /* 알림 내용 스타일 */\r\n            .notification-content {\r\n                display: flex; /* 플렉스 박스 사용 */\r\n                flex-direction: column; /* 세로 방향 정렬 */\r\n            }\r\n\r\n            /* 날짜 및 이름 강조 스타일 */\r\n            .notification-date {\r\n                font-size: 0.9em; /* 폰트 크기 조정 */\r\n                color: #666; /* 회색 글자 색상 */\r\n            }\r\n\r\n            .notification-name {\r\n                font-weight: bold; /* 두꺼운 폰트 */\r\n                color: #333; /* 어두운 글자 색상 */\r\n            }\r\n\r\n            /* 메시지 스타일 */\r\n            .notification-message {\r\n                font-size: 1em; /* 기본 폰트 크기 */\r\n                color: #444; /* 어두운 회색 글자 색상 */\r\n            }\r\n\r\n            /* '일괄 삭제하기' 버튼 스타일 */\r\n            #deleteNotificationAllBtn {\r\n                margin: 10px 10px;\r\n                padding: 10px 20px;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                background-color: #ff4d4d;\r\n                color: white;\r\n                border: none;\r\n                border-radius: 8px;\r\n                cursor: pointer;\r\n                transition: background-color 0.3s ease, transform 0.2s ease;\r\n            }\r\n\r\n            /* '일괄 삭제하기' 버튼 호버 및 클릭 효과 */\r\n            #deleteNotificationAllBtn:hover {\r\n                background-color: #ff3333; /* 호버 시 배경색 */\r\n            }\r\n    </style>\r\n\r\n<%--    즐겨찾기 스타일--%>\r\n    <style>\r\n        #myFavoritesTable {\r\n            width: 500px;\r\n            border-collapse: collapse;\r\n            margin-top: 20px;\r\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n\r\n        }\r\n\r\n        #myFavoritesTable th, #myFavoritesTable td {\r\n            text-align: center;\r\n            border-bottom: 1px solid #e0e0e0;\r\n        }\r\n        #myFavoritesTable th {\r\n            background-color: #f8f8f8;\r\n            font-weight: bold;\r\n            color: #333;\r\n            padding: 20px 0px;\r\n        }\r\n        /* 즐겨찾기 목록의 링크 스타일 */\r\n        #myFavoritesTable a {\r\n            color: #007bff; /* 링크 색상 */\r\n            text-decoration: none; /* 밑줄 제거 */\r\n        }\r\n        #myFavoritesTable th:nth-child(2){\r\n            width: 18%;\r\n            font-size: 14px;\r\n        }\r\n        #myFavoritesTable a:hover {\r\n            text-decoration: underline; /* 호버 시 밑줄 추가 */\r\n        }\r\n        /* 페이징 스타일 */\r\n        #myFavoritesPaging {\r\n            display: flex;\r\n            justify-content: space-around;\r\n            margin-top: 20px;\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        #myFavoritesPaging td {\r\n            padding: 8px 10px; /* 패딩 조정 (위아래 8px, 좌우 10px) */\r\n            margin: 0 5px; /* 좌우 여백 */\r\n            cursor: pointer; /* 커서 모양 변경 */\r\n            border: 1px solid #ddd; /* 테두리 색상 */\r\n            border-radius: 4px; /* 둥근 모서리 */\r\n            min-width: 40px; /* 최소 너비 설정 */\r\n            text-align: center; /* 텍스트 중앙 정렬 */\r\n        }\r\n\r\n        /* 현재 페이지 강조 스타일 */\r\n        #myFavoritesPaging td[style*=\"font-weight: bold\"] {\r\n            background-color: #007bff; /* 강조 색상 */\r\n            color: white; /* 강조 색상에서의 글자 색상 */\r\n        }\r\n\r\n        /* '이전'과 '다음' 버튼 스타일 */\r\n        #myFavoritesPaging td:first-child,\r\n        #myFavoritesPaging td:last-child {\r\n            background-color: #f8f9fa; /* 기본 배경색 */\r\n            font-weight: bold; /* 두꺼운 폰트 */\r\n        }\r\n        /* 알림 없음 메시지 스타일 */\r\n        #myFavoritesTableBody:empty::before {\r\n            content: '즐겨찾기 한 병원이 없습니다.';\r\n            display: block;\r\n            text-align: center;\r\n            padding: 20px;\r\n            color: #666; /* 회색 글자 색상 */\r\n            font-style: italic; /* 이탤릭체 */\r\n        }\r\n\r\n        /* 삭제 버튼 스타일 */\r\n        .myFavoritesDeleteBtn {\r\n            padding: 6px 12px;\r\n            background-color: #ff4d4d; /* 삭제 버튼 배경색 */\r\n            color: white; /* 버튼 텍스트 색상 */\r\n            border: none; /* 테두리 제거 */\r\n            border-radius: 4px; /* 버튼 모서리 둥글게 */\r\n            cursor: pointer; /* 클릭 가능 커서 */\r\n            transition: background-color 0.3s ease, transform 0.2s ease; /* 효과 */\r\n        }\r\n\r\n        .myFavoritesDeleteBtn:hover {\r\n            background-color: #ff3333; /* 호버 시 배경색 */\r\n        }\r\n\r\n        .myFavoritesDeleteBtn:active {\r\n            transform: scale(0.95); /* 클릭 시 버튼 크기 감소 */\r\n        }\r\n\r\n        /* '일괄 삭제하기' 버튼 스타일 */\r\n        #deleteMyFavoritesAllBtn {\r\n            margin: 10px 10px;\r\n            padding: 10px 20px;\r\n            font-size: 14px;\r\n            font-weight: bold;\r\n            background-color: #ff4d4d;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 8px;\r\n            cursor: pointer;\r\n            transition: background-color 0.3s ease, transform 0.2s ease;\r\n        }\r\n\r\n        #deleteMyFavoritesAllBtn:hover {\r\n            background-color: #ff3333;\r\n        }\r\n\r\n        #deleteMyFavoritesAllBtn:active {\r\n            transform: scale(0.95);\r\n        }\r\n    </style>\r\n    \r\n    <style>\r\n    \t/* footer */\r\n\t\t#footer {\r\n\t\t    position: relative;\r\n\t\t    width: 100%;\r\n\t\t    background-color: #587650;\r\n\t\t    padding: 20px;\r\n\t\t    color: white;\r\n\t\t    display: flex;\r\n\t\t}\r\n\t\tfooter p {\r\n\t\t    margin: 20px;\r\n\t\t    color: white;\r\n\t\t    font-weight: 400;\r\n\t\t    align-items: center;\r\n\t\t    line-height: 30px;\r\n\t\t    font-size: 20px;\r\n\t\t    font-family: \"Do Hyeon\", sans-serif;\r\n\t\t}\r\n\t\tfooter p:first-child {\r\n\t\t    padding-left: 50px;\r\n\t\t}\r\n\t\t.Right {\r\n\t\t    padding-right: 550px;\r\n\t\t}\r\n\t\t.icons {\r\n\t\t    display: flex;\r\n\t\t    margin: 20px;\r\n\t\t}\r\n\t\t.icons a {\r\n\t\t    width: 70px;\r\n\t\t    height: 70px;\r\n\t\t    border-radius: 50%;\r\n\t\t    font-size: 0;\r\n\t\t    display: block;\r\n\t\t    background-size: cover;\r\n\t\t    background-repeat: no-repeat;\r\n\t\t    background-position: center;\r\n\t\t    margin: 0 5px;\r\n\t\t}\r\n\t\t.icons a.icon_youtube {\r\n\t\t    background-image: url('${cpath}/resources/image/icon_youtube.svg');\r\n\t\t}\r\n\t\t.icons a.icon_instagram {\r\n\t\t    background-image: url('${cpath}/resources/image/icon_instagram.svg');\r\n\t\t}\r\n\t\t.icons a.icon_facebook {\r\n\t\t    background-image: url('${cpath}/resources/image/icon_facebook.svg');\r\n\t\t}\r\n\t\t.logo img {\r\n\t\t\twidth: 146px;\r\n\t\t\theight: 145px;\r\n\t\t\tmargin-top: -32px;\r\n\t\t\tmargin-left: -33px;\r\n\t\t}\r\n\t\theader{\r\n            width: 100%;\r\n            height: 80px;\r\n            display: flex;\r\n            z-index: 100;\r\n            position: absolute;\r\n            left: 0;\r\n            top: 0;\r\n        }\r\n    </style>\r\n\r\n<!-- 즐겨찾기 테이블 -->\r\n<table id=\"myFavoritesTable\" class=\"hidden\">\r\n    <thead></thead>\r\n    <tbody></tbody>\r\n</table>\r\n\r\n<div class=\"pages\">\r\n   <div class=\"first page\">\r\n   \t\t<header>\r\n\t\t\t<div class=\"logo\">\r\n\t\t\t\t<a href=\"${cpath }\"><img src=\"${cpath }/resources/image/로고.png\"></a>\r\n\t\t\t</div>\r\n\t\t    <a href=\"${cpath }/healthInfo/healthInfo\">\r\n\t\t\t\t<div class=\"healthInfoIcon\"></div>\r\n\t\t\t</a>\r\n\t\t    <div class=\"-container\">\r\n\t\t        <c:if test=\"${empty login }\">\r\n\t\t        <div class=\"loginIcon\"></div>\r\n\t\t\t    </c:if>\r\n\t\t    </div>\r\n\t\t\r\n\t\t    <c:set var=\"default\" value=\"${cpath }/resources/image/default.png\" />\r\n\t\t    <c:if test=\"${not empty login }\">\r\n\t\t        <div class=\"header-right\">\r\n\t\t            <div class=\"loginIcon2\"></div>\r\n\t\t            <div class=\"notificationIcon\" id=\"notification\" data-page=\"1\"><span id=\"notificationCountSpan\" class=\"hidden\"></span></div>\r\n\t\t            <div class=\"myFavoritesIcon\" id=\"myFavorites\" data-page=\"1\"></div>\r\n\t\t            <span>${login.name }</span>\r\n\t\t            <a href=\"${cpath }/member/logout\"><button>로그아웃</button></a>\r\n\t\t\r\n\t\t        </div>\r\n\t\t    </c:if>\r\n\t\t</header>\r\n      <div class=\"overlay\"></div>\r\n      \r\n      <div class=\"main_left\">\r\n          <p>AMD, 세상의 모든 응급 검색</p>\r\n          <p>All Emergency Searches in the World</p>\r\n          <p>최신 IP정보를 수집하여<br>\r\n                  최적의 응급 정보와 전문 상담 서비스를 제공합니다.</p>\r\n      </div>\r\n      \r\n\t  <div class=\"main_right\">\r\n\t\t\r\n\t\t<div class=\"input-group\">\r\n\t\t\t<div class=\"search-buttons\">\r\n\t\t\t\t<div class=\"select-wrap\">\r\n\t\t\t\t\t<select id=\"searchTypeSelect\">\r\n\t\t\t\t\t\t<option value=\"search\">증상 검색</option>\r\n\t\t\t\t\t\t<option value=\"hospital\">병원명 검색</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<form id=\"searchForm\" class=\"search-form\" method=\"post\">\r\n\t\t\t\t<input type=\"text\" id=\"searchInput\" name=\"search\" placeholder=\"증상 또는 병명을 입력해주세요\" required>\r\n\t\t\t\t<button type=\"submit\" class=\"search\">검색</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t\t\r\n\t\t<p>\r\n\t\t<div class=\"ranking-container\">\r\n\t\t\t<ul id=\"rankingList\" class=\"ranking-list\">\r\n\t\t\t<c:forEach var=\"keyword\" items=\"${rankings}\" varStatus=\"status\">\r\n\t\t\t\t<li class=\"ranking-item\">\r\n\t\t\t\t\t<span class=\"ranking-index\">${status.index + 1}</span>\r\n\t\t\t\t\t<span class=\"ranking-text\">${keyword.keyword}</span>\r\n\t\t\t\t\t<span class=\"ranking-count\">${keyword.total_count}</span>\r\n\t\t\t\t</li>\r\n\t\t\t</c:forEach>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t\t</p>\r\n\r\n\t\t<!--예약 모달 -->\r\n<div id=\"bookingModal\" class=\"bookingModal hidden\" >\r\n    <div class=\"bookingOverlay\"></div>\r\n    <div class=\"bookingContent\">\r\n        <h3 class=\"bookingTitle\"></h3>\r\n        <div class=\"bookingDetail\"></div>\r\n        <button id=\"closeBookingBtn\">닫기</button>\r\n    </div>\r\n</div>\r\n\r\n<%-- 최근 본 병원 목록 표시 (로그인 후) --%>\r\n<c:if test=\"${not empty recentHospitals}\">\r\n<div id=\"recentHospitalsContainer\">\r\n    <h2>최근 본 병원</h2>\r\n    <div class=\"recent-hospitals\">\r\n        <c:forEach var=\"hospital\" items=\"${recentHospitals}\">\r\n            <a href=\"${cpath}/hospitalInfo/${hospital.id}\">\r\n                <div class=\"hospital-card\">\r\n                    <img src=\"${hospital.imageUrl}\" class=\"recentHospital-image\"/>\r\n                    <div class=\"recentHospital-info\">\r\n                        <h3 class=\"hospital-name\">${hospital.hospital_name}</h3>\r\n                    </div>\r\n                </div>\r\n            </a>\r\n        </c:forEach>\r\n    </div>\r\n</div>\r\n</c:if>\r\n\r\n<!-- 예약하기 입력 폼 -->\r\n<form id=\"bookingInsertForm\" class=\"hidden\">\r\n    <p><input type=\"hidden\" name=\"member_id\" value=\"${login.id }\"></p>\r\n    <p><input id=\"hospital_id\" type=\"hidden\" name=\"hospital_id\" value=\"${hospital.id }\"></p>\r\n    <p><input type=\"hidden\" name=\"status\" value=1></p>\r\n    <p><input id=\"booking_date\" type=\"datetime-local\" name=\"booking_date\"  value=\"${now }\" required></p>\r\n    <p><input type=\"submit\" value=\"예약하기\"></p>\r\n</form>\r\n\r\n<!-- 예약 변경 입력 폼 -->\r\n<form id=\"bookingUpdateForm\" class=\"hidden\">\r\n    <p><input type=\"hidden\" name=\"member_id\" value=\"${login.id }\"></p>\r\n    <p><input id=\"hospital_id\" type=\"hidden\" name=\"hospital_id\" value=\"${hospital.id }\"></p>\r\n    <p><input id=\"booking_date\" type=\"datetime-local\" name=\"booking_date\" required><p>\r\n    <p><input type=\"submit\" value=\"예약변경\"></p>\r\n</form>\r\n\r\n<!-- 알림 정보 테이블 -->\r\n<table id=\"notificationTable\" class=\"hidden\">\r\n    <thead></thead>\r\n    <tbody></tbody>\r\n</table>\r\n\r\n\t\t</div>\t<!-- main_right 종료 -->\r\n\t</div>\t<!-- 첫번째 페이지 종료 -->\r\n   \r\n    <div class=\"second page\">\r\n        <div class=\"categoryComment\">\r\n            <p>CATEGORY</p>\r\n        </div>\r\n       \t<div class=\"slideWrap\">\r\n\t\t    <ul class=\"imgSlide\">\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/23\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/가정의학과.avif\" alt=\"가정의학과\">\r\n\t\t                <h4>가정의학과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/searchLocation/8\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/성형외과.jpg\" alt=\"성형외과\">\r\n\t\t                <h4>성형외과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/14\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/피부과.avif\" alt=\"피부과\">\r\n\t\t                <h4>피부과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/80\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/한의원.avif\" alt=\"한의원\">\r\n\t\t                <h4>한의원</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/15\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/비뇨기과.avif\" alt=\"비뇨기과\">\r\n\t\t                <h4>비뇨기과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/10\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/산부인과.jpg\" alt=\"산부인과\">\r\n\t\t                <h4>산부인과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/1\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/내과.avif\" alt=\"내과\">\r\n\t\t                <h4>내과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/3\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/정신과.jpg\" alt=\"정신건강의학과\">\r\n\t\t                <h4>정신건강의학과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t    </ul>\r\n\t\t</div>\t\t<!-- 첫번째 줄 리스트 종료 -->\r\n\r\n\t\t<div class=\"slideWrap\">\r\n\t\t    <ul class=\"imgSlide\">\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/49\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/치과.avif\" alt=\"치과\">\r\n\t\t                <h4>치과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/12\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/안과.avif\" alt=\"안과\">\r\n\t\t                <h4>안과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/13\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/이비인후과.jpg\" alt=\"이비인후과\">\r\n\t\t                <h4>이비인후과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/5\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/정형외과.jpg\" alt=\"정형외과\">\r\n\t\t                <h4>정형외과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/21\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/재활의학과.jpg\" alt=\"재활의학과\">\r\n\t\t                <h4>재활의학과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/6\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/신경외과.jpg\" alt=\"신경외과\">\r\n\t\t                <h4>신경외과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/9\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/마취통증의학과.avif\" alt=\"마취통증의학과\">\r\n\t\t                <h4>마취통증의학과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/4\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/외과.avif\" alt=\"외과\">\r\n\t\t                <h4>외과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/2\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/신경과.jpg\" alt=\"신경과\">\r\n\t\t                <h4>신경과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/16\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/영상의학과.jpg\" alt=\"영상의학과\">\r\n\t\t                <h4>영상의학과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/11\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/소아과.jpg\" alt=\"소아과\">\r\n\t\t                <h4>소아과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t    </ul>\r\n\t\t</div>\t<!-- 2번째줄 리스트 종료 -->\r\n       \r\n   </div> \t<!-- 2번째 페이지 종료 -->\r\n\r\n\t<div class=\"third page\">\r\n\t\t<div class=\"thirdPageOverlay\"></div>\r\n\t\t<p>About us</p>\r\n\t\t<div class=\"rollerWrap\">\r\n\t\t\t<div class=\"rolling-list\" id=\"roller1\">\r\n\t\t\t\t<ul id=\"emergencyList\"></ul>\r\n\t\t\t</div>\r\n\t\t</div>\r\n    \r\n\t</div>\t<!-- 3번째 페이지 종료 -->\r\n\t\r\n\t<div class=\"fourth page\">\r\n\t\t<footer id=\"footer\">\r\n\t\t\t<p>\r\n\t\t\t   사업자: 민재컴퍼니 | 대표자: 지민재<br>\r\n\t\t\t    사업자등록번호: 000-00-000000<br>\r\n\t\t\t    통신판매업신고번호 : 제2024-부산해운대-00001호<br>\r\n\t\t\t   주소 : 부산 해운대구 센텀2로 25<br>\r\n\t\t\t   개인정보관리자 : 이호준<br>\r\n\t\t\t   문의번화번호 : 000-0000-0000\r\n\t\t\t</p>\r\n\t\t\t<div class=\"footerRight\">\r\n\t\t\t   <div class=\"icons\">\r\n\t\t\t      <a class=\"icon_youtube\"></a>\r\n\t\t\t      <a class=\"icon_instagram\"></a>\r\n\t\t\t      <a class=\"icon_facebook\"></a>\r\n\t\t\t   </div>\r\n\t\t\t   <p>\r\n\t\t\t      Copyright©ApuziMapsidak Inc. All rights reserved.<br>\r\n\t\t\t      개인정보 처리 방침 | 사이트 이용약관 | 이메일무단수집거부\r\n\t\t\t   </p>\r\n\t\t\t</div>\r\n\t\t</footer>\r\n\t</div>\r\n</div>\r\n\r\n\t\t\r\n    \r\n\r\n  \r\n\r\n\r\n<ul class=\"pagination\">\r\n</ul>\r\n<div class=\"backImage\">\r\n</div>\r\n   \r\n\r\n\r\n<div id=\"mapModal\">\r\n    <div class=\"content\">\r\n        <div id=\"map2\"></div>\r\n\t\t<ul id=\"hospitalList\" class=\"hospital-list\"></ul>\r\n\t\t<div id=\"closeMapModalBtn\">닫기</div>\r\n\t</div>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!-- 민재 검색 스크립트 -->\r\n<script>\r\n    let markers = []\r\n    const searchTypeSwitch = document.getElementById('searchTypeSwitch');\r\n    const searchForm = document.getElementById('searchForm')\r\n    const searchInput = document.getElementById('searchInput')\r\n\tconst searchTypeSelect = document.getElementById('searchTypeSelect'); // 셀렉트 요소\r\n    const hospitalList = document.getElementById('hospitalList')\r\n    const mapModal = document.getElementById('mapModal')\r\n    let map; // 맵 변수 선언\r\n    const infowindow = new kakao.maps.InfoWindow({ zIndex: 1 }) // 인포윈도우 생성\r\n\r\n    // 초기 플레이스 홀더 설정\r\n    searchInput.placeholder = '증상 또는 병명을 입력해주세요';  // 기본값\r\n\r\n    // 스위치 상태에 따라 플레이스 홀더 및 name 속성 변경\r\n    searchTypeSelect.addEventListener('change', function() {\r\n        if (this.value === 'hospital') {\r\n            // 병원명 검색 선택 시\r\n            searchInput.placeholder = '병원명을 입력해주세요';\r\n            searchInput.name = 'hospital';  // 병원명 검색\r\n        } else {\r\n            // 증상 검색 선택 시\r\n            searchInput.placeholder = '증상 또는 병명을 입력해주세요';\r\n            searchInput.name = 'search';  // 증상 검색\r\n        }\r\n    });\r\n\r\n    // 검색 핸들러\r\n    async function searchHandler(event) {\r\n        event.preventDefault();\r\n        const formData = new FormData(event.target);\r\n        const url = searchTypeSelect.value === 'hospital' ? '${cpath}/hospitals/searchs/names' : '${cpath}/hospitals/searchs';\r\n        const opt = {\r\n            method: 'POST',\r\n            body: formData\r\n        };\r\n        const result = await fetch(url, opt).then(response => response.json());\r\n        console.log(result);\r\n\r\n        if (result.noSearch) {\r\n        \t swal({\r\n                 title: '알림',\r\n                 text: '검색결과가 없습니다. 검색어를 조건에 맞게 검색하세요',\r\n                 type: 'info',\r\n                 button: '확인'\r\n             });\r\n        } else {\r\n            if (searchTypeSelect.value === 'hospital') {\r\n                // 병원명 검색인 경우 모달 열기\r\n                openMapModal(result.hospitals);\r\n            } else {\r\n                // 다른 페이지로 이동 (증상 검색의 경우)\r\n                window.location.href = '${cpath}/result';\r\n            }\r\n        }\r\n    }\r\n\r\n    // 폼 제출 시 searchHandler 실행\r\n    searchForm.addEventListener('submit', searchHandler);\r\n\r\n    function displayHospitalList(hospitals) {\r\n        hospitalList.innerHTML = ''; // 이전 결과 초기화\r\n        hospitals.forEach(hospital => {\r\n            const listItem = document.createElement('li')\r\n            listItem.innerText = hospital.hospital_name + '(' +hospital.address.substring(0,2) + ')' // 병원명 표시\r\n\r\n            // 리스트 항목 클릭 시 맵 중심 이동 및 인포윈도우 표시\r\n            listItem.addEventListener('click', () => {\r\n                // 클릭된 리스트 항목에 'selected' 클래스 추가\r\n                const selectedItem = document.querySelector('.hospital-list .selected')\r\n                if (selectedItem) {\r\n                    selectedItem.classList.remove('selected')\r\n                }\r\n                listItem.classList.add('selected') // 클릭된 항목에 'selected' 클래스 추가\r\n                const markerPosition = new kakao.maps.LatLng(hospital.lat, hospital.lng)\r\n                map.setCenter(markerPosition) // 맵 중심 이동\r\n                map.setLevel(3) // 줌 레벨을 6으로 설정 (더 크게 보이도록)\r\n                const marker = new kakao.maps.Marker({\r\n                    position: markerPosition,\r\n                    map: map, // 기존 맵 변수 사용\r\n                    image: markerImage\r\n                });\r\n                markers.forEach(m => m.setMap(null)) // 기존 마커 숨기기\r\n                markers = [marker] // 현재 마커로 배열 초기화\r\n\t\t\t\t// 인포윈도우 내용 생성\r\n\t\t\t\tconst infoMapListContent = document.createElement('div');\r\n\t\t\t\tinfoMapListContent.classList.add('infoMapListContent'); // 클래스 추가\r\n\r\n\t\t\t\t// 병원 이름을 <a> 태그로 만들기\r\n\t\t\t\tconst hospitalNameLink = document.createElement('a');\r\n\t\t\t\thospitalNameLink.href = '${cpath}/hospitalInfo/' + hospital.id; // 병원 상세 페이지로 링크\r\n\t\t\t\thospitalNameLink.target = '_blank'; // 새 탭에서 열기\r\n\t\t\t\thospitalNameLink.classList.add('hospitalNameLink'); // 클래스 추가\r\n\t\t\t\thospitalNameLink.innerText = hospital.hospital_name;\r\n\r\n\t\t\t\t// 주소와 전화번호 정보 추가\r\n\t\t\t\tconst addressText = document.createElement('div');\r\n\t\t\t\taddressText.classList.add('hospitalAddress'); // 클래스 추가\r\n\t\t\t\taddressText.innerHTML = '<strong>주소:</strong> ' + hospital.address;\r\n\r\n\t\t\t\tconst telText = document.createElement('div');\r\n\t\t\t\ttelText.classList.add('hospitalPhone'); // 클래스 추가\r\n\t\t\t\ttelText.innerHTML = '<strong>전화번호:</strong> ' + hospital.tel;\r\n\r\n\t\t\t\t// 인포윈도우 내용에 병원 이름, 주소, 전화번호 추가\r\n\t\t\t\tinfoMapListContent.appendChild(hospitalNameLink);\r\n\t\t\t\tinfoMapListContent.appendChild(addressText);\r\n\t\t\t\tinfoMapListContent.appendChild(telText);\r\n\r\n\t\t\t\t// 인포윈도우 열기\r\n\t\t\t\tinfowindow.setContent(infoMapListContent);\r\n\t\t\t\tinfowindow.open(map, marker); // 클릭한 마커 위에 인포윈도우 표시\r\n\t\t\t});\r\n\r\n            hospitalList.appendChild(listItem);\r\n        });\r\n    }\r\n\r\n    // 사용자 정의 마커 이미지 경로\r\n    const markerImageUrl = '${cpath}/resources/image/3333.png'; // 마커 이미지 경로를 설정하세요\r\n    const markerImageSize = new kakao.maps.Size(30, 30); // 마커 이미지의 크기\r\n\r\n    // 사용자 정의 마커 이미지 객체 생성\r\n    const markerImage = new kakao.maps.MarkerImage(markerImageUrl, markerImageSize);\r\n\r\n    // 모달 열기 및 마커 표시\r\n    async function openMapModal(hospitals) {\r\n        const modal = document.getElementById('mapModal')\r\n        modal.classList.add('show')\r\n\r\n        const mapContainer = document.getElementById('map2') // 맵 컨테이너\r\n\r\n        // 카카오 맵 초기화\r\n        map = new kakao.maps.Map(mapContainer, {\r\n            center: new kakao.maps.LatLng(37.5563, 126.9727), // 서울역 좌표\r\n            level: 13  // 줌 레벨 설정\r\n        })\r\n\r\n        // 새로운 마커 추가\r\n        markers.forEach(marker => marker.setMap(null)) // 기존 마커 숨기기\r\n        markers = [] // 마커 배열 초기화\r\n\r\n        // 새로운 마커 추가\r\n        hospitals.slice(0, 20).forEach(hospital => {\r\n            const markerPosition = new kakao.maps.LatLng(hospital.lat, hospital.lng)\r\n            const marker = new kakao.maps.Marker({\r\n                position: markerPosition,\r\n                image: markerImage\r\n            })\r\n\r\n            marker.setMap(map)\r\n            markers.push(marker)\r\n            // 마커 클릭 시 해당 병원의 인포윈도우 띄우기\r\n            kakao.maps.event.addListener(marker, 'click', function() {\r\n\t\t\t\tconst infoMapContent = document.createElement('div');\r\n\t\t\t\tinfoMapContent.classList.add('infoMapContent'); // 클래스 추가\r\n\r\n\t\t\t\t// 병원 이름을 <a> 태그로 만들기\r\n\t\t\t\tconst hospitalNameLink = document.createElement('a');\r\n\t\t\t\thospitalNameLink.href = '${cpath}/hospitalInfo/' + hospital.id; // 병원 상세 페이지로 링크\r\n\t\t\t\thospitalNameLink.target = '_blank'; // 새 탭에서 열기\r\n\t\t\t\thospitalNameLink.classList.add('hospitalNameLink'); // 클래스 추가\r\n\t\t\t\thospitalNameLink.innerText = hospital.hospital_name;\r\n\r\n\t\t\t\t// 주소와 전화번호 정보 추가\r\n\t\t\t\tconst addressText = document.createElement('div');\r\n\t\t\t\taddressText.classList.add('hospitalAddress'); // 클래스 추가\r\n\t\t\t\taddressText.innerHTML = '<strong>주소:</strong> ' + hospital.address;\r\n\r\n\t\t\t\tconst telText = document.createElement('div');\r\n\t\t\t\ttelText.classList.add('hospitalPhone'); // 클래스 추가\r\n\t\t\t\ttelText.innerHTML = '<strong>전화번호:</strong> ' + hospital.tel;\r\n\r\n\t\t\t\t// 인포윈도우 내용에 병원 이름, 주소, 전화번호 추가\r\n\t\t\t\tinfoMapContent.appendChild(hospitalNameLink);\r\n\t\t\t\tinfoMapContent.appendChild(addressText);\r\n\t\t\t\tinfoMapContent.appendChild(telText);\r\n\r\n\t\t\t\t// 인포윈도우 열기\r\n\t\t\t\tinfowindow.setContent(infoMapContent);\r\n\t\t\t\tinfowindow.open(map, marker); // 클릭한 마커 위에 인포윈도우 표시\r\n\t\t\t});\r\n        });\r\n\r\n        displayHospitalList(hospitals); // 병원 리스트 표시\r\n    }\r\n\r\n    // 모달 닫기\r\n    function closeMapModal() {\r\n        const modal = document.getElementById('mapModal')\r\n        modal.classList.remove('show')\r\n        markers.forEach(marker => marker.setMap(null)) // 마커 숨기기\r\n        markers = [] // 마커 배열 초기화\r\n    }\r\n\r\n\t// 닫기 버튼 클릭 시 모달 닫기\r\n\tdocument.getElementById('closeMapModalBtn').addEventListener('click', function() {\r\n\t\tcloseMapModal();\r\n\t})\r\n</script>\r\n\r\n<script>\r\nwindow.onload = () => {\r\n    const Slider = function(pages, pagination) {\r\n        let slides = [],\r\n            btns = [],\r\n            count = 0,\r\n            current = 0,\r\n            touchstart = 0,\r\n            animation_state = false;\r\n\r\n        const init = () => {\r\n        slides = pages.children;\r\n        count = slides.length;\r\n        for(let i = 0; i < count; i++) {\r\n            slides[i].style.bottom = -(i * 100) + '%';\r\n            \r\n            let btn = document.createElement('li');\r\n            btn.dataset.slide = i;\r\n            btn.addEventListener('click', btnClick)\r\n            btns.push(btn);\r\n            pagination.appendChild(btn);\r\n        }\r\n        btns[0].classList.add('active');\r\n        }\r\n\r\n        const gotoNum = (index) => {\r\n            if((index != current) && !animation_state) {\r\n                animation_state = true;\r\n                setTimeout(() => animation_state = false, 500);\r\n                btns[current].classList.remove('active');\r\n                current = index;\r\n                btns[current].classList.add('active');\r\n                for(let i = 0; i < count; i++) {\r\n                    if (i === count - 1) {\r\n                        slides[i].style.top = (i - current) * 100 + 'vh';\r\n                    } else {\r\n                        slides[i].style.top = (i - current) * 100 + '%';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const gotoNext = () => current < count - 1 ? gotoNum(current + 1) : false;\r\n        const gotoPrev = () => current > 0 ? gotoNum(current - 1) : false;\r\n        const btnClick = (e) => gotoNum(parseInt(e.target.dataset.slide));\r\n        pages.ontouchstart = (e) => touchstart = e.touches[0].screenY;\r\n        pages.ontouchend = (e) => touchstart < e.changedTouches[0].screenY ? gotoPrev() : gotoNext();\r\n        pages.onmousewheel = pages.onwheel = (e) => e.deltaY < 0 ? gotoPrev() : gotoNext();\r\n\r\n        init();\r\n    }\r\n\r\n    let pages = document.querySelector('.pages');\r\n    let pagination = document.querySelector('.pagination');\r\n    let slider = new Slider(pages, pagination)\r\n    }\r\n\r\n    // 모든 imgSlide 요소 선택\r\n    const imgSlides = document.querySelectorAll(\".imgSlide\");\r\n\r\n    // 각 imgSlide에 대해 복제 작업 수행\r\n    imgSlides.forEach((imgSlide) => {\r\n        // 복제\r\n        const clone = imgSlide.cloneNode(true);\r\n\r\n        // 복제본 추가\r\n        imgSlide.parentElement.appendChild(clone);\r\n\r\n        // 원본, 복제본 위치 지정 (offsetWidth를 사용하여 레이아웃을 강제로 업데이트)\r\n        imgSlide.offsetWidth; // Trigger reflow\r\n\r\n        // 클래스 할당\r\n        imgSlide.classList.add(\"original\");\r\n        clone.classList.add(\"clone\");\r\n    });\r\n</script>\r\n\r\n<!-- 응급실 목록 -->\r\n<script>\r\n    async function emergencyHandler() {\r\n        const url = '${cpath}/hospitals/emergency'\r\n        const result = await fetch(url).then(response => response.json())\r\n        const emergency = result.emergency\r\n\r\n        const emergencyList = document.getElementById('emergencyList')\r\n\r\n        emergency.forEach(function(x) {\r\n            const listItem = document.createElement('li')\r\n            const areaCode = x.dutyTel3.slice(0, 3)\r\n            let region\r\n            let regionClass\r\n\r\n            switch (areaCode) {\r\n                case '02': region = '서울'; regionClass = 'region-seoul'; break\r\n                case '031': region = '경기'; regionClass = 'region-gyeonggi'; break\r\n                case '032': region = '인천'; regionClass = 'region-incheon'; break\r\n                case '051': region = '부산'; regionClass = 'region-busan'; break\r\n                case '053': region = '대구'; regionClass = 'region-daegu'; break\r\n                case '042': region = '대전'; regionClass = 'region-daejeon'; break\r\n                case '062': region = '광주'; regionClass = 'region-gwangju'; break\r\n                case '052': region = '울산'; regionClass = 'region-ulsan'; break\r\n                case '044': region = '세종'; regionClass = 'region-sejong'; break\r\n                case '033': region = '강원'; regionClass = 'region-gangwon'; break\r\n                case '043': region = '충북'; regionClass = 'region-chungbuk'; break\r\n                case '041': region = '충남'; regionClass = 'region-chungnam'; break\r\n                case '063': region = '전북'; regionClass = 'region-jeonbuk'; break\r\n                case '061': region = '전남'; regionClass = 'region-jeonnam'; break\r\n                case '054': region = '경북'; regionClass = 'region-gyeongbuk'; break\r\n                case '055': region = '경남'; regionClass = 'region-gyeongnam'; break\r\n                case '064': region = '제주'; regionClass = 'region-jeju'; break\r\n                default: region = '기타'; regionClass = 'region-etc'; break\r\n            }\r\n\r\n            listItem.innerHTML =\r\n                '<div>' +\r\n                '<strong>' + x.dutyName + ' (' + region + ')</strong><br>' +\r\n                '<a href=\"tel:' + x.dutyTel3 + '\">전화: ' + x.dutyTel3 + '</a><br>' +\r\n                '입원실: ' + x.hvgc + '<br>' +\r\n                '응급실: ' + x.hvec +\r\n                '</div>'\r\n\r\n            listItem.classList.add(regionClass)\r\n            emergencyList.appendChild(listItem)\r\n        })\r\n\r\n        const roller = document.getElementById('roller1')\r\n        const clone = roller.cloneNode(true)\r\n        clone.id = 'roller2'\r\n        document.querySelector('.rollerWrap').appendChild(clone)\r\n\r\n        document.querySelector('#roller1').style.left = '0px'\r\n        document.querySelector('#roller2').style.left = roller.offsetWidth + 'px'\r\n\r\n        roller.classList.add('original')\r\n        clone.classList.add('clone')\r\n    }\r\n\r\n    window.addEventListener('DOMContentLoaded', emergencyHandler)\r\n</script>\r\n\r\n<%--검색어 순위--%>\r\n<script>\r\n\t//검색어 순위\r\n\tdocument.addEventListener('DOMContentLoaded', function() {\r\n\t\tconst rankingList = document.getElementById('rankingList');\r\n\t\tconst originalOrder = Array.from(rankingList.children);\r\n\t\tlet timer;\r\n\r\n\t\t// Animate the rankings to scroll one by one\r\n\t\tfunction tickerAnimation() {\r\n\t\t\ttimer = setTimeout(function() {\r\n\t\t\t\tconst firstLi = rankingList.querySelector('li:first-child');\r\n\t\t\t\tfirstLi.style.marginTop = '-30px';\r\n\t\t\t\tfirstLi.style.transition = 'margin-top 400ms';\r\n\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\trankingList.appendChild(firstLi);\r\n\t\t\t\t\tfirstLi.style.marginTop = '';\r\n\t\t\t\t\tfirstLi.style.transition = '';\r\n\t\t\t\t\ttickerAnimation();\r\n\t\t\t\t}, 400);\r\n\t\t\t}, 2000);\r\n\t\t}\r\n\r\n\t\tfunction resetOrder() {\r\n\t\t\t// 리스트를 초기 순서로 재정렬\r\n\t\t\toriginalOrder.forEach(item => rankingList.appendChild(item));\r\n\t\t}\r\n\r\n\t\ttickerAnimation();\r\n\r\n\t\trankingList.addEventListener('mouseover', function() {\r\n\t\t\tclearTimeout(timer);\r\n\t\t\tresetOrder(); // 순서 초기화\r\n\t\t\trankingList.classList.add('expanded');\r\n\t\t});\r\n\r\n\t\trankingList.addEventListener('mouseout', function() {\r\n\t\t\trankingList.classList.remove('expanded');\r\n\t\t\ttickerAnimation();\r\n\t\t});\r\n\r\n\r\n\t\tdocument.querySelectorAll('.ranking-item').forEach(item => {\r\n\t\t\titem.onclick = function() {\r\n\t\t\t\tconst keyword = item.querySelector('.ranking-text').textContent // 클릭한 아이템의 텍스트 가져오기\r\n\t\t\t\tdocument.getElementById('searchInput').value = keyword // 입력 필드에 키워드 설정\r\n\r\n\t\t\t\t// FormData 객체 생성\r\n\t\t\t\tconst formData = new FormData(document.getElementById('searchForm'))\r\n\r\n\t\t\t\t// FormData에 검색어 추가 (필요한 경우)\r\n\t\t\t\tformData.set('search', keyword) // 'search'라는 이름으로 키워드 추가\r\n\r\n\t\t\t\t// AJAX 요청을 통해 폼 데이터 전송\r\n\t\t\t\tsearchHandler2(formData)\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n\r\n\t// 검색 핸들러\r\n\tasync function searchHandler2(data) {\r\n\t\tconst url = searchTypeSelect.value === 'hospital' ? '${cpath}/hospitals/searchs/names' : '${cpath}/hospitals/searchs';\r\n\t\tconst opt = {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: data\r\n\t\t};\r\n\t\tconst result = await fetch(url, opt).then(response => response.json());\r\n\t\tconsole.log(result);\r\n\r\n\t\tif (result.noSearch) {\r\n\t\t\tswal({\r\n\t\t\t\ttitle: '알림',\r\n\t\t\t\ttext: '검색결과가 없습니다. 검색어를 조건에 맞게 검색하세요',\r\n\t\t\t\ttype: 'info',\r\n\t\t\t\tbutton: '확인'\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (searchTypeSelect.value === 'hospital') {\r\n\t\t\t\t// 병원명 검색인 경우 모달 열기\r\n\t\t\t\topenMapModal(result.hospitals);\r\n\t\t\t} else {\r\n\t\t\t\t// 다른 페이지로 이동 (증상 검색의 경우)\r\n\t\t\t\twindow.location.href = '${cpath}/result';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n\r\n<%--로그인--%>\r\n<script>\r\n    const cpath = '${cpath}'\r\n    const loginIcon = document.querySelector('div.loginIcon')\r\n    const loginIcon2 = document.querySelector('div.loginIcon2')\r\n    if (loginIcon) {\r\n        loginIcon.addEventListener('click', function() {\r\n            location.href = cpath + '/member/login'\r\n        })\r\n    }\r\n\r\n    if (loginIcon2) {\r\n        loginIcon2.addEventListener('click', function() {\r\n            location.href =  '${cpath}/member/info/${login.id}'\r\n        })\r\n    }\r\n</script>\r\n\r\n<!-- 호원 스크립트 -->\r\n<script>\r\n    <!-- 알림 스크립트 -->\r\n    const notification = document.getElementById('notification')\r\n    const notificationTable = document.getElementById('notificationTable')\r\n    const notificationTableHead = document.querySelector('#notificationTable thead')\r\n    const notificationTableBody = document.querySelector('#notificationTable tbody')\r\n    const bookingTitleElement = document.querySelector('.bookingTitle')\r\n    const bookingDetailElement = document.querySelector('.bookingDetail')\r\n    const bookingOverlay = document.querySelector('.bookingOverlay')\r\n    const notificationCountSpan = document.getElementById('notificationCountSpan')\r\n    const closeBookingBtn = document.getElementById('closeBookingBtn')\r\n    const bookingInsertForm = document.getElementById('bookingInsertForm')\r\n    const bookingUpdateForm = document.getElementById('bookingUpdateForm')\r\n\r\n    // 밀리초단위의 시간정보를 년월일시분 형태의 문자열로 변환하는 함수\r\n    function formatDate(d) {\r\n        const date = new Date(d)\r\n        const year = date.getFullYear()\r\n        const month = String(date.getMonth() + 1).padStart(2, '0') // 월은 0부터 시작하므로 +1\r\n        const day = String(date.getDate()).padStart(2, '0')\r\n        const hours = String(date.getHours()).padStart(2, '0')\r\n        const minutes = String(date.getMinutes()).padStart(2, '0')\r\n        return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes\r\n    }\r\n\r\n    // 예약 모달 여는 함수\r\n    function openBookingModal(bookingTitle, bookingDetail) {\r\n        bookingTitleElement.innerText = bookingTitle\r\n        bookingDetailElement.appendChild(bookingDetail)\r\n        bookingModal.classList.remove('hidden')\r\n    }\r\n\r\n    // 예약 모달 닫는 함수\r\n    function closeBookingModal(event){\r\n        bookingModal.classList.add('hidden')\r\n        bookingInsertForm.classList.add('hidden')\r\n        bookingUpdateForm.classList.add('hidden')\r\n        notificationTable.classList.add('hidden')\r\n        myFavoritesTable.classList.add('hidden')\r\n    }\r\n\r\n\r\n\r\n    // 아직 안읽은 알림 갯수 가져와서 띄우는 함수\r\n    async function notificationCount(){\r\n        const url = '${cpath}/notificationCount'\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if (result > 0) {\r\n            notificationCountSpan.classList.remove('hidden')\r\n            if (result >= 10) {\r\n                notificationCountSpan.innerText = '9+' // 10 이상은 '9+'로 표시\r\n            } else {\r\n                notificationCountSpan.innerText = result // 10 미만은 해당 숫자 표시\r\n            }\r\n            return result\r\n        } else {\r\n            notificationCountSpan.innerText = '' // 0 이하일 경우 비움\r\n            notificationCountSpan.classList.add('hidden')\r\n            return ''\r\n        }\r\n    }\r\n\r\n    // 알림 페이징 최대 페이지 수 가져오는 함수\r\n    async function notificationMaxPage(startPage){\r\n        const url = '${cpath}/notificationMaxPage'\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if(result != 0){\r\n            let tag = '<tr id=\"notificationPaging\">'\r\n            tag += '<td>이전</td>'\r\n            for(let i = startPage; i <= Math.min(startPage + 4, result); i++){\r\n                tag += '<td data-page=\"' + i + '\">' + i + '</td>'\r\n            }\r\n            tag += '<td>다음</td></tr>'\r\n            notificationTableBody.innerHTML = tag\r\n        }\r\n        else notificationTableBody.innerText = '알림이 없습니다.'\r\n        return result\r\n    }\r\n\r\n\r\n    // 알림 리스트 가져와서 페이지별로 띄우는 함수\r\n    async function notificationList(thisPage){\r\n        const url = '${cpath}/notificationList/' + thisPage\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        let tag = ''\r\n        tag += '<tr><button id=\"deleteNotificationAllBtn\">일괄 삭제하기</button></tr>'\r\n        result.forEach(e => {\r\n            tag += '<tr>' +\r\n                '<td class=\"notification-cell\" style=\"background-color: ' + (e.read ? '#ffffff' : 'lightskyblue') + ';\">' +\r\n                '<div class=\"notification-content\">' +\r\n                '<span class=\"notification-date\">' + formatDate(e.sent_time) + '</span>  ' +\r\n                '<span class=\"notification-name\">' + e.name + '님의 ' + e.hospital_name + '</span> ' +\r\n                '<span class=\"notification-date\">' + formatDate(e.booking_date) + '</span> ' +\r\n                '<span class=\"notification-message\">' + e.message + '</span>' +\r\n                '</div>' +\r\n                '</td>' +\r\n                '<td>' +\r\n                '<button class=\"notificationDeleteBtn\" data-page=\"' + thisPage + '\" data-id=\"' + e.id + '\">삭제</button>' +\r\n                '</td>' +\r\n                '</tr>'\r\n        })\r\n        notificationTableHead.innerHTML = tag\r\n\r\n        // 알림삭제 버튼 기능부여\r\n        document.querySelectorAll('.notificationDeleteBtn').forEach(btn => {\r\n            btn.onclick = (event) => {\r\n                deleteNotification(event)\r\n                readNotification(event)\r\n            }\r\n        })\r\n        document.getElementById('deleteNotificationAllBtn').addEventListener('click', deleteNotificationAll)\r\n        return result  // 결과를 반환합니다.\r\n    }\r\n\r\n    // 알림 지우는 함수\r\n    async function deleteNotification(event) {\r\n        event.preventDefault()\r\n        const id = parseInt(event.target.dataset.id)\r\n        const thisPage = parseInt(event.target.dataset.page)\r\n        const url = '${cpath}/deleteNotification/' + id\r\n        const opt = {\r\n            method: 'DELETE'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json());\r\n        if (result == 1) {\r\n            await notificationCount()\r\n            await updateNotificationPage(thisPage)\r\n        }\r\n    }\r\n\r\n    // 알림 페이지 업데이트 함수\r\n    function updateNotificationPagination(currentPage, startPage, maxPage) {\r\n        document.querySelectorAll('#notificationPaging td').forEach((td, i, arr) => {\r\n            if(i == 0) {\r\n                td.onclick = () => {\r\n                    const prevPage = Math.max(1, currentPage - 1)\r\n                    readNotification({ target: { dataset: { page: prevPage } } })\r\n                }\r\n            } else if(i == arr.length - 1) {\r\n                td.onclick = () => {\r\n                    const nextPage = Math.min(maxPage, currentPage + 1)\r\n                    readNotification({ target: { dataset: { page: nextPage } } })\r\n                }\r\n            } else {\r\n                td.onclick = (e) => readNotification(e)\r\n            }\r\n\r\n            if(i + startPage - 1 == currentPage) td.style.fontWeight = 'bold'\r\n        })\r\n    }\r\n\r\n    // 알림 페이지 변경 함수\r\n    async function updateNotificationPage(currentPage) {\r\n        const startPage = (Math.floor((currentPage + 4) / 5) - 1) * 5 + 1\r\n        const maxPage = await notificationMaxPage(startPage)\r\n\r\n        // 현재 페이지의 알림 목록을 가져옵니다.\r\n        const notifications = await notificationList(currentPage)\r\n\r\n        if (notifications.length === 0 && currentPage > 1) {\r\n            // 현재 페이지가 비어있고, 첫 번째 페이지가 아니라면 이전 페이지로 이동\r\n            await readNotification({ target: { dataset: { page: currentPage - 1 } } })\r\n        } else {\r\n            // 페이징 업데이트\r\n            updateNotificationPagination(currentPage, startPage, maxPage)\r\n        }\r\n    }\r\n\r\n\r\n    // 알림 읽음 처리하는 함수\r\n    async function readNotification(event) {\r\n        const thisPage = parseInt(event.target.dataset.page)\r\n        const startPage = (Math.floor((thisPage + 4) / 5) - 1) * 5 + 1\r\n\r\n        // 알림 리스트 불러오기\r\n        await notificationList(thisPage)\r\n\r\n        // 알림 읽음 처리\r\n        const url = '${cpath}/readNotification/' + thisPage\r\n        const opt = {\r\n            method : 'PATCH'\r\n        }\r\n        await fetch(url, opt)\r\n\r\n        // 알림 안읽은 수에서 읽은만큼 빼기\r\n        notificationCount()\r\n\r\n        // 알림창 최대 페이지 수\r\n        const maxPage = await notificationMaxPage(startPage)\r\n\r\n        // 알림 페이징\r\n        document.querySelectorAll('#notificationPaging td').forEach((td, i, arr) => {\r\n\r\n            // 이전\r\n            if(i == 0) {\r\n                td.onclick = (e) => {\r\n                    const prevPage = Math.max(1, thisPage - 1)\r\n                    readNotification({ target: { dataset: { page: prevPage } } })\r\n                }\r\n            }\r\n\r\n            // 다음\r\n            else if(i == arr.length - 1) {\r\n                td.onclick = async (e) => {\r\n                    const nextPage = Math.min(maxPage, thisPage + 1)\r\n                    readNotification({ target: { dataset: { page: nextPage } } })\r\n                }\r\n            }\r\n\r\n            // 페이지\r\n            else td.onclick = (e) => readNotification(e)\r\n\r\n            // 현재 페이지 숫자 굵게 표시\r\n            if(i + startPage - 1 == thisPage) td.style.fontWeight = 'bold'\r\n        })\r\n        notificationTable.classList.remove('hidden')\r\n        openBookingModal('알림', notificationTable)\r\n    }\r\n\r\n    async function deleteNotificationAll(event){\r\n        const url = '${cpath}/deleteNotificationAll'\r\n        const opt = {\r\n            method : 'DELETE'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if(result > 0) readNotification({ target: { dataset: { page: 1 } } })\r\n\r\n\r\n    }\r\n\r\n\r\n    closeBookingBtn.addEventListener('click', closeBookingModal)\r\n    bookingOverlay.onclick = closeBookingModal\r\n    notification.addEventListener('click', readNotification)\r\n    document.addEventListener('DOMContentLoaded', notificationCount)\r\n</script>\r\n\r\n\r\n<!-- 즐겨찾기 -->\r\n<script>\r\n    const myFavorites = document.getElementById('myFavorites')\r\n    const myFavoritesTable = document.getElementById('myFavoritesTable')\r\n    const myFavoritesTableHead = document.querySelector('#myFavoritesTable thead')\r\n    const myFavoritesTableBody = document.querySelector('#myFavoritesTable tbody')\r\n\r\n\r\n    async function getFavorite(id){\r\n        const url = cpath + '/getFavorite/' + parseInt(id)\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        return result\r\n    }\r\n\r\n    // 즐겨찾기 추가하는 함수\r\n    async function myFavorite(event){\r\n        event.preventDefault()\r\n        const url = cpath + '/myFavorite/' + parseInt(event.target.dataset.id)\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        location.reload()\r\n    }\r\n\r\n    // 즐겨찾기 목록 가져오는 함수\r\n    async function myFavoritesList(thisPage){\r\n        const url = cpath + '/myFavoritesList/' + thisPage\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        let tag = ''\r\n        tag += '<tr><button id=\"deleteMyFavoritesAllBtn\">일괄 삭제하기</button></tr>'\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        console.log(result)\r\n        result.forEach(favorite => {\r\n            tag += '<tr>'\r\n            tag += '<th><a href=\"${cpath }/hospitalInfo/' + favorite.hospital_id + '\">' + favorite.hospital_name + '</a></th>'\r\n            tag += '<th>' + favorite.address + '</th><th>' + favorite.tel + '</th><th><button class=\"myFavoritesDeleteBtn\" data-page=\"' + thisPage + '\" data-id=\"' + favorite.hospital_id + '\">삭제</button></th>'\r\n            tag += '</tr>'\r\n        })\r\n        myFavoritesTableHead.innerHTML = tag\r\n\r\n        // 즐찾삭제 버튼 기능부여\r\n        document.querySelectorAll('.myFavoritesDeleteBtn').forEach(btn => {\r\n            btn.onclick = (event) => {\r\n                Swal.fire({\r\n                    title: '즐겨찾기 삭제',\r\n                    text: '해당 병원을 즐겨찾기 삭제 하시겠습니까?',\r\n                    icon: 'question',  // 'type' 대신 'icon' 사용\r\n                    showCancelButton: true,\r\n                    confirmButtonText: '확인',\r\n                    cancelButtonText: '취소',\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    reverseButtons: true, // 취소 버튼을 왼쪽에 배치하려면 추가\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        deleteMyFavorites(event)\r\n                        openMyFavorites(event)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        document.getElementById('deleteMyFavoritesAllBtn').addEventListener('click', () => {\r\n            if(result != ''){\r\n                Swal.fire({\r\n                    title: '즐겨찾기 일괄삭제',\r\n                    text: '즐겨찾기 목록을 전부 삭제 하시겠습니까?',\r\n                    icon: 'question',\r\n                    confirmButtonText: '확인',\r\n                    cancelButtonText: '취소',\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    showCancelButton: true,\r\n                    allowOutsideClick: false,\r\n                    allowEscapeKey: false,\r\n                    showCloseButton: false\r\n                }).then((result) => {if(result.isConfirmed) deleteMyFavoritesAll()})}})\r\n        return result\r\n    }\r\n\r\n    // 즐겨찾기 지우는 함수\r\n    async function deleteMyFavorites(event) {\r\n        event.preventDefault()\r\n        const id = parseInt(event.target.dataset.id)\r\n        const thisPage = parseInt(event.target.dataset.page)\r\n        console.log(thisPage)\r\n        const url = '${cpath}/deleteMyFavorites/' + id\r\n        const opt = {\r\n            method: 'DELETE'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json());\r\n        if (result == 1) {\r\n            await updateMyFavoritesPage(thisPage)\r\n        }\r\n    }\r\n\r\n    // 즐겨찾기 페이징 최대 페이지 수 가져오는 함수\r\n    async function myFavoritesMaxPage(startPage){\r\n        const url = '${cpath}/myFavoritesMaxPage'\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if(result != 0){\r\n            let tag = '<tr id=\"myFavoritesPaging\">'\r\n            tag += '<td>이전</td>'\r\n            for(let i = startPage; i <= Math.min(startPage + 4, result); i++){\r\n                tag += '<td data-page=\"' + i + '\">' + i + '</td>'\r\n            }\r\n            tag += '<td>다음</td></tr>'\r\n            myFavoritesTableBody.innerHTML = tag\r\n        }\r\n        else myFavoritesTableBody.innerText = '즐겨찾기 한 병원이 없습니다.'\r\n        return result\r\n    }\r\n\r\n    // 즐찾 페이지 업데이트 함수\r\n    function updateMyFavoritesPagination(currentPage, startPage, maxPage) {\r\n\r\n        document.querySelectorAll('#myFavoritesPaging td').forEach((td, i, arr) => {\r\n            if(i == 0) {\r\n                td.onclick = () => {\r\n                    const prevPage = Math.max(1, currentPage - 1)\r\n                    openMyFavorites({ target: { dataset: { page: prevPage } } })\r\n                }\r\n            } else if(i == arr.length - 1) {\r\n                td.onclick = () => {\r\n                    const nextPage = Math.min(maxPage, currentPage + 1)\r\n                    openMyFavorites({ target: { dataset: { page: nextPage } } })\r\n                }\r\n            } else {\r\n                td.onclick = (e) => openMyFavorites(e)\r\n            }\r\n\r\n            if(i + startPage - 1 == currentPage) td.style.fontWeight = 'bold'\r\n        })\r\n    }\r\n\r\n    // 즐찾 페이지 변경 함수\r\n    async function updateMyFavoritesPage(currentPage) {\r\n        const startPage = (Math.floor((currentPage + 4) / 5) - 1) * 5 + 1\r\n        const maxPage = await myFavoritesMaxPage(startPage)\r\n\r\n        // 현재 페이지의 알림 목록을 가져옵니다.\r\n        const myFavoritess = await myFavoritesList(currentPage)\r\n\r\n        if (myFavoritess.length === 0 && currentPage > 1) {\r\n            // 현재 페이지가 비어있고, 첫 번째 페이지가 아니라면 이전 페이지로 이동\r\n            await openMyFavorites({ target: { dataset: { page: currentPage - 1 } } })\r\n        } else {\r\n            // 페이징 업데이트\r\n            updateMyFavoritesPagination(currentPage, startPage, maxPage)\r\n        }\r\n    }\r\n\r\n    // 즐겨찾기 목록 여는 함수\r\n    async function openMyFavorites(event) {\r\n        console.log(event.target.dataset.page)\r\n        const thisPage = parseInt(event.target.dataset.page)\r\n        const startPage = (Math.floor((thisPage + 4) / 5) - 1) * 5 + 1\r\n\r\n        // 즐겨찾기 리스트 불러오기\r\n        await myFavoritesList(thisPage)\r\n\r\n        // 즐겨찾기 최대 페이지 수\r\n        const maxPage = await myFavoritesMaxPage(startPage)\r\n\r\n\r\n        // 즐겨찾기 페이징\r\n        document.querySelectorAll('#myFavoritesPaging td').forEach((td, i, arr) => {\r\n\r\n            // 이전\r\n            if(i == 0) {\r\n                td.onclick = (e) => {\r\n                    const prevPage = Math.max(1, thisPage - 1)\r\n                    openMyFavorites({ target: { dataset: { page: prevPage } } })\r\n                }\r\n            }\r\n\r\n            // 다음\r\n            else if(i == arr.length - 1) {\r\n                td.onclick = async (e) => {\r\n                    const nextPage = Math.min(maxPage, thisPage + 1)\r\n                    openMyFavorites({ target: { dataset: { page: nextPage } } })\r\n                }\r\n            }\r\n\r\n            // 페이지\r\n            else td.onclick = (e) => openMyFavorites(e)\r\n\r\n            // 현재 페이지 숫자 굵게 표시\r\n            if(i + startPage - 1 == thisPage) td.style.fontWeight = 'bold'\r\n        })\r\n\r\n        myFavoritesTable.classList.remove('hidden')\r\n        openBookingModal('즐겨찾기 목록', myFavoritesTable)\r\n    }\r\n\r\n    async function deleteMyFavoritesAll(event){\r\n        const url = '${cpath}/deleteMyfavoritesAll'\r\n        const opt = {\r\n            method : 'DELETE'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if(result > 0) openMyFavorites({ target: { dataset: { page: 1 } } })\r\n    }\r\n\r\n\r\n    myFavorites.addEventListener('click', (event) => {\r\n        if('${login}' != '') openMyFavorites(event)\r\n        else {\r\n            Swal.fire({\r\n                title: '',\r\n                text: '로그인 해주세요.',\r\n                icon: 'info',\r\n                confirmButtonText: '확인',\r\n                cancelButtonText: '취소',\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                showCancelButton: true,\r\n                allowOutsideClick: false,\r\n                allowEscapeKey: false,\r\n                showCloseButton: false\r\n            }).then((result) => {if(result.isConfirmed) location.href = '${cpath}/member/login'})\r\n        }\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/WEB-INF/views/home.jsp b/src/main/webapp/WEB-INF/views/home.jsp
--- a/src/main/webapp/WEB-INF/views/home.jsp	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/src/main/webapp/WEB-INF/views/home.jsp	(date 1732156053734)
@@ -238,17 +238,7 @@
          0% {transform: translateX(0);}
          100% {transform: translateX(-200%);}
      }
-     
-	/* 3번째 페이지 */
-/*     .thirdPageOverlay { */
-/*     	width: 100%; */
-/*     	height: 100%; */
-/*     	top: 0; */
-/*     	left: 0; */
-/*     	background-color: black; */
-/*     	position: absolute; */
-/*     	opacity: 0.5; */
-/*     } */
+
 /*     응급실 스타일 */
     .rollerWrap {
 		position: absolute;
Index: target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/login.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<%@ include file=\"../header.jsp\" %>\r\n\r\n<div id=\"loginModal\" class=\"modal\">\r\n<div class=\"overlay\"></div>\r\n   <div class=\"content\">\r\n\t<h3>finalProject</h3>\r\n      <form method=\"POST\">\r\n         <p><input type=\"text\" name=\"userid\" placeholder=\"ID\" autocomplete=\"off\" required autofocus></p>\r\n         <p><input type=\"password\" name=\"userpw\" placeholder=\"Password\" required ></p>\r\n         <p><input type=\"submit\" value=\"로그인\"></p>\r\n      </form>\r\n      \r\n      <p><input id=\"loginWithNaver\" type=\"image\" src=\"${cpath }/resources/naver/btnG_완성형.png\" width=\"183\" height=\"45\"></p>\r\n      <p>\r\n         <a href=\"${cpath }/member/join\">회원가입하기</a>\r\n         <a href=\"${cpath }/member/resetPassword\">비밀번호 재발급</a>\r\n      </p>\r\n      \r\n      <input type=\"hidden\" name=\"result\">\r\n      <p><a href=\"${cpath }\"><button>뒤로가기</button></a></p>\r\n   </div>\r\n</div>\r\n<script>\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    const message = '${message}'\r\n    \r\n    if (message != '') {\r\n        swal('회원 가입 결과', message, 'success')\r\n    }\r\n\r\n    // 일반 로그인 처리\r\n    const form = document.querySelector('#loginModal form')\r\n    \r\n    form.onsubmit = function(event) {\r\n        event.preventDefault() // 기본 제출 방지\r\n        \r\n        const formData = new FormData(form)\r\n       const urlParams = new URLSearchParams(window.location.search) // URL 쿼리 매개변수 읽기\r\n       const redirectUrl = urlParams.get('redirectUrl') || '${cpath}'\r\n        \r\n        fetch('${cpath}/member/login', {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            if (data.status === 'success') {\r\n                swal({\r\n                    title: \"정상 로그인되었습니다\",\r\n                    text: \"환영합니다!\",\r\n                    type: \"success\",\r\n                    confirmButtonText: \"확인\"\r\n                }, function() {\r\n                   window.location.href = redirectUrl;\r\n                })\r\n            } else {\r\n                swal({\r\n                    title: \"로그인 실패\",\r\n                    text: data.message,\r\n                    type: \"error\",\r\n                    confirmButtonText: \"확인\"\r\n                }, function() {\r\n                    location.href = '${cpath}/member/login'\r\n                })\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error:', error)\r\n            swal(\"오류\", \"로그인 처리 중 오류가 발생했습니다.\", \"error\")\r\n        })\r\n    }\r\n\r\n    // 네이버 로그인 처리\r\n    function loginWithNaverHandler() {\r\n        const url = '${naverLoginURL}'\r\n        const name = '_blank'\r\n        const options = 'menubar=no, toolbar=no, width=700, height=1000'\r\n        const popup = window.open(url, name, options)\r\n\r\n        // 2초마다 한번씩 팝업이 닫혔는지 확인\r\n        const timer = setInterval(function() {\r\n            console.log(popup.closed)\r\n            if (popup.closed) {\r\n                afterClosePopup()\r\n                clearInterval(timer)\r\n            }\r\n        }, 1000)\r\n\r\n        function afterClosePopup() {\r\n            const json = document.querySelector('input[name=\"result\"]').value\r\n            const result = JSON.parse(json)\r\n            console.log(result)\r\n            if (result.success == false) {\r\n                swal({\r\n                    title: '연동된 계정이 없습니다',\r\n                    text: '회원가입으로 이동합니다',\r\n                    type: 'info',\r\n                    showCancelButton: true,\r\n                    confirmButtonText: '예',\r\n                    cancelButtonText: '아니오',\r\n                    closeOnConfirm: true,\r\n                    closeOnCancel: true,\r\n                }, function(isConfirm) {\r\n                    if (isConfirm) {\r\n                        location.href = '${cpath}/member/join'\r\n                    }\r\n                })\r\n            } else {\r\n                location.href = '${cpath}'\r\n            }\r\n        }\r\n    }\r\n\r\n    document.getElementById('loginWithNaver').onclick = loginWithNaverHandler\r\n})\r\n</script>\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/login.jsp b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/login.jsp
--- a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/login.jsp	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/login.jsp	(date 1732155578137)
@@ -2,119 +2,222 @@
     pageEncoding="UTF-8"%>
 <%@ include file="../header.jsp" %>
 
-<div id="loginModal" class="modal">
-<div class="overlay"></div>
-   <div class="content">
-	<h3>finalProject</h3>
-      <form method="POST">
-         <p><input type="text" name="userid" placeholder="ID" autocomplete="off" required autofocus></p>
-         <p><input type="password" name="userpw" placeholder="Password" required ></p>
-         <p><input type="submit" value="로그인"></p>
-      </form>
-      
-      <p><input id="loginWithNaver" type="image" src="${cpath }/resources/naver/btnG_완성형.png" width="183" height="45"></p>
-      <p>
-         <a href="${cpath }/member/join">회원가입하기</a>
-         <a href="${cpath }/member/resetPassword">비밀번호 재발급</a>
-      </p>
-      
-      <input type="hidden" name="result">
-      <p><a href="${cpath }"><button>뒤로가기</button></a></p>
+<style>
+   body{
+        background: linear-gradient(to bottom,#2c3e50, #a2a3a3);
+        width: 100vw;
+        height: 100vh;
+    }
+    .loginModal {
+       position: relative;
+       height: 91%;
+       display: flex;
+       justify-content: center;
+       align-items: center;
+   }
+   .content {
+       width: 100%;
+       max-width: 400px;
+       height: 500px;
+       padding: 40px;
+       background-color: rgba(247, 249, 250, 0.8);
+       border-radius: 8px;
+       box-shadow: 0 0 10px rgba(0,0,0,0.1);
+       text-align: center;
+       /* background-color: rgba(0, 0, 0, 0.5); */
+   }   
+   .content .amdLoginForm {
+       display: flex;
+       flex-direction: column;
+       align-items: center;
+       text-align: center;
+   }   
+   .content input[type="text"],
+   .content input[type="password"],
+   .content input[type="submit"] {
+       padding: 10px;
+       margin: 5px auto;
+       border: 1px solid #ddd;
+       border-radius: 4px;
+   }   
+   .content input[type="submit"] {
+       background-color: #2c3e50;
+       font-size: 17px;
+       color: white;
+       cursor: pointer;
+       width: 183px;
+       height: 43px;
+       margin-bottom: 0;
+       padding-top: 6.5px;
+       display: flex;
+       justify-content: center;
+       align-items: center;
+       text-align: center;
+       border: 0;
+   }   
+   .content a {
+       color: #333;
+       text-decoration: none;
+       margin: 5px;
+   } 
+   .amdOrNaver {
+      width: 240px;
+      display: flex;
+      justify-content: space-between;
+      align-items: center;
+      margin: auto;
+   }
+   .middleLine {
+      width: 100px;
+      height: 2px;
+      background-color: #2c3e50;
+   }
+   .gotoBackBtn {
+    width: 183px;
+    margin-top: 10px;
+    padding: 8px; /* 여백 축소 */
+    background: none;
+    border: 1px solid #2c3e50;
+    border-radius: 4px; /* 둥글기 축소 */
+    color: #2c3e50;
+    cursor: pointer;
+    transition: background 0.3s ease, color 0.3s ease;
+    font-size: 0.9rem; /* 텍스트 크기 축소 */
+   }
+   .gotoBackBtn:hover {
+       background: #2c3e50;
+       color: white;
+   }
+   #loginTitle {
+      color: #2c3e50;
+      font-size: 25px;
+   }
+   
+</style>
+
+<div id="loginModal" class="loginModal">   
+    <div class="content">
+      <h2 id="loginTitle">AMD 로그인</h2>
+<!--        <p style="color: gray;">로그인하여<br> -->
+<!--                  최적의 응급 정보를 보다 효율적으로 관리해보세요.</p> -->
+       <form method="POST" id="amdLoginForm">
+           <p><input type="text" name="userid" placeholder="ID" autocomplete="off" required autofocus></p>
+           <p><input type="password" name="userpw" placeholder="Password" required ></p>
+           <p><input type="submit" value="AMD 로그인" ></p>
+       </form>
+         
+       <div class="amdOrNaver">
+          <div class="middleLine"></div>
+          <span>or</span>
+          <div class="middleLine"></div>
+       </div>
+         
+       <p><input id="loginWithNaver" type="image" src="${cpath }/resources/naver/btnG_완성형.png" width="183" height="45" ></p>
+       <p>
+          <a href="${cpath }/member/join" style="color: gray;">회원가입하기</a>|<a href="${cpath }/member/resetPassword" style="color: gray;">비밀번호 재발급</a>
+       </p>
+         
+       <input type="hidden" name="result">
+       <p><a href="${cpath }"><button class="gotoBackBtn">뒤로가기</button></a></p>
    </div>
 </div>
+
+<%@ include file="../footer.jsp" %>
+
 <script>
-document.addEventListener('DOMContentLoaded', function() {
-    const message = '${message}'
-    
-    if (message != '') {
-        swal('회원 가입 결과', message, 'success')
-    }
-
-    // 일반 로그인 처리
-    const form = document.querySelector('#loginModal form')
-    
-    form.onsubmit = function(event) {
-        event.preventDefault() // 기본 제출 방지
-        
-        const formData = new FormData(form)
-       const urlParams = new URLSearchParams(window.location.search) // URL 쿼리 매개변수 읽기
-       const redirectUrl = urlParams.get('redirectUrl') || '${cpath}'
-        
-        fetch('${cpath}/member/login', {
-            method: 'POST',
-            body: formData
-        })
-        .then(response => response.json())
-        .then(data => {
-            if (data.status === 'success') {
-                swal({
-                    title: "정상 로그인되었습니다",
-                    text: "환영합니다!",
-                    type: "success",
-                    confirmButtonText: "확인"
-                }, function() {
-                   window.location.href = redirectUrl;
-                })
-            } else {
-                swal({
-                    title: "로그인 실패",
-                    text: data.message,
-                    type: "error",
-                    confirmButtonText: "확인"
-                }, function() {
-                    location.href = '${cpath}/member/login'
-                })
-            }
-        })
-        .catch(error => {
-            console.error('Error:', error)
-            swal("오류", "로그인 처리 중 오류가 발생했습니다.", "error")
-        })
-    }
-
-    // 네이버 로그인 처리
-    function loginWithNaverHandler() {
-        const url = '${naverLoginURL}'
-        const name = '_blank'
-        const options = 'menubar=no, toolbar=no, width=700, height=1000'
-        const popup = window.open(url, name, options)
-
-        // 2초마다 한번씩 팝업이 닫혔는지 확인
-        const timer = setInterval(function() {
-            console.log(popup.closed)
-            if (popup.closed) {
-                afterClosePopup()
-                clearInterval(timer)
-            }
-        }, 1000)
-
-        function afterClosePopup() {
-            const json = document.querySelector('input[name="result"]').value
-            const result = JSON.parse(json)
-            console.log(result)
-            if (result.success == false) {
-                swal({
-                    title: '연동된 계정이 없습니다',
-                    text: '회원가입으로 이동합니다',
-                    type: 'info',
-                    showCancelButton: true,
-                    confirmButtonText: '예',
-                    cancelButtonText: '아니오',
-                    closeOnConfirm: true,
-                    closeOnCancel: true,
-                }, function(isConfirm) {
-                    if (isConfirm) {
-                        location.href = '${cpath}/member/join'
-                    }
-                })
-            } else {
-                location.href = '${cpath}'
-            }
-        }
-    }
-
-    document.getElementById('loginWithNaver').onclick = loginWithNaverHandler
-})
+   document.addEventListener('DOMContentLoaded', function() {
+       const message = '${message}'
+       
+       if (message != '') {
+           swal('회원 가입 결과', message, 'success')
+       }
+   
+       // 일반 로그인 처리
+       const form = document.querySelector('#loginModal form')
+       
+       form.onsubmit = function(event) {
+           event.preventDefault() // 기본 제출 방지
+           
+           const formData = new FormData(form)
+           
+           fetch('${cpath}/member/login', {
+               method: 'POST',
+               body: formData
+           })
+           .then(response => response.json())
+           .then(data => {
+               if (data.status === 'success') {
+                   swal({
+                       title: "정상 로그인되었습니다",
+                       text: "환영합니다!",
+                       type: "success",
+                       confirmButtonText: "확인"
+                   }, function() {
+                       location.href = '${cpath}'
+                   })
+               } else {
+                   swal({
+                       title: "로그인 실패",
+                       text: data.message,
+                       type: "error",
+                       confirmButtonText: "확인"
+                   }, function() {
+                       location.href = '${cpath}/member/login'
+                   })
+               }
+           })
+           .catch(error => {
+               console.error('Error:', error)
+               swal("오류", "로그인 처리 중 오류가 발생했습니다.", "error")
+           })
+       }
+   
+       // 네이버 로그인 처리
+       function loginWithNaverHandler() {
+           const url = '${naverLoginURL}'
+           const name = '_blank'
+           const options = 'menubar=no, toolbar=no, width=700, height=1000'
+           const popup = window.open(url, name, options)
+   
+           // 2초마다 한번씩 팝업이 닫혔는지 확인
+           const timer = setInterval(function() {
+               console.log(popup.closed)
+               if (popup.closed) {
+                   afterClosePopup()
+                   clearInterval(timer)
+               }
+           }, 1000)
+   
+           function afterClosePopup() {
+               const json = document.querySelector('input[name="result"]').value
+               const result = JSON.parse(json)
+               console.log(result)
+               if (result.success == false) {
+                   swal({
+                       title: '연동된 계정이 없습니다',
+                       text: '회원가입으로 이동합니다',
+                       type: 'info',
+                       showCancelButton: true,
+                       confirmButtonText: '예',
+                       cancelButtonText: '아니오',
+                       closeOnConfirm: true,
+                       closeOnCancel: true,
+                   }, function(isConfirm) {
+                       if (isConfirm) {
+                           location.href = '${cpath}/member/join'
+                       }
+                   })
+               } else {
+                   location.href = '${cpath}'
+               }
+           }
+       }
+   
+       document.getElementById('loginWithNaver').onclick = loginWithNaverHandler
+   })
+   
+   const footer = document.getElementById('footer')
+   footer.style.backgroundColor = '#a2a3a3'
 </script>
 
 </body>
Index: target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/home.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\r\n<%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %>\r\n<%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\" %>\r\n<c:set var=\"cpath\" value=\"${pageContext.request.contextPath }\" />\r\n\r\n<%--    chart    --%>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js@4.4.4/dist/chart.umd.min.js\"></script>\r\n    <!--  sweetalert2 -->\r\n    <script src=\"https://unpkg.com/sweetalert/dist/sweetalert.min.js\"></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>\r\n    <%-- sweetalert --%>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.js\"\r\n            integrity=\"sha512-7VTiy9AhpazBeKQAlhaLRUk+kAMAb8oczljuyJHPsVPWox/QIXDFOnT9DUk1UC8EbnHKRdQowT7sOBe7LAjajQ==\"\r\n            crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css\"\r\n          integrity=\"sha512-gOQQLjHRpD3/SEOtalVq50iDn4opLVup2TF8c4QPI3/NmUPNZOk2FG0ihi8oCU/qYEsw4P6nuEZT2lAG0UNYaw==\"\r\n          crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"/>\r\n\r\n    <%-- 카카오맵 API --%>\r\n    <script type=\"text/javascript\"\r\n            src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=f714ffceece9359c7acaeb2b338b1ae7&libraries=services,clusterer,drawing\"></script>\r\n\r\n    <%-- 좌표계산을 쉽게 할 수 있음 --%>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/geolib@3.3.4/lib/index.min.js\"></script>\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css\"/>\r\n\r\n    <!-- 다음 주소 API -->\r\n    <script src=\"https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n<%--아임포트 API--%>\r\n    <script type=\"text/javascript\" src=\"https://cdn.iamport.kr/js/iamport.payment-1.2.0.js\"></script>\r\n    <!-- jQuery 로드 -->\r\n    <script src=\"https://code.jquery.com/jquery-1.12.4.min.js\"></script>\r\n<%--    포트원 결제--%>\r\n    <script src=\"https://cdn.iamport.kr/v1/iamport.js\"></script>\r\n\r\n<style>\r\n   body, html {\r\n        margin: 0;\r\n        padding: 0;\r\n        font-family: Arial, sans-serif;\r\n    }\r\n\r\n    /*  ============ 첫번째 페이지 ============ */\r\n    .first {        \r\n        width: 100%;\r\n        height: 1190px;\r\n        justify-content: center;\r\n        align-items: center;\r\n        overflow: hidden;\r\n        display: flex;\r\n    }\r\n    @keyframes moveBackground {     /* 배경화면 이동효과 */\r\n        from {\r\n            background-position: -100 0;\r\n        }\r\n        to {\r\n            background-position: 0 0;\r\n        }\r\n    }\r\n    .main_right {\r\n        width: 50%;\r\n        height: 100%;\r\n        z-index: 1;\r\n\t\tposition: relative;\r\n    }\r\n    .main_left {\r\n        width: 50%;\r\n        height: 100%;\r\n        z-index: 1;\r\n    }\r\n   .main_left > p,\r\n    .main_right > p  {\r\n        text-align: center;\r\n        color: white;\r\n        font-weight: bold;\r\n    }\r\n     .main_left > p:first-child {\r\n         font-size: 60px;\r\n         margin: 0;\r\n         margin-top: 350px;\r\n     }\r\n     .main_left > p:nth-child(2) {\r\n         font-size: 20px;\r\n         margin: 0;\r\n         font-weight: bold;\r\n     }\r\n     .main_left > p:nth-child(3) {\r\n         font-size: 20px;\r\n         margin: 0;\r\n         margin-top: 50px;\r\n         font-weight: bold;\r\n     }\r\n     .overlay {\r\n         position: absolute;\r\n         background-color: black;\r\n         opacity: 0.5;\r\n         top: 0;\r\n         left: 0;\r\n         width: 100%;\r\n         height: 100vh;\r\n     }\r\n\r\n     .pages {\r\n         height: 100vh;\r\n         width: 100%;\r\n         position: absolute;\r\n         overflow: hidden;\r\n     }\r\n     .page {\r\n         height: 100%;\r\n         width: 100%;\r\n         position: absolute;\r\n         top: 100%;\r\n         transition: top .7s;\r\n     \r\n         background-attachment: fixed;\r\n         background-position: center;\r\n         background-repeat: no-repeat;\r\n         background-size: cover;\r\n     }\r\n     .first {\r\n         top: 0;\r\n         background-image: url('${cpath}/resources/image/배경최종.jpg');\r\n         animation: moveBackground 5s linear forwards;\r\n     }\r\n     .second {\r\n         background-color: white;\r\n     }\r\n     .third {\r\n     \t background-image: url(\"${cpath}/resources/image/배경실험용2.jpg\");\r\n     \t width: 100%;\r\n     \t height: 100%;\r\n         color: white;\r\n     }\r\n     .fourth {\r\n     \twidth: 100%;\r\n     \theight: 50vh;\r\n     }\r\n     .pagination {\r\n         position: absolute;\r\n         display: flex;\r\n         left: 50%;\r\n         top: 0%;\r\n         transform: translateX(-50%);\r\n         z-index: 100;\r\n     }\r\n     .pagination>li {\r\n     \t margin: 5px;\r\n         list-style: none;\r\n         height: 10px;\r\n         width: 10px;\r\n         background: #999999;\r\n         border-radius: 50%;\r\n         margin-top: 10px;\r\n         transition: background .7s;\r\n     }\r\n     .pagination>li.active {\r\n         background: #ffffff;\r\n     }\r\n\r\n\t/*  2번째 페이지  */\r\n     .categoryComment {\r\n         margin-left: 50px;\r\n         font-size: 100px;\r\n         font-weight: bold;\r\n         color: black;\r\n     }\r\n     .categoryComment p {\r\n         margin: 0;\r\n         margin-top: 45px;\r\n     }\r\n     .slideWrap {\r\n         display: flex;\r\n         position: relative;\r\n         height: 300px;\r\n         overflow: hidden;\r\n     }\r\n     .slideWrap:nth-child(2) {\r\n         margin-top: 70px;\r\n     }\r\n     .slideWrap .imgSlide {\r\n         display: flex;\r\n         align-items: center;\r\n         justify-content: space-between;\r\n         padding-left: 0;\r\n     }\r\n     .slideWrap .imgSlide.original {\r\n         animation: 50s linear 0s infinite normal forwards running slide01;\r\n     }\r\n     .slideWrap .imgSlide.clone {\r\n         animation: 50s linear 0s infinite normal none running slide02;\r\n     }\r\n     .slideWrap .imgSlide li {\r\n         position: relative;\r\n         width: 250px;\r\n         height: 250px;\r\n         line-height: 200px;\r\n         margin-right: 20px;\r\n         background-color: #ccc;\r\n         text-align: center;\r\n         list-style: none;\r\n         border-radius: 30px;\r\n         cursor: pointer;\r\n     }\r\n     .imgSlide img {\r\n         width: 250px;\r\n         height: 250px;\r\n         border-radius: 25px;\r\n     }\r\n     .categoryOverlay {\r\n         position: absolute; /* 절대 위치 설정 */\r\n         top: 0; \r\n         left: 0;\r\n         width: 100%;\r\n         height: 100%;\r\n         background-color: rgba(0, 0, 0, 0.4);\r\n         border-radius: 25px;\r\n     }\r\n     .imgSlide h4 {\r\n         position: absolute;\r\n         bottom: 10px;\r\n         left: 20px;\r\n         font-size: 25px;\r\n         color: white;\r\n         line-height: normal;\r\n         font-weight: bold;\r\n     }\r\n\r\n     @keyframes slide01 {\r\n         0% { transform: translateX(0);}\r\n         50% { transform: translateX(-100%);}\r\n         50.01% { transform: translateX(100%);}\r\n         100% { transform: translateX(0);}\r\n     }\r\n     @keyframes slide02 {\r\n         0% {transform: translateX(0);}\r\n         100% {transform: translateX(-200%);}\r\n     }\r\n     \r\n\t/* 3번째 페이지 */\r\n/*     .thirdPageOverlay { */\r\n/*     \twidth: 100%; */\r\n/*     \theight: 100%; */\r\n/*     \ttop: 0; */\r\n/*     \tleft: 0; */\r\n/*     \tbackground-color: black; */\r\n/*     \tposition: absolute; */\r\n/*     \topacity: 0.5; */\r\n/*     } */\r\n/*     응급실 스타일 */\r\n    .rollerWrap {\r\n\t\tposition: absolute;\r\n\t\tbottom: 0px;\r\n        border: 1px solid;\r\n        display: flex;\r\n        overflow: hidden;\r\n    }\r\n     .rollerWrap a{\r\n     \tcolor : blue;\r\n     }\r\n    .rolling-list ul {\r\n        padding: 0;\r\n        display: flex;\r\n        margin: 0;\r\n    }\r\n    .rolling-list ul li {\r\n        box-sizing: border-box;\r\n        display: flex;\r\n        align-items: center;\r\n        flex-shrink: 0;\r\n        padding: 10px;\r\n        border-right: 1px solid #ddd;\r\n        min-width: 200px;\r\n    }\r\n    .rolling-list.original {\r\n        animation: rollingleft1 1500s linear infinite;\r\n    }\r\n    .rolling-list.clone {\r\n        animation: rollingleft2 1500s linear infinite;\r\n    }\r\n    @keyframes rollingleft1 {\r\n        0% { transform: translateX(0); }\r\n        50% { transform: translateX(-100%); }\r\n        50.01% { transform: translateX(100%); }\r\n        100% { transform: translateX(0); }\r\n    }\r\n    @keyframes rollingleft2 {\r\n        0% { transform: translateX(0); }\r\n        100% { transform: translateX(-200%); }\r\n    }\r\n\r\n    .region-seoul { background-color: #ffebee; color: #c62828; }\r\n    .region-gyeonggi { background-color: #e3f2fd; color: #1565c0; }\r\n    .region-incheon { background-color: #f1f8e9; color: #2e7d32; }\r\n    .region-busan { background-color: #e0f7fa; color: #006064; }\r\n    .region-daegu { background-color: #fbe9e7; color: #bf360c; }\r\n    .region-daejeon { background-color: #e8eaf6; color: #303f9f; }\r\n    .region-gwangju { background-color: #f3e5f5; color: #6a1b9a; }\r\n    .region-ulsan { background-color: #e0f2f1; color: #004d40; }\r\n    .region-sejong { background-color: #ffecb3; color: #ff6f00; }\r\n    .region-gangwon { background-color: #fff3e0; color: #e65100; }\r\n    .region-chungbuk { background-color: #f0f4c3; color: #827717; }\r\n    .region-chungnam { background-color: #f9fbe7; color: #33691e; }\r\n    .region-jeonbuk { background-color: #ffe0b2; color: #e64a19; }\r\n    .region-jeonnam { background-color: #d7ccc8; color: #5e403a; }\r\n    .region-gyeongbuk { background-color: #c8e6c9; color: #2e7d32; }\r\n    .region-gyeongnam { background-color: #ffccbc; color: #d84315; }\r\n    .region-jeju { background-color: #dcedc8; color: #558b2f; }\r\n    .region-etc { background-color: #e0e0e0; color: #616161; }\r\n\r\n</style>\r\n\r\n<%--검색어 순위 스타일--%>\r\n<style>\r\n\t.ranking-list {\r\n\t\tposition:absolute;\r\n\t\ttop: 56%;\r\n\t\tleft: 4%;\r\n\t\tlist-style: none;\r\n\t\tpadding: 0;\r\n\t\tmargin: 0;\r\n\t\theight: 30px;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.ranking-item {\r\n\t\twidth: 300px;\r\n\t\tpadding: 5px 0;\r\n\t\tfont-size: 18px;\r\n\t\tcolor: white;\r\n\t\tcursor: pointer;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t}\r\n\r\n\r\n\t.ranking-index {\r\n\t\tfont-weight: bold;\r\n\t\tcolor: white;\r\n\t\tmargin-right: 60px;\r\n\t\twidth: 20px;\r\n\t}\r\n\r\n\t.ranking-text {\r\n\t\tflex-grow: 1;\r\n\t}\r\n\r\n\t.ranking-count {\r\n\t\tcolor: red;\r\n\t\tfont-weight: bold;\r\n\t\tfont-size: 12px;\r\n\t}\r\n\r\n\t.ranking-list.expanded {\r\n\t\theight: auto;\r\n\t}\r\n</style>\r\n\r\n<%--검색창 스타일--%>\r\n<style>\r\n\t.input-group {\r\n\t\tbackground-color: white; /* 배경색 */\r\n\t\tdisplay: flex; /* 플렉스 박스 사용 */\r\n\t\talign-items: center; /* 수직 중앙 정렬 */\r\n\t\tpadding: 10px; /* 패딩 */\r\n\t\tborder: 2px solid #ddd; /* 테두리 색상 */\r\n\t\tborder-radius: 40px; /* 둥근 모서리 */\r\n\t\tmargin-top: 430px; /* 상단 여백 */\r\n\t\tposition: absolute;\r\n\t\twidth: 70%;\r\n\t}\r\n\r\n\t.search-buttons {\r\n\t\tmargin-right: 10px; /* 버튼과 입력 필드 간의 간격 */\r\n\t}\r\n\r\n\t.search-form {\r\n\t\tdisplay: flex; /* 플렉스 박스 사용 */\r\n\t\talign-items: center; /* 수직 중앙 정렬 */\r\n\t\tflex-grow: 1; /* 남은 공간 차지 */\r\n\t\tmargin: 0;\r\n\t}\r\n\r\n\t#searchInput {\r\n\t\tflex-grow: 1; /* 입력 필드가 가능한 공간을 모두 차지하도록 설정 */\r\n\t\tpadding: 10px; /* 패딩 */\r\n\t\tborder: 1px solid #ddd; /* 테두리 색상 */\r\n\t\tborder-radius: 20px; /* 둥근 모서리 */\r\n\t}\r\n\t.select-wrap {\r\n\t\twidth: 120px; /* 셀렉트 박스의 너비 설정 */\r\n\t\theight: 40px; /* 셀렉트 박스의 높이 설정 */\r\n\t\tborder: 1px solid #ccc; /* 테두리 색상 */\r\n\t\tborder-radius: 40px 40px 40px 40px;\r\n\t\tbackground: url('${cpath}/resources/image/try-me.gif') no-repeat 97% 50% / 25px auto; /* 화살표 이미지 지정 */\r\n\t}\r\n\r\n\t/* select 스타일 */\r\n\t#searchTypeSelect {\r\n\t\twidth: 100%; /* 전체 너비 사용 */\r\n\t\theight: 100%; /* 전체 높이 사용 */\r\n\t\tpadding: 0 28px 0 10px; /* 패딩 설정 (오른쪽, 왼쪽) */\r\n\t\tfont-size: 15px; /* 폰트 크기 설정 */\r\n\t\tborder: 0; /* 기본 스타일 제거 */\r\n\r\n\t\t-webkit-appearance: none; /* Chrome에서 기본 화살표 제거 */\r\n\t\t-moz-appearance: none; /* Firefox에서 기본 화살표 제거 */\r\n\t\tappearance: none; /* 모든 브라우저에서 기본 화살표 제거 */\r\n\r\n\t\tbox-sizing: border-box; /* 셀렉트 박스의 크기 방식 지정 */\r\n\t\tbackground: transparent; /* 배경색 투명 처리 */\r\n\t}\r\n\r\n\tselect::-ms-expand {\r\n\t\tdisplay: none; /* IE10,11에서 기본 화살표 숨기기 */\r\n\t}\r\n\r\n\tbutton.search {\r\n\t\tpadding: 10px 15px;\r\n\t\tborder: none;\r\n\t\tborder-radius: 20px;\r\n\t\tbackground-color: #2c3e50;\r\n\t\tcolor: white;\r\n\t\tcursor: pointer;\r\n\t\tmargin: 10px;\r\n\t}\r\n\r\n\tbutton:hover {\r\n\t\tbackground-color: #34495e; /* 호버 시 어두운 파란색 */\r\n\t}\r\n</style>\r\n\r\n<%--지도모달 마커 스타일--%>\r\n<style>\r\n\t.infoMapListContent , .infoMapContent{\r\n\t\tpadding: 10px;\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tfont-size: 14px;\r\n\t\tmax-width: 300px; /* 인포윈도우 크기 제한 */\r\n\t\tword-wrap: break-word; /* 텍스트가 길어질 경우 줄바꿈 */\r\n\t}\r\n\r\n\t/* 병원 이름 링크 스타일 */\r\n\t.hospitalNameLink {\r\n\t\tfont-weight: bold;\r\n\t\tfont-size: 16px;\r\n\t\tcolor: #0077cc;\r\n\t\ttext-decoration: none; /* 링크 밑줄 제거 */\r\n\t}\r\n\r\n\t.hospitalNameLink:hover {\r\n\t\ttext-decoration: underline; /* 링크에 마우스를 올리면 밑줄 표시 */\r\n\t}\r\n\r\n\t/* 주소 스타일 */\r\n\t.hospitalAddress {\r\n\t\tmargin-top: 8px;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #333;\r\n\t}\r\n\r\n\t/* 전화번호 스타일 */\r\n\t.hospitalPhone {\r\n\t\tmargin-top: 5px;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #333;\r\n\t}\r\n\t/* 닫기 버튼 스타일 */\r\n\t.close-btn {\r\n\t\tposition: absolute;\r\n\t\ttop: 10px;\r\n\t\tright: 10px;\r\n\t\tbackground-color: #f44336; /* 빨간색 */\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\tpadding: 10px 15px;\r\n\t\tfont-size: 16px;\r\n\t\tcursor: pointer;\r\n\t\tborder-radius: 5px;\r\n\t\ttransition: background-color 0.3s;\r\n\t}\r\n\r\n\t/* 닫기 버튼에 마우스 오버 시 색상 변경 */\r\n\t.close-btn:hover {\r\n\t\tbackground-color: #e53935;\r\n\t}\r\n\r\n</style>\r\n\r\n<!-- 헤더 스타일 -->\r\n<style>\r\n\t/*    챗봇 아이콘 */\r\n        #chat_icon img {\r\n            position: fixed;\r\n            right: 50px;\r\n            bottom: 50px;\r\n        }\r\n\r\n        /*   민재 파트 (홈 검색 기능) */\r\n\r\n\r\n        #mapModal {\r\n            z-index: 4;\r\n            width: 100%;\r\n            height: 100%;\r\n            display: none; /* 기본적으로 숨김 */\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            background-color: rgba(0, 0, 0, 0.7); /* 반투명 검은색 배경 */\r\n        }\r\n\r\n        #mapModal.show {\r\n            display: block;\r\n        }\r\n\r\n        #mapModal > .content {\r\n            border: 2px solid grey;\r\n            background-color: white;\r\n            position: fixed;\r\n            width: 80%; /* 모달 너비 설정 */\r\n            max-width: 1000px; /* 최대 너비 */\r\n            height: 80%; /* 모달 높이 설정 */\r\n            max-height: 500px; /* 최대 높이 */\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            display: flex; /* 지도와 리스트를 가로로 나란히 배치 */\r\n            flex-direction: row; /* 가로 배치 */\r\n            border-radius: 25px;\r\n            box-shadow: 10px 10px 10px grey;\r\n        }\r\n\r\n\r\n        #hospitalList {\r\n            list-style-type: none;\r\n            padding:50px 10px;\r\n            overflow-y: auto;\r\n            margin: 0;\r\n            max-height: 100%; /* 리스트가 모달 높이에 맞게 늘어나도록 설정 */\r\n            width: 30%; /* 리스트 영역을 지도 옆에 붙게 설정 */\r\n            background-color: rgba(255, 255, 255, 0.4); /* 투명한 배경 설정 (투명도 높임) */\r\n            opacity: 0.8;\r\n            border-radius: 10px;\r\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); /* 그림자 효과 */\r\n            position: relative; /* 부모 요소에 맞춰 위치 */\r\n        }\r\n        #hospitalList::-webkit-scrollbar {\r\n            display: none;\r\n        }\r\n        .hospital-list li {\r\n            margin: 5px 0;\r\n            cursor: pointer;\r\n            padding: 5px;\r\n            border: 1px solid #ccc;\r\n            border-radius: 5px;\r\n            transition: background-color 0.3s;\r\n        }\r\n\r\n        .hospital-list li:hover {\r\n            background-color: #e9ecef; /* 마우스 오버 시 배경색 변경 */\r\n        }\r\n\r\n\r\n        #map2 {\r\n            width: 70%; /* 지도 영역 크기 */\r\n            height: 100%;\r\n            position: relative;\r\n        }\r\n\r\n\r\n\r\n        .hospital-list li.selected {\r\n            background-color: #007bff; /* 선택된 항목 배경색 */\r\n            color: white; /* 선택된 항목 글자색 */\r\n            font-weight: bold; /* 선택된 항목 글씨 진하게 */\r\n        }\r\n        .bookingModal {\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            z-index: 1000;\r\n        }\r\n\r\n        .hidden {\r\n            display: none!important;\r\n        }\r\n\r\n\r\n        .bookingOverlay {\r\n            position: absolute;\r\n            width: 100%;\r\n            height: 100%;\r\n            background-color: rgba(0, 0, 0, 0.5); /* 반투명한 검은색 배경 */\r\n        }\r\n\r\n        .bookingContent {\r\n            position: relative;\r\n            background-color: white;\r\n            padding: 30px;\r\n            border-radius: 15px;\r\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n            z-index: 5;\r\n            max-width: 500px;\r\n            width: 90%;\r\n            max-height: 80vh;\r\n            overflow-y: auto;\r\n            scrollbar-width: none; /* Firefox */\r\n            -ms-overflow-style: none; /* Internet Explorer 10+ */\r\n        }\r\n\r\n        .bookingContent::-webkit-scrollbar {\r\n            display: none; /* WebKit */\r\n        }\r\n\r\n        .bookingTitle {\r\n            font-size: 24px;\r\n            color: #2c3e50;\r\n            text-align: center;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .bookingDetail {\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        #bookingInsertForm input[type=\"datetime-local\"],\r\n        #bookingUpdateForm input[type=\"datetime-local\"] {\r\n            width: 100%;\r\n            padding: 5px;\r\n            border: 1px solid #ddd;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n            color: #333;\r\n        }\r\n\r\n        #bookingInsertForm input[type=\"submit\"],\r\n        #bookingUpdateForm input[type=\"submit\"] {\r\n            width: 100%;\r\n            padding: 12px;\r\n            background-color: #2c3e50;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 8px;\r\n            font-size: 18px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            transition: background-color 0.3s ease;\r\n        }\r\n\r\n        #bookingInsertForm input[type=\"submit\"]:hover,\r\n        #bookingUpdateForm input[type=\"submit\"]:hover {\r\n            background-color: #34495e;\r\n        }\r\n\r\n        #closeBookingBtn ,#closeMapModalBtn{\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 10px;\r\n            background-color: #e74c3c;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 5px;\r\n            padding: 5px 10px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            transition: background-color 0.3s ease, transform 0.2s ease;\r\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        #closeBookingBtn:hover ,#closeMapModalBtn:hover{\r\n            background-color: #c0392b;\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\r\n        }\r\n\r\n        #closeBookingBtn:active {\r\n            transform: translateY(0);\r\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        /* 애니메이션 효과 */\r\n        @keyframes fadeIn {\r\n            from { opacity: 0; transform: translateY(-20px); }\r\n            to { opacity: 1; transform: translateY(0); }\r\n        }\r\n\r\n        .bookingContent {\r\n            animation: fadeIn 0.3s ease-out;\r\n        }\r\n\r\n        /* 반응형 디자인을 위한 미디어 쿼리 */\r\n        @media (max-width: 600px) {\r\n            .bookingContent {\r\n                padding: 25px;\r\n                width: 95%;\r\n            }\r\n\r\n            .bookingTitle {\r\n                font-size: 20px;\r\n            }\r\n        }\r\n\r\n\r\n        #notificationPaging {\r\n            justify-content: space-between;\r\n            display: flex;\r\n        }\r\n\r\n        #notificationCountSpan {\r\n            position: absolute;\r\n            top: -5px;\r\n            right: -5px;\r\n            background-color: red;\r\n            color: white;\r\n            border-radius: 50%;\r\n            padding: 2px 6px;\r\n            font-size: 12px;\r\n        }\r\n\r\n        #myFavoritesPaging {\r\n            justify-content: space-between;\r\n            display: flex;\r\n        }\r\n        a {\r\n            color: inherit;\r\n            text-decoration: none;\r\n        }\r\n        /* 최근 본 병원 스타일 */\r\n        #recentHospitalsContainer {\r\n            width: 180px; /* 컨테이너 너비를 조금 더 줄임 */\r\n            position: fixed; /* 화면에 고정 */\r\n            top: 80px; /* 상단에서 80px 떨어지게 위치 */\r\n            right: 20px; /* 화면 오른쪽에 위치 */\r\n            background-color: #f9f9f9;\r\n            padding: 10px;\r\n            border-radius: 8px; /* 카드와 동일하게 둥글게 */\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n            z-index: 2; /* 다른 콘텐츠 위에 표시 */\r\n            max-height: 75vh; /* 화면 높이에 맞게 제한 */\r\n            overflow-y: hidden; /* 스크롤 숨기기 */\r\n            border: 1px solid #e0e0e0; /* 약간의 테두리로 강조 */\r\n        }\r\n\r\n        #recentHospitalsContainer h2 {\r\n            font-size: 18px; /* 제목 크기 약간 줄임 */\r\n            font-weight: bold;\r\n            margin-bottom: 10px; /* 여백 줄이기 */\r\n            color: #333;\r\n            text-align: center;\r\n        }\r\n\r\n        .recent-hospitals {\r\n            display: flex;\r\n            flex-direction: column; /* 세로로 정렬 */\r\n            gap: 8px; /* 카드 간격을 조금 줄임 */\r\n            max-height: 70vh; /* 내용이 많으면 더 이상 스크롤되지 않게 */\r\n        }\r\n\r\n        .hospital-card {\r\n            width: 100%; /* 카드가 컨테이너에 맞게 꽉 차게 */\r\n            background-color: #fff;\r\n            border-radius: 6px; /* 카드 모서리 둥글게 */\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n            overflow: hidden;\r\n            transition: transform 0.3s ease-in-out;\r\n            display: flex;\r\n            flex-direction: column;\r\n            margin: 10px 0px;\r\n        }\r\n\r\n        .hospital-card:hover {\r\n            transform: scale(1.03); /* 카드 호버시 확대 효과 */\r\n        }\r\n\r\n        .recentHospital-image {\r\n            width: 100%;\r\n            height: 100px; /* 이미지 크기를 조금 더 줄임 */\r\n            object-fit: cover; /* 이미지 비율 유지하면서 잘리도록 설정 */\r\n        }\r\n\r\n        .recentHospital-info {\r\n            padding: 8px; /* 패딩을 줄여서 내용 영역을 더 좁게 */\r\n            font-size: 13px; /* 폰트 크기 좀 더 줄임 */\r\n        }\r\n\r\n        .hospital-name {\r\n            font-size: 14px; /* 병원 이름 폰트 크기 더 줄임 */\r\n            font-weight: bold;\r\n            margin-bottom: 5px;\r\n            color: #007bff;\r\n            white-space: nowrap; /* 텍스트가 한 줄로 나오도록 */\r\n            overflow: hidden;\r\n            text-overflow: ellipsis; /* 긴 이름은 ... 으로 표시 */\r\n        }\r\n\r\n        .loginIcon ,.loginIcon2 {\r\n            background-image: url('${cpath}/resources/image/로그인아이콘최종.png');\r\n            position: absolute;\r\n            width: 30px;\r\n            height: 30px;\r\n            top: 30px;\r\n            right: 30px;\r\n            background-size: cover;\r\n            cursor: pointer;\r\n        }\r\n        .notificationIcon {\r\n            background-image: url('${cpath}/resources/image/알림.png');\r\n            position: absolute;\r\n            width: 27px;\r\n            height: 27px;\r\n            top: 33px;\r\n            right: 150px;\r\n            background-size: cover;\r\n        }\r\n        .healthInfoIcon {\r\n        \tbackground-image: url('${cpath}/resources/image/건강정보.png');\r\n            position: absolute;\r\n            width: 30px;\r\n            height: 30px;\r\n            top: 31px;\r\n            right: 90px;\r\n            background-size: cover;\r\n        }\r\n        .myFavoritesIcon{\r\n            background-image: url('${cpath}/resources/image/즐겨찾기.png');\r\n            position: absolute;\r\n            width: 30px;\r\n            height: 30px;\r\n            top: 31px;\r\n            right: 205px;\r\n            background-size: cover;\r\n        }\r\n        \r\n    </style>\r\n\r\n<%--    알림 메시지 스타일--%>\r\n        <style>\r\n            /* 알림 테이블 스타일 */\r\n            #notificationTable {\r\n                width: 100%;\r\n                border-collapse: collapse;\r\n                margin-top: 20px;\r\n                box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n            }\r\n\r\n            #notificationTable th, #notificationTable td {\r\n                padding: 12px 15px;\r\n                text-align: left;\r\n                border-bottom: 1px solid #e0e0e0;\r\n            }\r\n\r\n            #notificationTable th {\r\n                background-color: #f8f8f8;\r\n                font-weight: bold;\r\n                color: #333;\r\n            }\r\n\r\n            /* 읽지 않은 알림 스타일 */\r\n            #notificationTable th[style*=\"background-color: lightskyblue\"] {\r\n                background-color: #e3f2fd;\r\n                font-weight: bold;\r\n            }\r\n\r\n            /* 알림 삭제 버튼 스타일 */\r\n            .notificationDeleteBtn {\r\n                padding: 6px 12px;\r\n                background-color: #ff4d4d;\r\n                color: white;\r\n                border: none;\r\n                border-radius: 4px;\r\n                cursor: pointer;\r\n                transition: background-color 0.3s;\r\n            }\r\n\r\n            .notificationDeleteBtn:hover  {\r\n                background-color: #ff3333; /* 삭제 버튼의 호버 효과는 유지 */\r\n            }\r\n\r\n            /* 페이징 스타일 */\r\n            #notificationPaging {\r\n                display: flex;\r\n                justify-content: space-around;\r\n                margin-top: 20px;\r\n                margin-bottom: 20px;\r\n            }\r\n\r\n            #notificationPaging td {\r\n                padding: 8px 12px;\r\n                margin: 0 5px;\r\n                cursor: pointer;\r\n                border: 1px solid #ddd;\r\n                border-radius: 4px;\r\n            }\r\n\r\n            /* 현재 페이지 강조 스타일 */\r\n            #notificationPaging td[style*=\"font-weight: bold\"] {\r\n                background-color: #007bff; /* 강조 색상 */\r\n                color: white; /* 강조 색상에서의 글자 색상 */\r\n            }\r\n\r\n            /* '이전'과 '다음' 버튼 스타일 */\r\n            #notificationPaging td:first-child,\r\n            #notificationPaging td:last-child {\r\n                background-color: #f8f9fa; /* 기본 배경색 */\r\n                font-weight: bold; /* 두꺼운 폰트 */\r\n            }\r\n\r\n            /* 알림 없음 메시지 스타일 */\r\n            #notificationTableBody:empty::before {\r\n                content: '알림이 없습니다.';\r\n                display: block;\r\n                text-align: center;\r\n                padding: 20px;\r\n                color: #666; /* 회색 글자 색상 */\r\n                font-style: italic; /* 이탤릭체 */\r\n            }\r\n\r\n            /* 알림 셀 스타일 */\r\n            .notification-cell {\r\n                padding: 15px; /* 패딩 */\r\n                border-bottom: 1px solid #ddd; /* 하단 테두리 */\r\n            }\r\n\r\n            /* 알림 내용 스타일 */\r\n            .notification-content {\r\n                display: flex; /* 플렉스 박스 사용 */\r\n                flex-direction: column; /* 세로 방향 정렬 */\r\n            }\r\n\r\n            /* 날짜 및 이름 강조 스타일 */\r\n            .notification-date {\r\n                font-size: 0.9em; /* 폰트 크기 조정 */\r\n                color: #666; /* 회색 글자 색상 */\r\n            }\r\n\r\n            .notification-name {\r\n                font-weight: bold; /* 두꺼운 폰트 */\r\n                color: #333; /* 어두운 글자 색상 */\r\n            }\r\n\r\n            /* 메시지 스타일 */\r\n            .notification-message {\r\n                font-size: 1em; /* 기본 폰트 크기 */\r\n                color: #444; /* 어두운 회색 글자 색상 */\r\n            }\r\n\r\n            /* '일괄 삭제하기' 버튼 스타일 */\r\n            #deleteNotificationAllBtn {\r\n                margin: 10px 10px;\r\n                padding: 10px 20px;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                background-color: #ff4d4d;\r\n                color: white;\r\n                border: none;\r\n                border-radius: 8px;\r\n                cursor: pointer;\r\n                transition: background-color 0.3s ease, transform 0.2s ease;\r\n            }\r\n\r\n            /* '일괄 삭제하기' 버튼 호버 및 클릭 효과 */\r\n            #deleteNotificationAllBtn:hover {\r\n                background-color: #ff3333; /* 호버 시 배경색 */\r\n            }\r\n    </style>\r\n\r\n<%--    즐겨찾기 스타일--%>\r\n    <style>\r\n        #myFavoritesTable {\r\n            width: 500px;\r\n            border-collapse: collapse;\r\n            margin-top: 20px;\r\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n\r\n        }\r\n\r\n        #myFavoritesTable th, #myFavoritesTable td {\r\n            text-align: center;\r\n            border-bottom: 1px solid #e0e0e0;\r\n        }\r\n        #myFavoritesTable th {\r\n            background-color: #f8f8f8;\r\n            font-weight: bold;\r\n            color: #333;\r\n            padding: 20px 0px;\r\n        }\r\n        /* 즐겨찾기 목록의 링크 스타일 */\r\n        #myFavoritesTable a {\r\n            color: #007bff; /* 링크 색상 */\r\n            text-decoration: none; /* 밑줄 제거 */\r\n        }\r\n        #myFavoritesTable th:nth-child(2){\r\n            width: 18%;\r\n            font-size: 14px;\r\n        }\r\n        #myFavoritesTable a:hover {\r\n            text-decoration: underline; /* 호버 시 밑줄 추가 */\r\n        }\r\n        /* 페이징 스타일 */\r\n        #myFavoritesPaging {\r\n            display: flex;\r\n            justify-content: space-around;\r\n            margin-top: 20px;\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        #myFavoritesPaging td {\r\n            padding: 8px 10px; /* 패딩 조정 (위아래 8px, 좌우 10px) */\r\n            margin: 0 5px; /* 좌우 여백 */\r\n            cursor: pointer; /* 커서 모양 변경 */\r\n            border: 1px solid #ddd; /* 테두리 색상 */\r\n            border-radius: 4px; /* 둥근 모서리 */\r\n            min-width: 40px; /* 최소 너비 설정 */\r\n            text-align: center; /* 텍스트 중앙 정렬 */\r\n        }\r\n\r\n        /* 현재 페이지 강조 스타일 */\r\n        #myFavoritesPaging td[style*=\"font-weight: bold\"] {\r\n            background-color: #007bff; /* 강조 색상 */\r\n            color: white; /* 강조 색상에서의 글자 색상 */\r\n        }\r\n\r\n        /* '이전'과 '다음' 버튼 스타일 */\r\n        #myFavoritesPaging td:first-child,\r\n        #myFavoritesPaging td:last-child {\r\n            background-color: #f8f9fa; /* 기본 배경색 */\r\n            font-weight: bold; /* 두꺼운 폰트 */\r\n        }\r\n        /* 알림 없음 메시지 스타일 */\r\n        #myFavoritesTableBody:empty::before {\r\n            content: '즐겨찾기 한 병원이 없습니다.';\r\n            display: block;\r\n            text-align: center;\r\n            padding: 20px;\r\n            color: #666; /* 회색 글자 색상 */\r\n            font-style: italic; /* 이탤릭체 */\r\n        }\r\n\r\n        /* 삭제 버튼 스타일 */\r\n        .myFavoritesDeleteBtn {\r\n            padding: 6px 12px;\r\n            background-color: #ff4d4d; /* 삭제 버튼 배경색 */\r\n            color: white; /* 버튼 텍스트 색상 */\r\n            border: none; /* 테두리 제거 */\r\n            border-radius: 4px; /* 버튼 모서리 둥글게 */\r\n            cursor: pointer; /* 클릭 가능 커서 */\r\n            transition: background-color 0.3s ease, transform 0.2s ease; /* 효과 */\r\n        }\r\n\r\n        .myFavoritesDeleteBtn:hover {\r\n            background-color: #ff3333; /* 호버 시 배경색 */\r\n        }\r\n\r\n        .myFavoritesDeleteBtn:active {\r\n            transform: scale(0.95); /* 클릭 시 버튼 크기 감소 */\r\n        }\r\n\r\n        /* '일괄 삭제하기' 버튼 스타일 */\r\n        #deleteMyFavoritesAllBtn {\r\n            margin: 10px 10px;\r\n            padding: 10px 20px;\r\n            font-size: 14px;\r\n            font-weight: bold;\r\n            background-color: #ff4d4d;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 8px;\r\n            cursor: pointer;\r\n            transition: background-color 0.3s ease, transform 0.2s ease;\r\n        }\r\n\r\n        #deleteMyFavoritesAllBtn:hover {\r\n            background-color: #ff3333;\r\n        }\r\n\r\n        #deleteMyFavoritesAllBtn:active {\r\n            transform: scale(0.95);\r\n        }\r\n    </style>\r\n    \r\n    <style>\r\n    \t/* footer */\r\n\t\t#footer {\r\n\t\t    position: relative;\r\n\t\t    width: 100%;\r\n\t\t    background-color: #587650;\r\n\t\t    padding: 20px;\r\n\t\t    color: white;\r\n\t\t    display: flex;\r\n\t\t}\r\n\t\tfooter p {\r\n\t\t    margin: 20px;\r\n\t\t    color: white;\r\n\t\t    font-weight: 400;\r\n\t\t    align-items: center;\r\n\t\t    line-height: 30px;\r\n\t\t    font-size: 20px;\r\n\t\t    font-family: \"Do Hyeon\", sans-serif;\r\n\t\t}\r\n\t\tfooter p:first-child {\r\n\t\t    padding-left: 50px;\r\n\t\t}\r\n\t\t.Right {\r\n\t\t    padding-right: 550px;\r\n\t\t}\r\n\t\t.icons {\r\n\t\t    display: flex;\r\n\t\t    margin: 20px;\r\n\t\t}\r\n\t\t.icons a {\r\n\t\t    width: 70px;\r\n\t\t    height: 70px;\r\n\t\t    border-radius: 50%;\r\n\t\t    font-size: 0;\r\n\t\t    display: block;\r\n\t\t    background-size: cover;\r\n\t\t    background-repeat: no-repeat;\r\n\t\t    background-position: center;\r\n\t\t    margin: 0 5px;\r\n\t\t}\r\n\t\t.icons a.icon_youtube {\r\n\t\t    background-image: url('${cpath}/resources/image/icon_youtube.svg');\r\n\t\t}\r\n\t\t.icons a.icon_instagram {\r\n\t\t    background-image: url('${cpath}/resources/image/icon_instagram.svg');\r\n\t\t}\r\n\t\t.icons a.icon_facebook {\r\n\t\t    background-image: url('${cpath}/resources/image/icon_facebook.svg');\r\n\t\t}\r\n\t\t.logo img {\r\n\t\t\twidth: 146px;\r\n\t\t\theight: 145px;\r\n\t\t\tmargin-top: -32px;\r\n\t\t\tmargin-left: -33px;\r\n\t\t}\r\n\t\theader{\r\n            width: 100%;\r\n            height: 80px;\r\n            display: flex;\r\n            z-index: 100;\r\n            position: absolute;\r\n            left: 0;\r\n            top: 0;\r\n        }\r\n    </style>\r\n\r\n<!-- 즐겨찾기 테이블 -->\r\n<table id=\"myFavoritesTable\" class=\"hidden\">\r\n    <thead></thead>\r\n    <tbody></tbody>\r\n</table>\r\n\r\n<div class=\"pages\">\r\n   <div class=\"first page\">\r\n   \t\t<header>\r\n\t\t\t<div class=\"logo\">\r\n\t\t\t\t<a href=\"${cpath }\"><img src=\"${cpath }/resources/image/로고.png\"></a>\r\n\t\t\t</div>\r\n\t\t    <a href=\"${cpath }/healthInfo/healthInfo\">\r\n\t\t\t\t<div class=\"healthInfoIcon\"></div>\r\n\t\t\t</a>\r\n\t\t    <div class=\"-container\">\r\n\t\t        <c:if test=\"${empty login }\">\r\n\t\t        <div class=\"loginIcon\"></div>\r\n\t\t\t    </c:if>\r\n\t\t    </div>\r\n\t\t\r\n\t\t    <c:set var=\"default\" value=\"${cpath }/resources/image/default.png\" />\r\n\t\t    <c:if test=\"${not empty login }\">\r\n\t\t        <div class=\"header-right\">\r\n\t\t            <div class=\"loginIcon2\"></div>\r\n\t\t            <div class=\"notificationIcon\" id=\"notification\" data-page=\"1\"><span id=\"notificationCountSpan\" class=\"hidden\"></span></div>\r\n\t\t            <div class=\"myFavoritesIcon\" id=\"myFavorites\" data-page=\"1\"></div>\r\n\t\t            <span>${login.name }</span>\r\n\t\t            <a href=\"${cpath }/member/logout\"><button>로그아웃</button></a>\r\n\t\t\r\n\t\t        </div>\r\n\t\t    </c:if>\r\n\t\t</header>\r\n      <div class=\"overlay\"></div>\r\n      \r\n      <div class=\"main_left\">\r\n          <p>AMD, 세상의 모든 응급 검색</p>\r\n          <p>All Emergency Searches in the World</p>\r\n          <p>최신 IP정보를 수집하여<br>\r\n                  최적의 응급 정보와 전문 상담 서비스를 제공합니다.</p>\r\n      </div>\r\n      \r\n\t  <div class=\"main_right\">\r\n\t\t\r\n\t\t<div class=\"input-group\">\r\n\t\t\t<div class=\"search-buttons\">\r\n\t\t\t\t<div class=\"select-wrap\">\r\n\t\t\t\t\t<select id=\"searchTypeSelect\">\r\n\t\t\t\t\t\t<option value=\"search\">증상 검색</option>\r\n\t\t\t\t\t\t<option value=\"hospital\">병원명 검색</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<form id=\"searchForm\" class=\"search-form\" method=\"post\">\r\n\t\t\t\t<input type=\"text\" id=\"searchInput\" name=\"search\" placeholder=\"증상 또는 병명을 입력해주세요\" required>\r\n\t\t\t\t<button type=\"submit\" class=\"search\">검색</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t\t\r\n\t\t<p>\r\n\t\t<div class=\"ranking-container\">\r\n\t\t\t<ul id=\"rankingList\" class=\"ranking-list\">\r\n\t\t\t<c:forEach var=\"keyword\" items=\"${rankings}\" varStatus=\"status\">\r\n\t\t\t\t<li class=\"ranking-item\">\r\n\t\t\t\t\t<span class=\"ranking-index\">${status.index + 1}</span>\r\n\t\t\t\t\t<span class=\"ranking-text\">${keyword.keyword}</span>\r\n\t\t\t\t\t<span class=\"ranking-count\">${keyword.total_count}</span>\r\n\t\t\t\t</li>\r\n\t\t\t</c:forEach>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t\t</p>\r\n\r\n\t\t<!--예약 모달 -->\r\n<div id=\"bookingModal\" class=\"bookingModal hidden\" >\r\n    <div class=\"bookingOverlay\"></div>\r\n    <div class=\"bookingContent\">\r\n        <h3 class=\"bookingTitle\"></h3>\r\n        <div class=\"bookingDetail\"></div>\r\n        <button id=\"closeBookingBtn\">닫기</button>\r\n    </div>\r\n</div>\r\n\r\n<%-- 최근 본 병원 목록 표시 (로그인 후) --%>\r\n<c:if test=\"${not empty recentHospitals}\">\r\n<div id=\"recentHospitalsContainer\">\r\n    <h2>최근 본 병원</h2>\r\n    <div class=\"recent-hospitals\">\r\n        <c:forEach var=\"hospital\" items=\"${recentHospitals}\">\r\n            <a href=\"${cpath}/hospitalInfo/${hospital.id}\">\r\n                <div class=\"hospital-card\">\r\n                    <img src=\"${hospital.imageUrl}\" class=\"recentHospital-image\"/>\r\n                    <div class=\"recentHospital-info\">\r\n                        <h3 class=\"hospital-name\">${hospital.hospital_name}</h3>\r\n                    </div>\r\n                </div>\r\n            </a>\r\n        </c:forEach>\r\n    </div>\r\n</div>\r\n</c:if>\r\n\r\n<!-- 예약하기 입력 폼 -->\r\n<form id=\"bookingInsertForm\" class=\"hidden\">\r\n    <p><input type=\"hidden\" name=\"member_id\" value=\"${login.id }\"></p>\r\n    <p><input id=\"hospital_id\" type=\"hidden\" name=\"hospital_id\" value=\"${hospital.id }\"></p>\r\n    <p><input type=\"hidden\" name=\"status\" value=1></p>\r\n    <p><input id=\"booking_date\" type=\"datetime-local\" name=\"booking_date\"  value=\"${now }\" required></p>\r\n    <p><input type=\"submit\" value=\"예약하기\"></p>\r\n</form>\r\n\r\n<!-- 예약 변경 입력 폼 -->\r\n<form id=\"bookingUpdateForm\" class=\"hidden\">\r\n    <p><input type=\"hidden\" name=\"member_id\" value=\"${login.id }\"></p>\r\n    <p><input id=\"hospital_id\" type=\"hidden\" name=\"hospital_id\" value=\"${hospital.id }\"></p>\r\n    <p><input id=\"booking_date\" type=\"datetime-local\" name=\"booking_date\" required><p>\r\n    <p><input type=\"submit\" value=\"예약변경\"></p>\r\n</form>\r\n\r\n<!-- 알림 정보 테이블 -->\r\n<table id=\"notificationTable\" class=\"hidden\">\r\n    <thead></thead>\r\n    <tbody></tbody>\r\n</table>\r\n\r\n\t\t</div>\t<!-- main_right 종료 -->\r\n\t</div>\t<!-- 첫번째 페이지 종료 -->\r\n   \r\n    <div class=\"second page\">\r\n        <div class=\"categoryComment\">\r\n            <p>CATEGORY</p>\r\n        </div>\r\n       \t<div class=\"slideWrap\">\r\n\t\t    <ul class=\"imgSlide\">\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/23\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/가정의학과.avif\" alt=\"가정의학과\">\r\n\t\t                <h4>가정의학과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/searchLocation/8\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/성형외과.jpg\" alt=\"성형외과\">\r\n\t\t                <h4>성형외과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/14\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/피부과.avif\" alt=\"피부과\">\r\n\t\t                <h4>피부과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/80\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/한의원.avif\" alt=\"한의원\">\r\n\t\t                <h4>한의원</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/15\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/비뇨기과.avif\" alt=\"비뇨기과\">\r\n\t\t                <h4>비뇨기과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/10\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/산부인과.jpg\" alt=\"산부인과\">\r\n\t\t                <h4>산부인과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/1\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/내과.avif\" alt=\"내과\">\r\n\t\t                <h4>내과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/3\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/정신과.jpg\" alt=\"정신건강의학과\">\r\n\t\t                <h4>정신건강의학과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t    </ul>\r\n\t\t</div>\t\t<!-- 첫번째 줄 리스트 종료 -->\r\n\r\n\t\t<div class=\"slideWrap\">\r\n\t\t    <ul class=\"imgSlide\">\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/49\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/치과.avif\" alt=\"치과\">\r\n\t\t                <h4>치과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/12\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/안과.avif\" alt=\"안과\">\r\n\t\t                <h4>안과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/13\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/이비인후과.jpg\" alt=\"이비인후과\">\r\n\t\t                <h4>이비인후과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/5\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/정형외과.jpg\" alt=\"정형외과\">\r\n\t\t                <h4>정형외과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/21\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/재활의학과.jpg\" alt=\"재활의학과\">\r\n\t\t                <h4>재활의학과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/6\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/신경외과.jpg\" alt=\"신경외과\">\r\n\t\t                <h4>신경외과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/9\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/마취통증의학과.avif\" alt=\"마취통증의학과\">\r\n\t\t                <h4>마취통증의학과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/4\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/외과.avif\" alt=\"외과\">\r\n\t\t                <h4>외과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/2\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/신경과.jpg\" alt=\"신경과\">\r\n\t\t                <h4>신경과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/16\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/영상의학과.jpg\" alt=\"영상의학과\">\r\n\t\t                <h4>영상의학과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t        <li>\r\n\t\t            <a href=\"${cpath}/hospital/selectLocation/11\">\r\n\t\t                <div class=\"categoryOverlay\"></div>\r\n\t\t                <img src=\"${cpath}/resources/category/소아과.jpg\" alt=\"소아과\">\r\n\t\t                <h4>소아과</h4>\r\n\t\t            </a>\r\n\t\t        </li>\r\n\t\t    </ul>\r\n\t\t</div>\t<!-- 2번째줄 리스트 종료 -->\r\n       \r\n   </div> \t<!-- 2번째 페이지 종료 -->\r\n\r\n\t<div class=\"third page\">\r\n\t\t<div class=\"thirdPageOverlay\"></div>\r\n\t\t<p>About us</p>\r\n\t\t<div class=\"rollerWrap\">\r\n\t\t\t<div class=\"rolling-list\" id=\"roller1\">\r\n\t\t\t\t<ul id=\"emergencyList\"></ul>\r\n\t\t\t</div>\r\n\t\t</div>\r\n    \r\n\t</div>\t<!-- 3번째 페이지 종료 -->\r\n\t\r\n\t<div class=\"fourth page\">\r\n\t\t<footer id=\"footer\">\r\n\t\t\t<p>\r\n\t\t\t   사업자: 민재컴퍼니 | 대표자: 지민재<br>\r\n\t\t\t    사업자등록번호: 000-00-000000<br>\r\n\t\t\t    통신판매업신고번호 : 제2024-부산해운대-00001호<br>\r\n\t\t\t   주소 : 부산 해운대구 센텀2로 25<br>\r\n\t\t\t   개인정보관리자 : 이호준<br>\r\n\t\t\t   문의번화번호 : 000-0000-0000\r\n\t\t\t</p>\r\n\t\t\t<div class=\"footerRight\">\r\n\t\t\t   <div class=\"icons\">\r\n\t\t\t      <a class=\"icon_youtube\"></a>\r\n\t\t\t      <a class=\"icon_instagram\"></a>\r\n\t\t\t      <a class=\"icon_facebook\"></a>\r\n\t\t\t   </div>\r\n\t\t\t   <p>\r\n\t\t\t      Copyright©ApuziMapsidak Inc. All rights reserved.<br>\r\n\t\t\t      개인정보 처리 방침 | 사이트 이용약관 | 이메일무단수집거부\r\n\t\t\t   </p>\r\n\t\t\t</div>\r\n\t\t</footer>\r\n\t</div>\r\n</div>\r\n\r\n\t\t\r\n    \r\n\r\n  \r\n\r\n\r\n<ul class=\"pagination\">\r\n</ul>\r\n<div class=\"backImage\">\r\n</div>\r\n   \r\n\r\n\r\n<div id=\"mapModal\">\r\n    <div class=\"content\">\r\n        <div id=\"map2\"></div>\r\n\t\t<ul id=\"hospitalList\" class=\"hospital-list\"></ul>\r\n\t\t<div id=\"closeMapModalBtn\">닫기</div>\r\n\t</div>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!-- 민재 검색 스크립트 -->\r\n<script>\r\n    let markers = []\r\n    const searchTypeSwitch = document.getElementById('searchTypeSwitch');\r\n    const searchForm = document.getElementById('searchForm')\r\n    const searchInput = document.getElementById('searchInput')\r\n\tconst searchTypeSelect = document.getElementById('searchTypeSelect'); // 셀렉트 요소\r\n    const hospitalList = document.getElementById('hospitalList')\r\n    const mapModal = document.getElementById('mapModal')\r\n    let map; // 맵 변수 선언\r\n    const infowindow = new kakao.maps.InfoWindow({ zIndex: 1 }) // 인포윈도우 생성\r\n\r\n    // 초기 플레이스 홀더 설정\r\n    searchInput.placeholder = '증상 또는 병명을 입력해주세요';  // 기본값\r\n\r\n    // 스위치 상태에 따라 플레이스 홀더 및 name 속성 변경\r\n    searchTypeSelect.addEventListener('change', function() {\r\n        if (this.value === 'hospital') {\r\n            // 병원명 검색 선택 시\r\n            searchInput.placeholder = '병원명을 입력해주세요';\r\n            searchInput.name = 'hospital';  // 병원명 검색\r\n        } else {\r\n            // 증상 검색 선택 시\r\n            searchInput.placeholder = '증상 또는 병명을 입력해주세요';\r\n            searchInput.name = 'search';  // 증상 검색\r\n        }\r\n    });\r\n\r\n    // 검색 핸들러\r\n    async function searchHandler(event) {\r\n        event.preventDefault();\r\n        const formData = new FormData(event.target);\r\n        const url = searchTypeSelect.value === 'hospital' ? '${cpath}/hospitals/searchs/names' : '${cpath}/hospitals/searchs';\r\n        const opt = {\r\n            method: 'POST',\r\n            body: formData\r\n        };\r\n        const result = await fetch(url, opt).then(response => response.json());\r\n        console.log(result);\r\n\r\n        if (result.noSearch) {\r\n        \t swal({\r\n                 title: '알림',\r\n                 text: '검색결과가 없습니다. 검색어를 조건에 맞게 검색하세요',\r\n                 type: 'info',\r\n                 button: '확인'\r\n             });\r\n        } else {\r\n            if (searchTypeSelect.value === 'hospital') {\r\n                // 병원명 검색인 경우 모달 열기\r\n                openMapModal(result.hospitals);\r\n            } else {\r\n                // 다른 페이지로 이동 (증상 검색의 경우)\r\n                window.location.href = '${cpath}/result';\r\n            }\r\n        }\r\n    }\r\n\r\n    // 폼 제출 시 searchHandler 실행\r\n    searchForm.addEventListener('submit', searchHandler);\r\n\r\n    function displayHospitalList(hospitals) {\r\n        hospitalList.innerHTML = ''; // 이전 결과 초기화\r\n        hospitals.forEach(hospital => {\r\n            const listItem = document.createElement('li')\r\n            listItem.innerText = hospital.hospital_name + '(' +hospital.address.substring(0,2) + ')' // 병원명 표시\r\n\r\n            // 리스트 항목 클릭 시 맵 중심 이동 및 인포윈도우 표시\r\n            listItem.addEventListener('click', () => {\r\n                // 클릭된 리스트 항목에 'selected' 클래스 추가\r\n                const selectedItem = document.querySelector('.hospital-list .selected')\r\n                if (selectedItem) {\r\n                    selectedItem.classList.remove('selected')\r\n                }\r\n                listItem.classList.add('selected') // 클릭된 항목에 'selected' 클래스 추가\r\n                const markerPosition = new kakao.maps.LatLng(hospital.lat, hospital.lng)\r\n                map.setCenter(markerPosition) // 맵 중심 이동\r\n                map.setLevel(3) // 줌 레벨을 6으로 설정 (더 크게 보이도록)\r\n                const marker = new kakao.maps.Marker({\r\n                    position: markerPosition,\r\n                    map: map, // 기존 맵 변수 사용\r\n                    image: markerImage\r\n                });\r\n                markers.forEach(m => m.setMap(null)) // 기존 마커 숨기기\r\n                markers = [marker] // 현재 마커로 배열 초기화\r\n\t\t\t\t// 인포윈도우 내용 생성\r\n\t\t\t\tconst infoMapListContent = document.createElement('div');\r\n\t\t\t\tinfoMapListContent.classList.add('infoMapListContent'); // 클래스 추가\r\n\r\n\t\t\t\t// 병원 이름을 <a> 태그로 만들기\r\n\t\t\t\tconst hospitalNameLink = document.createElement('a');\r\n\t\t\t\thospitalNameLink.href = '${cpath}/hospitalInfo/' + hospital.id; // 병원 상세 페이지로 링크\r\n\t\t\t\thospitalNameLink.target = '_blank'; // 새 탭에서 열기\r\n\t\t\t\thospitalNameLink.classList.add('hospitalNameLink'); // 클래스 추가\r\n\t\t\t\thospitalNameLink.innerText = hospital.hospital_name;\r\n\r\n\t\t\t\t// 주소와 전화번호 정보 추가\r\n\t\t\t\tconst addressText = document.createElement('div');\r\n\t\t\t\taddressText.classList.add('hospitalAddress'); // 클래스 추가\r\n\t\t\t\taddressText.innerHTML = '<strong>주소:</strong> ' + hospital.address;\r\n\r\n\t\t\t\tconst telText = document.createElement('div');\r\n\t\t\t\ttelText.classList.add('hospitalPhone'); // 클래스 추가\r\n\t\t\t\ttelText.innerHTML = '<strong>전화번호:</strong> ' + hospital.tel;\r\n\r\n\t\t\t\t// 인포윈도우 내용에 병원 이름, 주소, 전화번호 추가\r\n\t\t\t\tinfoMapListContent.appendChild(hospitalNameLink);\r\n\t\t\t\tinfoMapListContent.appendChild(addressText);\r\n\t\t\t\tinfoMapListContent.appendChild(telText);\r\n\r\n\t\t\t\t// 인포윈도우 열기\r\n\t\t\t\tinfowindow.setContent(infoMapListContent);\r\n\t\t\t\tinfowindow.open(map, marker); // 클릭한 마커 위에 인포윈도우 표시\r\n\t\t\t});\r\n\r\n            hospitalList.appendChild(listItem);\r\n        });\r\n    }\r\n\r\n    // 사용자 정의 마커 이미지 경로\r\n    const markerImageUrl = '${cpath}/resources/image/3333.png'; // 마커 이미지 경로를 설정하세요\r\n    const markerImageSize = new kakao.maps.Size(30, 30); // 마커 이미지의 크기\r\n\r\n    // 사용자 정의 마커 이미지 객체 생성\r\n    const markerImage = new kakao.maps.MarkerImage(markerImageUrl, markerImageSize);\r\n\r\n    // 모달 열기 및 마커 표시\r\n    async function openMapModal(hospitals) {\r\n        const modal = document.getElementById('mapModal')\r\n        modal.classList.add('show')\r\n\r\n        const mapContainer = document.getElementById('map2') // 맵 컨테이너\r\n\r\n        // 카카오 맵 초기화\r\n        map = new kakao.maps.Map(mapContainer, {\r\n            center: new kakao.maps.LatLng(37.5563, 126.9727), // 서울역 좌표\r\n            level: 13  // 줌 레벨 설정\r\n        })\r\n\r\n        // 새로운 마커 추가\r\n        markers.forEach(marker => marker.setMap(null)) // 기존 마커 숨기기\r\n        markers = [] // 마커 배열 초기화\r\n\r\n        // 새로운 마커 추가\r\n        hospitals.slice(0, 20).forEach(hospital => {\r\n            const markerPosition = new kakao.maps.LatLng(hospital.lat, hospital.lng)\r\n            const marker = new kakao.maps.Marker({\r\n                position: markerPosition,\r\n                image: markerImage\r\n            })\r\n\r\n            marker.setMap(map)\r\n            markers.push(marker)\r\n            // 마커 클릭 시 해당 병원의 인포윈도우 띄우기\r\n            kakao.maps.event.addListener(marker, 'click', function() {\r\n\t\t\t\tconst infoMapContent = document.createElement('div');\r\n\t\t\t\tinfoMapContent.classList.add('infoMapContent'); // 클래스 추가\r\n\r\n\t\t\t\t// 병원 이름을 <a> 태그로 만들기\r\n\t\t\t\tconst hospitalNameLink = document.createElement('a');\r\n\t\t\t\thospitalNameLink.href = '${cpath}/hospitalInfo/' + hospital.id; // 병원 상세 페이지로 링크\r\n\t\t\t\thospitalNameLink.target = '_blank'; // 새 탭에서 열기\r\n\t\t\t\thospitalNameLink.classList.add('hospitalNameLink'); // 클래스 추가\r\n\t\t\t\thospitalNameLink.innerText = hospital.hospital_name;\r\n\r\n\t\t\t\t// 주소와 전화번호 정보 추가\r\n\t\t\t\tconst addressText = document.createElement('div');\r\n\t\t\t\taddressText.classList.add('hospitalAddress'); // 클래스 추가\r\n\t\t\t\taddressText.innerHTML = '<strong>주소:</strong> ' + hospital.address;\r\n\r\n\t\t\t\tconst telText = document.createElement('div');\r\n\t\t\t\ttelText.classList.add('hospitalPhone'); // 클래스 추가\r\n\t\t\t\ttelText.innerHTML = '<strong>전화번호:</strong> ' + hospital.tel;\r\n\r\n\t\t\t\t// 인포윈도우 내용에 병원 이름, 주소, 전화번호 추가\r\n\t\t\t\tinfoMapContent.appendChild(hospitalNameLink);\r\n\t\t\t\tinfoMapContent.appendChild(addressText);\r\n\t\t\t\tinfoMapContent.appendChild(telText);\r\n\r\n\t\t\t\t// 인포윈도우 열기\r\n\t\t\t\tinfowindow.setContent(infoMapContent);\r\n\t\t\t\tinfowindow.open(map, marker); // 클릭한 마커 위에 인포윈도우 표시\r\n\t\t\t});\r\n        });\r\n\r\n        displayHospitalList(hospitals); // 병원 리스트 표시\r\n    }\r\n\r\n    // 모달 닫기\r\n    function closeMapModal() {\r\n        const modal = document.getElementById('mapModal')\r\n        modal.classList.remove('show')\r\n        markers.forEach(marker => marker.setMap(null)) // 마커 숨기기\r\n        markers = [] // 마커 배열 초기화\r\n    }\r\n\r\n\t// 닫기 버튼 클릭 시 모달 닫기\r\n\tdocument.getElementById('closeMapModalBtn').addEventListener('click', function() {\r\n\t\tcloseMapModal();\r\n\t})\r\n</script>\r\n\r\n<script>\r\nwindow.onload = () => {\r\n    const Slider = function(pages, pagination) {\r\n        let slides = [],\r\n            btns = [],\r\n            count = 0,\r\n            current = 0,\r\n            touchstart = 0,\r\n            animation_state = false;\r\n\r\n        const init = () => {\r\n        slides = pages.children;\r\n        count = slides.length;\r\n        for(let i = 0; i < count; i++) {\r\n            slides[i].style.bottom = -(i * 100) + '%';\r\n            \r\n            let btn = document.createElement('li');\r\n            btn.dataset.slide = i;\r\n            btn.addEventListener('click', btnClick)\r\n            btns.push(btn);\r\n            pagination.appendChild(btn);\r\n        }\r\n        btns[0].classList.add('active');\r\n        }\r\n\r\n        const gotoNum = (index) => {\r\n            if((index != current) && !animation_state) {\r\n                animation_state = true;\r\n                setTimeout(() => animation_state = false, 500);\r\n                btns[current].classList.remove('active');\r\n                current = index;\r\n                btns[current].classList.add('active');\r\n                for(let i = 0; i < count; i++) {\r\n                    if (i === count - 1) {\r\n                        slides[i].style.top = (i - current) * 100 + 'vh';\r\n                    } else {\r\n                        slides[i].style.top = (i - current) * 100 + '%';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const gotoNext = () => current < count - 1 ? gotoNum(current + 1) : false;\r\n        const gotoPrev = () => current > 0 ? gotoNum(current - 1) : false;\r\n        const btnClick = (e) => gotoNum(parseInt(e.target.dataset.slide));\r\n        pages.ontouchstart = (e) => touchstart = e.touches[0].screenY;\r\n        pages.ontouchend = (e) => touchstart < e.changedTouches[0].screenY ? gotoPrev() : gotoNext();\r\n        pages.onmousewheel = pages.onwheel = (e) => e.deltaY < 0 ? gotoPrev() : gotoNext();\r\n\r\n        init();\r\n    }\r\n\r\n    let pages = document.querySelector('.pages');\r\n    let pagination = document.querySelector('.pagination');\r\n    let slider = new Slider(pages, pagination)\r\n    }\r\n\r\n    // 모든 imgSlide 요소 선택\r\n    const imgSlides = document.querySelectorAll(\".imgSlide\");\r\n\r\n    // 각 imgSlide에 대해 복제 작업 수행\r\n    imgSlides.forEach((imgSlide) => {\r\n        // 복제\r\n        const clone = imgSlide.cloneNode(true);\r\n\r\n        // 복제본 추가\r\n        imgSlide.parentElement.appendChild(clone);\r\n\r\n        // 원본, 복제본 위치 지정 (offsetWidth를 사용하여 레이아웃을 강제로 업데이트)\r\n        imgSlide.offsetWidth; // Trigger reflow\r\n\r\n        // 클래스 할당\r\n        imgSlide.classList.add(\"original\");\r\n        clone.classList.add(\"clone\");\r\n    });\r\n</script>\r\n\r\n<!-- 응급실 목록 -->\r\n<script>\r\n    async function emergencyHandler() {\r\n        const url = '${cpath}/hospitals/emergency'\r\n        const result = await fetch(url).then(response => response.json())\r\n        const emergency = result.emergency\r\n\r\n        const emergencyList = document.getElementById('emergencyList')\r\n\r\n        emergency.forEach(function(x) {\r\n            const listItem = document.createElement('li')\r\n            const areaCode = x.dutyTel3.slice(0, 3)\r\n            let region\r\n            let regionClass\r\n\r\n            switch (areaCode) {\r\n                case '02': region = '서울'; regionClass = 'region-seoul'; break\r\n                case '031': region = '경기'; regionClass = 'region-gyeonggi'; break\r\n                case '032': region = '인천'; regionClass = 'region-incheon'; break\r\n                case '051': region = '부산'; regionClass = 'region-busan'; break\r\n                case '053': region = '대구'; regionClass = 'region-daegu'; break\r\n                case '042': region = '대전'; regionClass = 'region-daejeon'; break\r\n                case '062': region = '광주'; regionClass = 'region-gwangju'; break\r\n                case '052': region = '울산'; regionClass = 'region-ulsan'; break\r\n                case '044': region = '세종'; regionClass = 'region-sejong'; break\r\n                case '033': region = '강원'; regionClass = 'region-gangwon'; break\r\n                case '043': region = '충북'; regionClass = 'region-chungbuk'; break\r\n                case '041': region = '충남'; regionClass = 'region-chungnam'; break\r\n                case '063': region = '전북'; regionClass = 'region-jeonbuk'; break\r\n                case '061': region = '전남'; regionClass = 'region-jeonnam'; break\r\n                case '054': region = '경북'; regionClass = 'region-gyeongbuk'; break\r\n                case '055': region = '경남'; regionClass = 'region-gyeongnam'; break\r\n                case '064': region = '제주'; regionClass = 'region-jeju'; break\r\n                default: region = '기타'; regionClass = 'region-etc'; break\r\n            }\r\n\r\n            listItem.innerHTML =\r\n                '<div>' +\r\n                '<strong>' + x.dutyName + ' (' + region + ')</strong><br>' +\r\n                '<a href=\"tel:' + x.dutyTel3 + '\">전화: ' + x.dutyTel3 + '</a><br>' +\r\n                '입원실: ' + x.hvgc + '<br>' +\r\n                '응급실: ' + x.hvec +\r\n                '</div>'\r\n\r\n            listItem.classList.add(regionClass)\r\n            emergencyList.appendChild(listItem)\r\n        })\r\n\r\n        const roller = document.getElementById('roller1')\r\n        const clone = roller.cloneNode(true)\r\n        clone.id = 'roller2'\r\n        document.querySelector('.rollerWrap').appendChild(clone)\r\n\r\n        document.querySelector('#roller1').style.left = '0px'\r\n        document.querySelector('#roller2').style.left = roller.offsetWidth + 'px'\r\n\r\n        roller.classList.add('original')\r\n        clone.classList.add('clone')\r\n    }\r\n\r\n    window.addEventListener('DOMContentLoaded', emergencyHandler)\r\n</script>\r\n\r\n<%--검색어 순위--%>\r\n<script>\r\n\t//검색어 순위\r\n\tdocument.addEventListener('DOMContentLoaded', function() {\r\n\t\tconst rankingList = document.getElementById('rankingList');\r\n\t\tconst originalOrder = Array.from(rankingList.children);\r\n\t\tlet timer;\r\n\r\n\t\t// Animate the rankings to scroll one by one\r\n\t\tfunction tickerAnimation() {\r\n\t\t\ttimer = setTimeout(function() {\r\n\t\t\t\tconst firstLi = rankingList.querySelector('li:first-child');\r\n\t\t\t\tfirstLi.style.marginTop = '-30px';\r\n\t\t\t\tfirstLi.style.transition = 'margin-top 400ms';\r\n\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\trankingList.appendChild(firstLi);\r\n\t\t\t\t\tfirstLi.style.marginTop = '';\r\n\t\t\t\t\tfirstLi.style.transition = '';\r\n\t\t\t\t\ttickerAnimation();\r\n\t\t\t\t}, 400);\r\n\t\t\t}, 2000);\r\n\t\t}\r\n\r\n\t\tfunction resetOrder() {\r\n\t\t\t// 리스트를 초기 순서로 재정렬\r\n\t\t\toriginalOrder.forEach(item => rankingList.appendChild(item));\r\n\t\t}\r\n\r\n\t\ttickerAnimation();\r\n\r\n\t\trankingList.addEventListener('mouseover', function() {\r\n\t\t\tclearTimeout(timer);\r\n\t\t\tresetOrder(); // 순서 초기화\r\n\t\t\trankingList.classList.add('expanded');\r\n\t\t});\r\n\r\n\t\trankingList.addEventListener('mouseout', function() {\r\n\t\t\trankingList.classList.remove('expanded');\r\n\t\t\ttickerAnimation();\r\n\t\t});\r\n\r\n\r\n\t\tdocument.querySelectorAll('.ranking-item').forEach(item => {\r\n\t\t\titem.onclick = function() {\r\n\t\t\t\tconst keyword = item.querySelector('.ranking-text').textContent // 클릭한 아이템의 텍스트 가져오기\r\n\t\t\t\tdocument.getElementById('searchInput').value = keyword // 입력 필드에 키워드 설정\r\n\r\n\t\t\t\t// FormData 객체 생성\r\n\t\t\t\tconst formData = new FormData(document.getElementById('searchForm'))\r\n\r\n\t\t\t\t// FormData에 검색어 추가 (필요한 경우)\r\n\t\t\t\tformData.set('search', keyword) // 'search'라는 이름으로 키워드 추가\r\n\r\n\t\t\t\t// AJAX 요청을 통해 폼 데이터 전송\r\n\t\t\t\tsearchHandler2(formData)\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n\r\n\t// 검색 핸들러\r\n\tasync function searchHandler2(data) {\r\n\t\tconst url = searchTypeSelect.value === 'hospital' ? '${cpath}/hospitals/searchs/names' : '${cpath}/hospitals/searchs';\r\n\t\tconst opt = {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: data\r\n\t\t};\r\n\t\tconst result = await fetch(url, opt).then(response => response.json());\r\n\t\tconsole.log(result);\r\n\r\n\t\tif (result.noSearch) {\r\n\t\t\tswal({\r\n\t\t\t\ttitle: '알림',\r\n\t\t\t\ttext: '검색결과가 없습니다. 검색어를 조건에 맞게 검색하세요',\r\n\t\t\t\ttype: 'info',\r\n\t\t\t\tbutton: '확인'\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (searchTypeSelect.value === 'hospital') {\r\n\t\t\t\t// 병원명 검색인 경우 모달 열기\r\n\t\t\t\topenMapModal(result.hospitals);\r\n\t\t\t} else {\r\n\t\t\t\t// 다른 페이지로 이동 (증상 검색의 경우)\r\n\t\t\t\twindow.location.href = '${cpath}/result';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n\r\n<%--로그인--%>\r\n<script>\r\n    const cpath = '${cpath}'\r\n    const loginIcon = document.querySelector('div.loginIcon')\r\n    const loginIcon2 = document.querySelector('div.loginIcon2')\r\n    if (loginIcon) {\r\n        loginIcon.addEventListener('click', function() {\r\n            location.href = cpath + '/member/login'\r\n        })\r\n    }\r\n\r\n    if (loginIcon2) {\r\n        loginIcon2.addEventListener('click', function() {\r\n            location.href =  '${cpath}/member/info/${login.id}'\r\n        })\r\n    }\r\n</script>\r\n\r\n<!-- 호원 스크립트 -->\r\n<script>\r\n    <!-- 알림 스크립트 -->\r\n    const notification = document.getElementById('notification')\r\n    const notificationTable = document.getElementById('notificationTable')\r\n    const notificationTableHead = document.querySelector('#notificationTable thead')\r\n    const notificationTableBody = document.querySelector('#notificationTable tbody')\r\n    const bookingTitleElement = document.querySelector('.bookingTitle')\r\n    const bookingDetailElement = document.querySelector('.bookingDetail')\r\n    const bookingOverlay = document.querySelector('.bookingOverlay')\r\n    const notificationCountSpan = document.getElementById('notificationCountSpan')\r\n    const closeBookingBtn = document.getElementById('closeBookingBtn')\r\n    const bookingInsertForm = document.getElementById('bookingInsertForm')\r\n    const bookingUpdateForm = document.getElementById('bookingUpdateForm')\r\n\r\n    // 밀리초단위의 시간정보를 년월일시분 형태의 문자열로 변환하는 함수\r\n    function formatDate(d) {\r\n        const date = new Date(d)\r\n        const year = date.getFullYear()\r\n        const month = String(date.getMonth() + 1).padStart(2, '0') // 월은 0부터 시작하므로 +1\r\n        const day = String(date.getDate()).padStart(2, '0')\r\n        const hours = String(date.getHours()).padStart(2, '0')\r\n        const minutes = String(date.getMinutes()).padStart(2, '0')\r\n        return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes\r\n    }\r\n\r\n    // 예약 모달 여는 함수\r\n    function openBookingModal(bookingTitle, bookingDetail) {\r\n        bookingTitleElement.innerText = bookingTitle\r\n        bookingDetailElement.appendChild(bookingDetail)\r\n        bookingModal.classList.remove('hidden')\r\n    }\r\n\r\n    // 예약 모달 닫는 함수\r\n    function closeBookingModal(event){\r\n        bookingModal.classList.add('hidden')\r\n        bookingInsertForm.classList.add('hidden')\r\n        bookingUpdateForm.classList.add('hidden')\r\n        notificationTable.classList.add('hidden')\r\n        myFavoritesTable.classList.add('hidden')\r\n    }\r\n\r\n\r\n\r\n    // 아직 안읽은 알림 갯수 가져와서 띄우는 함수\r\n    async function notificationCount(){\r\n        const url = '${cpath}/notificationCount'\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if (result > 0) {\r\n            notificationCountSpan.classList.remove('hidden')\r\n            if (result >= 10) {\r\n                notificationCountSpan.innerText = '9+' // 10 이상은 '9+'로 표시\r\n            } else {\r\n                notificationCountSpan.innerText = result // 10 미만은 해당 숫자 표시\r\n            }\r\n            return result\r\n        } else {\r\n            notificationCountSpan.innerText = '' // 0 이하일 경우 비움\r\n            notificationCountSpan.classList.add('hidden')\r\n            return ''\r\n        }\r\n    }\r\n\r\n    // 알림 페이징 최대 페이지 수 가져오는 함수\r\n    async function notificationMaxPage(startPage){\r\n        const url = '${cpath}/notificationMaxPage'\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if(result != 0){\r\n            let tag = '<tr id=\"notificationPaging\">'\r\n            tag += '<td>이전</td>'\r\n            for(let i = startPage; i <= Math.min(startPage + 4, result); i++){\r\n                tag += '<td data-page=\"' + i + '\">' + i + '</td>'\r\n            }\r\n            tag += '<td>다음</td></tr>'\r\n            notificationTableBody.innerHTML = tag\r\n        }\r\n        else notificationTableBody.innerText = '알림이 없습니다.'\r\n        return result\r\n    }\r\n\r\n\r\n    // 알림 리스트 가져와서 페이지별로 띄우는 함수\r\n    async function notificationList(thisPage){\r\n        const url = '${cpath}/notificationList/' + thisPage\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        let tag = ''\r\n        tag += '<tr><button id=\"deleteNotificationAllBtn\">일괄 삭제하기</button></tr>'\r\n        result.forEach(e => {\r\n            tag += '<tr>' +\r\n                '<td class=\"notification-cell\" style=\"background-color: ' + (e.read ? '#ffffff' : 'lightskyblue') + ';\">' +\r\n                '<div class=\"notification-content\">' +\r\n                '<span class=\"notification-date\">' + formatDate(e.sent_time) + '</span>  ' +\r\n                '<span class=\"notification-name\">' + e.name + '님의 ' + e.hospital_name + '</span> ' +\r\n                '<span class=\"notification-date\">' + formatDate(e.booking_date) + '</span> ' +\r\n                '<span class=\"notification-message\">' + e.message + '</span>' +\r\n                '</div>' +\r\n                '</td>' +\r\n                '<td>' +\r\n                '<button class=\"notificationDeleteBtn\" data-page=\"' + thisPage + '\" data-id=\"' + e.id + '\">삭제</button>' +\r\n                '</td>' +\r\n                '</tr>'\r\n        })\r\n        notificationTableHead.innerHTML = tag\r\n\r\n        // 알림삭제 버튼 기능부여\r\n        document.querySelectorAll('.notificationDeleteBtn').forEach(btn => {\r\n            btn.onclick = (event) => {\r\n                deleteNotification(event)\r\n                readNotification(event)\r\n            }\r\n        })\r\n        document.getElementById('deleteNotificationAllBtn').addEventListener('click', deleteNotificationAll)\r\n        return result  // 결과를 반환합니다.\r\n    }\r\n\r\n    // 알림 지우는 함수\r\n    async function deleteNotification(event) {\r\n        event.preventDefault()\r\n        const id = parseInt(event.target.dataset.id)\r\n        const thisPage = parseInt(event.target.dataset.page)\r\n        const url = '${cpath}/deleteNotification/' + id\r\n        const opt = {\r\n            method: 'DELETE'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json());\r\n        if (result == 1) {\r\n            await notificationCount()\r\n            await updateNotificationPage(thisPage)\r\n        }\r\n    }\r\n\r\n    // 알림 페이지 업데이트 함수\r\n    function updateNotificationPagination(currentPage, startPage, maxPage) {\r\n        document.querySelectorAll('#notificationPaging td').forEach((td, i, arr) => {\r\n            if(i == 0) {\r\n                td.onclick = () => {\r\n                    const prevPage = Math.max(1, currentPage - 1)\r\n                    readNotification({ target: { dataset: { page: prevPage } } })\r\n                }\r\n            } else if(i == arr.length - 1) {\r\n                td.onclick = () => {\r\n                    const nextPage = Math.min(maxPage, currentPage + 1)\r\n                    readNotification({ target: { dataset: { page: nextPage } } })\r\n                }\r\n            } else {\r\n                td.onclick = (e) => readNotification(e)\r\n            }\r\n\r\n            if(i + startPage - 1 == currentPage) td.style.fontWeight = 'bold'\r\n        })\r\n    }\r\n\r\n    // 알림 페이지 변경 함수\r\n    async function updateNotificationPage(currentPage) {\r\n        const startPage = (Math.floor((currentPage + 4) / 5) - 1) * 5 + 1\r\n        const maxPage = await notificationMaxPage(startPage)\r\n\r\n        // 현재 페이지의 알림 목록을 가져옵니다.\r\n        const notifications = await notificationList(currentPage)\r\n\r\n        if (notifications.length === 0 && currentPage > 1) {\r\n            // 현재 페이지가 비어있고, 첫 번째 페이지가 아니라면 이전 페이지로 이동\r\n            await readNotification({ target: { dataset: { page: currentPage - 1 } } })\r\n        } else {\r\n            // 페이징 업데이트\r\n            updateNotificationPagination(currentPage, startPage, maxPage)\r\n        }\r\n    }\r\n\r\n\r\n    // 알림 읽음 처리하는 함수\r\n    async function readNotification(event) {\r\n        const thisPage = parseInt(event.target.dataset.page)\r\n        const startPage = (Math.floor((thisPage + 4) / 5) - 1) * 5 + 1\r\n\r\n        // 알림 리스트 불러오기\r\n        await notificationList(thisPage)\r\n\r\n        // 알림 읽음 처리\r\n        const url = '${cpath}/readNotification/' + thisPage\r\n        const opt = {\r\n            method : 'PATCH'\r\n        }\r\n        await fetch(url, opt)\r\n\r\n        // 알림 안읽은 수에서 읽은만큼 빼기\r\n        notificationCount()\r\n\r\n        // 알림창 최대 페이지 수\r\n        const maxPage = await notificationMaxPage(startPage)\r\n\r\n        // 알림 페이징\r\n        document.querySelectorAll('#notificationPaging td').forEach((td, i, arr) => {\r\n\r\n            // 이전\r\n            if(i == 0) {\r\n                td.onclick = (e) => {\r\n                    const prevPage = Math.max(1, thisPage - 1)\r\n                    readNotification({ target: { dataset: { page: prevPage } } })\r\n                }\r\n            }\r\n\r\n            // 다음\r\n            else if(i == arr.length - 1) {\r\n                td.onclick = async (e) => {\r\n                    const nextPage = Math.min(maxPage, thisPage + 1)\r\n                    readNotification({ target: { dataset: { page: nextPage } } })\r\n                }\r\n            }\r\n\r\n            // 페이지\r\n            else td.onclick = (e) => readNotification(e)\r\n\r\n            // 현재 페이지 숫자 굵게 표시\r\n            if(i + startPage - 1 == thisPage) td.style.fontWeight = 'bold'\r\n        })\r\n        notificationTable.classList.remove('hidden')\r\n        openBookingModal('알림', notificationTable)\r\n    }\r\n\r\n    async function deleteNotificationAll(event){\r\n        const url = '${cpath}/deleteNotificationAll'\r\n        const opt = {\r\n            method : 'DELETE'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if(result > 0) readNotification({ target: { dataset: { page: 1 } } })\r\n\r\n\r\n    }\r\n\r\n\r\n    closeBookingBtn.addEventListener('click', closeBookingModal)\r\n    bookingOverlay.onclick = closeBookingModal\r\n    notification.addEventListener('click', readNotification)\r\n    document.addEventListener('DOMContentLoaded', notificationCount)\r\n</script>\r\n\r\n\r\n<!-- 즐겨찾기 -->\r\n<script>\r\n    const myFavorites = document.getElementById('myFavorites')\r\n    const myFavoritesTable = document.getElementById('myFavoritesTable')\r\n    const myFavoritesTableHead = document.querySelector('#myFavoritesTable thead')\r\n    const myFavoritesTableBody = document.querySelector('#myFavoritesTable tbody')\r\n\r\n\r\n    async function getFavorite(id){\r\n        const url = cpath + '/getFavorite/' + parseInt(id)\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        return result\r\n    }\r\n\r\n    // 즐겨찾기 추가하는 함수\r\n    async function myFavorite(event){\r\n        event.preventDefault()\r\n        const url = cpath + '/myFavorite/' + parseInt(event.target.dataset.id)\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        location.reload()\r\n    }\r\n\r\n    // 즐겨찾기 목록 가져오는 함수\r\n    async function myFavoritesList(thisPage){\r\n        const url = cpath + '/myFavoritesList/' + thisPage\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        let tag = ''\r\n        tag += '<tr><button id=\"deleteMyFavoritesAllBtn\">일괄 삭제하기</button></tr>'\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        console.log(result)\r\n        result.forEach(favorite => {\r\n            tag += '<tr>'\r\n            tag += '<th><a href=\"${cpath }/hospitalInfo/' + favorite.hospital_id + '\">' + favorite.hospital_name + '</a></th>'\r\n            tag += '<th>' + favorite.address + '</th><th>' + favorite.tel + '</th><th><button class=\"myFavoritesDeleteBtn\" data-page=\"' + thisPage + '\" data-id=\"' + favorite.hospital_id + '\">삭제</button></th>'\r\n            tag += '</tr>'\r\n        })\r\n        myFavoritesTableHead.innerHTML = tag\r\n\r\n        // 즐찾삭제 버튼 기능부여\r\n        document.querySelectorAll('.myFavoritesDeleteBtn').forEach(btn => {\r\n            btn.onclick = (event) => {\r\n                Swal.fire({\r\n                    title: '즐겨찾기 삭제',\r\n                    text: '해당 병원을 즐겨찾기 삭제 하시겠습니까?',\r\n                    icon: 'question',  // 'type' 대신 'icon' 사용\r\n                    showCancelButton: true,\r\n                    confirmButtonText: '확인',\r\n                    cancelButtonText: '취소',\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    reverseButtons: true, // 취소 버튼을 왼쪽에 배치하려면 추가\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        deleteMyFavorites(event)\r\n                        openMyFavorites(event)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        document.getElementById('deleteMyFavoritesAllBtn').addEventListener('click', () => {\r\n            if(result != ''){\r\n                Swal.fire({\r\n                    title: '즐겨찾기 일괄삭제',\r\n                    text: '즐겨찾기 목록을 전부 삭제 하시겠습니까?',\r\n                    icon: 'question',\r\n                    confirmButtonText: '확인',\r\n                    cancelButtonText: '취소',\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    showCancelButton: true,\r\n                    allowOutsideClick: false,\r\n                    allowEscapeKey: false,\r\n                    showCloseButton: false\r\n                }).then((result) => {if(result.isConfirmed) deleteMyFavoritesAll()})}})\r\n        return result\r\n    }\r\n\r\n    // 즐겨찾기 지우는 함수\r\n    async function deleteMyFavorites(event) {\r\n        event.preventDefault()\r\n        const id = parseInt(event.target.dataset.id)\r\n        const thisPage = parseInt(event.target.dataset.page)\r\n        console.log(thisPage)\r\n        const url = '${cpath}/deleteMyFavorites/' + id\r\n        const opt = {\r\n            method: 'DELETE'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json());\r\n        if (result == 1) {\r\n            await updateMyFavoritesPage(thisPage)\r\n        }\r\n    }\r\n\r\n    // 즐겨찾기 페이징 최대 페이지 수 가져오는 함수\r\n    async function myFavoritesMaxPage(startPage){\r\n        const url = '${cpath}/myFavoritesMaxPage'\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if(result != 0){\r\n            let tag = '<tr id=\"myFavoritesPaging\">'\r\n            tag += '<td>이전</td>'\r\n            for(let i = startPage; i <= Math.min(startPage + 4, result); i++){\r\n                tag += '<td data-page=\"' + i + '\">' + i + '</td>'\r\n            }\r\n            tag += '<td>다음</td></tr>'\r\n            myFavoritesTableBody.innerHTML = tag\r\n        }\r\n        else myFavoritesTableBody.innerText = '즐겨찾기 한 병원이 없습니다.'\r\n        return result\r\n    }\r\n\r\n    // 즐찾 페이지 업데이트 함수\r\n    function updateMyFavoritesPagination(currentPage, startPage, maxPage) {\r\n\r\n        document.querySelectorAll('#myFavoritesPaging td').forEach((td, i, arr) => {\r\n            if(i == 0) {\r\n                td.onclick = () => {\r\n                    const prevPage = Math.max(1, currentPage - 1)\r\n                    openMyFavorites({ target: { dataset: { page: prevPage } } })\r\n                }\r\n            } else if(i == arr.length - 1) {\r\n                td.onclick = () => {\r\n                    const nextPage = Math.min(maxPage, currentPage + 1)\r\n                    openMyFavorites({ target: { dataset: { page: nextPage } } })\r\n                }\r\n            } else {\r\n                td.onclick = (e) => openMyFavorites(e)\r\n            }\r\n\r\n            if(i + startPage - 1 == currentPage) td.style.fontWeight = 'bold'\r\n        })\r\n    }\r\n\r\n    // 즐찾 페이지 변경 함수\r\n    async function updateMyFavoritesPage(currentPage) {\r\n        const startPage = (Math.floor((currentPage + 4) / 5) - 1) * 5 + 1\r\n        const maxPage = await myFavoritesMaxPage(startPage)\r\n\r\n        // 현재 페이지의 알림 목록을 가져옵니다.\r\n        const myFavoritess = await myFavoritesList(currentPage)\r\n\r\n        if (myFavoritess.length === 0 && currentPage > 1) {\r\n            // 현재 페이지가 비어있고, 첫 번째 페이지가 아니라면 이전 페이지로 이동\r\n            await openMyFavorites({ target: { dataset: { page: currentPage - 1 } } })\r\n        } else {\r\n            // 페이징 업데이트\r\n            updateMyFavoritesPagination(currentPage, startPage, maxPage)\r\n        }\r\n    }\r\n\r\n    // 즐겨찾기 목록 여는 함수\r\n    async function openMyFavorites(event) {\r\n        console.log(event.target.dataset.page)\r\n        const thisPage = parseInt(event.target.dataset.page)\r\n        const startPage = (Math.floor((thisPage + 4) / 5) - 1) * 5 + 1\r\n\r\n        // 즐겨찾기 리스트 불러오기\r\n        await myFavoritesList(thisPage)\r\n\r\n        // 즐겨찾기 최대 페이지 수\r\n        const maxPage = await myFavoritesMaxPage(startPage)\r\n\r\n\r\n        // 즐겨찾기 페이징\r\n        document.querySelectorAll('#myFavoritesPaging td').forEach((td, i, arr) => {\r\n\r\n            // 이전\r\n            if(i == 0) {\r\n                td.onclick = (e) => {\r\n                    const prevPage = Math.max(1, thisPage - 1)\r\n                    openMyFavorites({ target: { dataset: { page: prevPage } } })\r\n                }\r\n            }\r\n\r\n            // 다음\r\n            else if(i == arr.length - 1) {\r\n                td.onclick = async (e) => {\r\n                    const nextPage = Math.min(maxPage, thisPage + 1)\r\n                    openMyFavorites({ target: { dataset: { page: nextPage } } })\r\n                }\r\n            }\r\n\r\n            // 페이지\r\n            else td.onclick = (e) => openMyFavorites(e)\r\n\r\n            // 현재 페이지 숫자 굵게 표시\r\n            if(i + startPage - 1 == thisPage) td.style.fontWeight = 'bold'\r\n        })\r\n\r\n        myFavoritesTable.classList.remove('hidden')\r\n        openBookingModal('즐겨찾기 목록', myFavoritesTable)\r\n    }\r\n\r\n    async function deleteMyFavoritesAll(event){\r\n        const url = '${cpath}/deleteMyfavoritesAll'\r\n        const opt = {\r\n            method : 'DELETE'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if(result > 0) openMyFavorites({ target: { dataset: { page: 1 } } })\r\n    }\r\n\r\n\r\n    myFavorites.addEventListener('click', (event) => {\r\n        if('${login}' != '') openMyFavorites(event)\r\n        else {\r\n            Swal.fire({\r\n                title: '',\r\n                text: '로그인 해주세요.',\r\n                icon: 'info',\r\n                confirmButtonText: '확인',\r\n                cancelButtonText: '취소',\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                showCancelButton: true,\r\n                allowOutsideClick: false,\r\n                allowEscapeKey: false,\r\n                showCloseButton: false\r\n            }).then((result) => {if(result.isConfirmed) location.href = '${cpath}/member/login'})\r\n        }\r\n    })\r\n</script>\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/home.jsp b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/home.jsp
--- a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/home.jsp	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/home.jsp	(date 1732156053734)
@@ -238,17 +238,7 @@
          0% {transform: translateX(0);}
          100% {transform: translateX(-200%);}
      }
-     
-	/* 3번째 페이지 */
-/*     .thirdPageOverlay { */
-/*     	width: 100%; */
-/*     	height: 100%; */
-/*     	top: 0; */
-/*     	left: 0; */
-/*     	background-color: black; */
-/*     	position: absolute; */
-/*     	opacity: 0.5; */
-/*     } */
+
 /*     응급실 스타일 */
     .rollerWrap {
 		position: absolute;
Index: target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/reCheckUserid.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" \r\n\tpageEncoding=\"UTF-8\"%>\r\n<%@ include file=\"../header.jsp\" %>\r\n\r\n<form method=\"POST\" id=\"reCheckForm\">\r\n    <h3>고객님의 E-mail 주소를 입력하세요.</h3>\r\n    <p><input type=\"email\" name=\"email\" placeholder=\"기억하시는 메일 주소를 입력해주세요\" required></p>\r\n    <p><input type=\"submit\" value=\"조회\"></p>\r\n</form>\r\n\r\n<script>\r\n\tdocument.addEventListener('DOMContentLoaded', function() {\r\n\t    const form = document.getElementById('reCheckForm')\r\n\t    form.onsubmit = function(event) {\r\n\t        event.preventDefault()\r\n\t        \r\n\t        const formData = new FormData(form)\r\n\t        fetch('${cpath}/member/reCheckUserid', {\r\n\t            method: 'POST',\r\n\t            body: formData\r\n\t        })\r\n\t        .then(response => response.json()) // JSON으로 응답 받기\r\n\t        .then(data => {\r\n\t            if (data.status === 'fail') {\r\n\t                swal({\r\n\t                    title: \"조회 실패\",\r\n\t                    text: data.message,\r\n\t                    type: \"error\",\r\n\t                    confirmButtonText: \"확인\"\r\n\t                }, function() {\r\n\t                    location.href = '${cpath}/member/reCheckUserid'\r\n\t                })\r\n\t            } else if (data.status === 'success') {\r\n\t                swal({\r\n\t                    title: \"조회 성공\",\r\n\t                    text: data.message,\r\n\t                    type: \"success\",\r\n\t                    confirmButtonText: \"로그인 페이지로\"\r\n\t                }, function() {\r\n\t                    location.href = '${cpath}/member/login'\r\n\t                })\r\n\t            } else {\r\n\t                swal(\"알림\", \"예상치 못한 응답을 받았습니다.\", \"warning\");\r\n\t            }\r\n\t        })\r\n\t        .catch(error => {\r\n\t            console.error('Error:', error)\r\n\t            swal(\"오류\", \"처리 중 오류가 발생했습니다.\", \"error\")\r\n\t        })\r\n\t    }\r\n\t})\r\n</script>\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/reCheckUserid.jsp b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/reCheckUserid.jsp
--- a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/reCheckUserid.jsp	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/reCheckUserid.jsp	(date 1732155578143)
@@ -1,54 +1,148 @@
 <%@ page language="java" contentType="text/html; charset=UTF-8" 
-	pageEncoding="UTF-8"%>
+   pageEncoding="UTF-8"%>
 <%@ include file="../header.jsp" %>
+<style>
+    body{
+        background: linear-gradient(to bottom,#2c3e50, #a2a3a3);
+        width: 100vw;
+        height: 100vh;
+    }
+    .reCheckmodal {
+       width: 100%;
+       height: 91%;
+       display: flex;
+       justify-content: center;
+       align-items: center;
+   }   
+   .reCheckmodal > .ImgreCheckoverlay {
+       width: 100%;
+       height: 100%;
+       position: fixed;
+       top: 0;
+       left: 0;
+       background-color: rgba(0, 0, 0, 0.8);
+       z-index: 1;
+   }   
+   .reCheckmodal > .ImgreCheckcontent {
+       width: 300px;
+       height: 400px;
+       display: flex;
+       flex-direction: column;
+       justify-content: center;
+       align-items: center;
+       z-index: 2;
+       position: fixed;
+       top: 50%;
+       left: 50%;
+       transform: translate(-50%, -50%);
+       border-radius: 25px;
+       box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
+   }
+   .reCheckcontent {
+       padding: 30px;
+       background-color: rgba(247, 249, 250, 0.8);
+       border-radius: 8px;
+       box-shadow: 0 0 10px rgba(0,0,0,0.1);
+       text-align: center;
+       /* background-color: rgba(0, 0, 0, 0.5); */
+   }   
+   .reCheckcontent form {
+       display: flex;
+       flex-direction: column;
+       align-items: center;
+   }   
+   .reCheckcontent input[type="email"],
+   .reCheckcontent input[type="submit"] {
+       width: 250px;
+       padding: 10px;
+       margin: 5px 0;
+       border: 1px solid #ddd;
+       border-radius: 4px;
+   }   
+   .reCheckcontent input[type="submit"] {
+       background-color: #2c3e50;
+       font-size: 17px;
+       color: white;
+       cursor: pointer;
+       width: 213px;
+       height: 43px;
+       margin-bottom: 0;
+       padding-top: 6.5px;
+       display: flex;
+       justify-content: center;
+       align-items: center;
+       text-align: center;
+       border: 0;
+   }   
+   .reCheckcontent a {
+       color: #333;
+       text-decoration: none;
+       margin: 5px;
+   }
+   #reCheckEmailTitle {
+      color: #2c3e50;
+      font-size: 25px;
+   }
+</style>
 
-<form method="POST" id="reCheckForm">
-    <h3>고객님의 E-mail 주소를 입력하세요.</h3>
-    <p><input type="email" name="email" placeholder="기억하시는 메일 주소를 입력해주세요" required></p>
-    <p><input type="submit" value="조회"></p>
-</form>
+<div class="reCheckmodal">
+<div class="reCheckoverlay"></div>
+      <div class="reCheckcontent">
+   <h3 id="reCheckEmailTitle">고객님의 E-mail 주소를 입력하세요.</h3>
+   <form method="POST" id="reCheckForm">
+       <p class="reCheckIdBtn"><input type="email" name="email" placeholder="기억하시는 메일 주소를 입력해주세요" required></p>
+       <p style="margin-left: 23px;"><input type="submit" value="조회"></p>
+   </form>
+      <p style="margin-left: 21px;"><a href="${cpath }/member/resetPassword"><button type="button" formnovalidate>뒤로가기</button></a></p>
+   </div>
+</div>
+
+<%@ include file="../footer.jsp" %>
 
 <script>
-	document.addEventListener('DOMContentLoaded', function() {
-	    const form = document.getElementById('reCheckForm')
-	    form.onsubmit = function(event) {
-	        event.preventDefault()
-	        
-	        const formData = new FormData(form)
-	        fetch('${cpath}/member/reCheckUserid', {
-	            method: 'POST',
-	            body: formData
-	        })
-	        .then(response => response.json()) // JSON으로 응답 받기
-	        .then(data => {
-	            if (data.status === 'fail') {
-	                swal({
-	                    title: "조회 실패",
-	                    text: data.message,
-	                    type: "error",
-	                    confirmButtonText: "확인"
-	                }, function() {
-	                    location.href = '${cpath}/member/reCheckUserid'
-	                })
-	            } else if (data.status === 'success') {
-	                swal({
-	                    title: "조회 성공",
-	                    text: data.message,
-	                    type: "success",
-	                    confirmButtonText: "로그인 페이지로"
-	                }, function() {
-	                    location.href = '${cpath}/member/login'
-	                })
-	            } else {
-	                swal("알림", "예상치 못한 응답을 받았습니다.", "warning");
-	            }
-	        })
-	        .catch(error => {
-	            console.error('Error:', error)
-	            swal("오류", "처리 중 오류가 발생했습니다.", "error")
-	        })
-	    }
-	})
+   document.addEventListener('DOMContentLoaded', function() {
+       const form = document.getElementById('reCheckForm')
+       form.onsubmit = function(event) {
+           event.preventDefault()
+           
+           const formData = new FormData(form)
+           fetch('${cpath}/member/reCheckUserid', {
+               method: 'POST',
+               body: formData
+           })
+           .then(response => response.json()) // JSON으로 응답 받기
+           .then(data => {
+               if (data.status === 'fail') {
+                   swal({
+                       title: "조회 실패",
+                       text: data.message,
+                       type: "error",
+                       confirmButtonText: "확인"
+                   }, function() {
+                       location.href = '${cpath}/member/reCheckUserid'
+                   })
+               } else if (data.status === 'success') {
+                   swal({
+                       title: "조회 성공",
+                       text: data.message,
+                       type: "success",
+                       confirmButtonText: "로그인 페이지로"
+                   }, function() {
+                       location.href = '${cpath}/member/login'
+                   })
+               } else {
+                   swal("알림", "예상치 못한 응답을 받았습니다.", "warning");
+               }
+           })
+           .catch(error => {
+               console.error('Error:', error)
+               swal("오류", "처리 중 오류가 발생했습니다.", "error")
+           })
+       }
+   })
+   
+   const footer = document.getElementById('footer')
+   footer.style.backgroundColor = '#a2a3a3'
 </script>
 
 </body>
Index: target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/hospital/view.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<%@ include file=\"../header.jsp\" %>\r\n<fmt:formatDate value=\"<%= new java.util.Date() %>\" pattern=\"yyyy-MM-dd HH:mm\" var=\"now\" />\r\n\r\n<!-- 예약 정보에 있는 예약 시간을 포맷한다 -->\r\n<fmt:formatDate value=\"${bookingInfo.booking_date }\" pattern=\"yyyy-MM-dd HH:mm\" var=\"booking_date\"/>\r\n<%-- 즐겨찾기 및 예약 스타일--%>\r\n\r\n<style>\r\n    body{\r\n        background: linear-gradient(to bottom,#2c3e50, #a4a4a4);\r\n    }\r\n</style>\r\n<style>\r\n    /* favorite-icon 스타일 */\r\n    .favorite-icon {\r\n        display: inline-block;\r\n        width: 50px;\r\n        height: 40px;\r\n        background-size: contain;\r\n        background-repeat: no-repeat;\r\n        margin-left: 8px;\r\n        cursor: pointer;\r\n        margin-bottom: 10px;\r\n        position: absolute;\r\n        top: 40px;\r\n        left: 475px;\r\n    }\r\n\r\n    /* time-diff와 booking-btn 스타일 */\r\n    .time-diff {\r\n        margin-top: 15px;\r\n        font-size: 16px;\r\n        color: #d35400;\r\n        padding: 8px 12px;\r\n        background-color: #f9ebea;\r\n        border-radius: 5px;\r\n    }\r\n\r\n    #bookingBtn {\r\n        display: flex; /* Flexbox 사용 */\r\n        justify-content: center; /* 수평 중앙 정렬 */\r\n        align-items: center; /* 수직 중앙 정렬 */\r\n        gap: 10px; /* 버튼 간의 간격 */\r\n        margin-top: 10px; /* 상단 여백 */\r\n    }\r\n    /* 예약 취소 및 변경 버튼 스타일 */\r\n    #bookingCancelBtn, #bookingUpdateBtn,#bookingInsertBtn , #paymentBtn ,#cancelPaymentBtn {\r\n        padding: 12px 20px; /* 패딩 */\r\n        font-size: 1.1em; /* 폰트 크기 */\r\n        font-weight: bold; /* 폰트 두께 */\r\n        color: #fff; /* 글자 색상 */\r\n        border: none; /* 테두리 없음 */\r\n        border-radius: 5px; /* 둥근 모서리 */\r\n        cursor: pointer; /* 커서 모양 변경 */\r\n        transition: background-color 0.3s ease, transform 0.2s ease; /* 배경색 변화와 변형 애니메이션 */\r\n    }\r\n    #bookingInsertBtn {\r\n        background-color: #34495e; /* 파란색 배경 */\r\n        width: 100%;\r\n    }\r\n    #bookingInsertBtn:hover {\r\n        background-color: #2c3e50; /* 호버 시 어두운 파란색 */\r\n        transform: translateY(-2px); /* 위로 이동하는 효과 */\r\n    }\r\n    /* 예약 취소 버튼 스타일 */\r\n    #bookingCancelBtn {\r\n        background-color: #e74c3c; /* 빨간색 배경 */\r\n    }\r\n\r\n    #bookingCancelBtn:hover {\r\n        background-color: #c0392b; /* 호버 시 어두운 빨간색 */\r\n        transform: translateY(-2px); /* 위로 이동하는 효과 */\r\n    }\r\n\r\n    /* 예약 변경 버튼 스타일 */\r\n    #bookingUpdateBtn {\r\n        background-color: #53db34;\r\n    }\r\n\r\n    #bookingUpdateBtn:hover {\r\n        background-color: #3ba929;\r\n        transform: translateY(-2px); /* 위로 이동하는 효과 */\r\n    }\r\n\r\n    /* 결제하기 버튼 스타일 */\r\n    #paymentBtn {\r\n        background-color: #8e44ad; /* 기본 보라색 배경 */\r\n    }\r\n\r\n    #paymentBtn:hover {\r\n        background-color: #704183; /* 호버 시 더 밝은 보라색 */\r\n        transform: translateY(-2px); /* 위로 이동하는 효과 */\r\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 그림자 효과 */\r\n    }\r\n\r\n    #cancelPaymentBtn{\r\n        background-color: #f358ff; /* 기본 보라색 배경 */\r\n    }\r\n\r\n    #cancelPaymentBtn:hover {\r\n        background-color: #d50dc2; /* 호버 시 더 밝은 보라색 */\r\n        transform: translateY(-2px); /* 위로 이동하는 효과 */\r\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 그림자 효과 */\r\n    }\r\n\r\n    #cancelPaymentBtn{\r\n        transform: translateY(0); /* 클릭 시 원래 위치로 복귀 */\r\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* 클릭 시 더 강한 그림자 */\r\n    }\r\n\r\n    #paymentBtn:active {\r\n        transform: translateY(0); /* 클릭 시 원래 위치로 복귀 */\r\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* 클릭 시 더 강한 그림자 */\r\n    }\r\n\r\n    /* 모바일 반응형 스타일 */\r\n    @media (max-width: 768px) {\r\n        #bookingCancelBtn, #bookingUpdateBtn , #paymentBtn {\r\n            width: 100%; /* 모바일에서 버튼을 전체 너비로 설정 */\r\n            font-size: 1em; /* 폰트 크기 조정 */\r\n        }\r\n    }\r\n</style>\r\n\r\n<%--병원 레이아웃--%>\r\n<style>\r\n    .container {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: stretch;\r\n        max-width: 1200px; /* 전체 너비 제한 */\r\n        margin: 0 auto; /* 중앙 정렬 */\r\n        padding: 40px;\r\n        font-family: 'Noto Sans KR', Arial, sans-serif;\r\n        gap: 20px; /* 양쪽 열 사이의 간격 */\r\n    }\r\n\r\n    .left-column, .right-column {\r\n        flex: 1; /* 양쪽 열의 균등한 너비 */\r\n        padding: 20px;\r\n        background-color: #f7f9fa;\r\n        border-radius: 10px;\r\n        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\r\n        position: relative;\r\n        min-height: 1270px;\r\n    }\r\n    .hospital-info{\r\n        width: 500px;\r\n    }\r\n\r\n    .hospital-info h2 {\r\n        font-size: 24px;\r\n        color: #34495e;\r\n        font-weight: bold;\r\n        margin-bottom: 20px;\r\n    }\r\n\r\n    .hospital-image{\r\n        height: 300px;\r\n        width: 500px;\r\n    }\r\n    .hospital-image img {\r\n        width: 100%;\r\n        height: 90%;\r\n        object-fit: cover;\r\n        border-radius: 10px;\r\n        margin-bottom: 20px;\r\n        transition: transform 0.3s ease-in-out;\r\n    }\r\n\r\n    .hospital-image img:hover {\r\n        transform: scale(1.05); /* 5% 크기 확대 */\r\n    }\r\n\r\n    .hospital-details p {\r\n        font-size: 16px;\r\n        color: #2c3e50;\r\n        margin: 15px 0;\r\n    }\r\n\r\n    .hospital-details a {\r\n        color: #3498db;\r\n        text-decoration: none;\r\n    }\r\n\r\n    .hospital-details a:hover {\r\n        text-decoration: underline;\r\n    }\r\n\r\n    .jinryo-description h3, .hospital-time h3 {\r\n        font-size: 20px;\r\n        color: #34495e;\r\n        margin-top: 30px;\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .tags {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        gap: 5px;\r\n    }\r\n\r\n    .tag {\r\n        background-color: #e1f5fe;\r\n        color: #0277bd;\r\n        padding: 5px 10px;\r\n        border-radius: 15px;\r\n        font-size: 14px;\r\n    }\r\n\r\n    .hospital-time table {\r\n        width: 100%;\r\n        border-collapse: collapse;\r\n        margin-top: 10px;\r\n    }\r\n    .tag:hover {\r\n        background-color: #0073e6;\r\n        color: #fff;\r\n        transform: scale(1.05);\r\n        cursor: pointer;\r\n    }\r\n    .hospital-time th, .hospital-time td {\r\n        padding: 8px 10px;\r\n        font-size: 16px;\r\n        color: #2c3e50;\r\n        text-align: left;\r\n        border-bottom: 1px solid #ddd;\r\n    }\r\n\r\n    .find-route {\r\n        display: flex;\r\n        justify-content: center;\r\n        margin-top: 30px;\r\n    }\r\n\r\n    .find-route-btn {\r\n        background-color: #2c3e50;\r\n        color: #ffffff;\r\n        padding: 12px 20px;\r\n        border: none;\r\n        border-radius: 5px;\r\n        font-size: 16px;\r\n        cursor: pointer;\r\n        transition: background-color 0.3s;\r\n    }\r\n\r\n    .find-route-btn:hover {\r\n        background-color: #34495e;\r\n        transform: translateY(-2px);\r\n    }\r\n    .hospital-address > h3{\r\n        font-size: 20px;\r\n        color: #34495e;\r\n        margin-bottom: 15px;\r\n    }\r\n    #DynamicMap {\r\n        width: 100%;\r\n        height: 400px;\r\n        border: 1px solid #ddd;\r\n        border-radius: 10px;\r\n        margin-top: 20px;\r\n    }\r\n    .hospital-info-window {\r\n        padding: 10px;\r\n        font-size: 16px;\r\n        text-align: center;\r\n        font-weight: bold;\r\n        color: #3498db;\r\n        background-color: white;\r\n        border-radius: 5px;\r\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n        width: 200px;\r\n        height: 20px;\r\n        white-space: nowrap; /* 줄 바꿈 없이 한 줄로 표시 */\r\n        overflow: hidden; /* 내용이 넘치면 숨기기 */\r\n        text-overflow: ellipsis; /* 내용이 넘칠 경우 '...' 표시 */\r\n    }\r\n\r\n    #routeModal{\r\n        display: none;\r\n    }\r\n</style>\r\n\r\n\r\n<%--리뷰 스타일--%>\r\n<style>\r\n    .review-section {\r\n        margin-top: 30px;\r\n        padding: 20px;\r\n    }\r\n    .no-reviews {\r\n        text-align: center;\r\n        font-size: 16px;\r\n        color: #666;\r\n        padding: 30px;\r\n        background-color: #f9f9f9;\r\n        border-radius: 10px;\r\n        border: 1px solid #ddd;\r\n    }\r\n    .review-section h3 {\r\n        font-size: 20px;\r\n        color: #34495e;\r\n        margin-bottom: 15px;\r\n    }\r\n\r\n    .review-card {\r\n        display: flex;\r\n        flex-direction: column;\r\n        background-color: #ffffff;\r\n        padding: 15px;\r\n        margin-bottom: 15px;\r\n        border-radius: 10px;\r\n        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\r\n    }\r\n\r\n    .review-header {\r\n        display: flex;\r\n        align-items: center;\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .profile-img {\r\n        width: 40px;\r\n        height: 40px;\r\n        border-radius: 50%;\r\n        margin-right: 10px;\r\n    }\r\n\r\n    .user-info {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .user-id {\r\n        font-size: 14px;\r\n        font-weight: bold;\r\n        color: #34495e;\r\n    }\r\n\r\n    .created-at {\r\n        font-size: 12px;\r\n        color: #7f8c8d;\r\n    }\r\n\r\n    .review-body {\r\n        margin-top: 10px;\r\n    }\r\n\r\n    .rating {\r\n        font-size: 16px;\r\n        font-weight: bold;\r\n        color: #f39c12;\r\n    }\r\n\r\n    .comments {\r\n        font-size: 14px;\r\n        color: #2c3e50;\r\n        margin-top: 5px;\r\n    }\r\n\r\n    .review-footer {\r\n        display: flex;\r\n        justify-content: center;\r\n        margin-top: 20px;\r\n    }\r\n\r\n    .view-all-reviews-btn {\r\n        background-color: #2c3e50;\r\n        color: #ffffff;\r\n        padding: 10px 20px;\r\n        border: none;\r\n        border-radius: 5px;\r\n        font-size: 14px;\r\n        cursor: pointer;\r\n        transition: background-color 0.3s;\r\n    }\r\n\r\n    .view-all-reviews-btn:hover {\r\n        background-color: #34495e;\r\n        transform: translateY(-2px);\r\n    }\r\n\r\n</style>\r\n\r\n<%--찾아오는 길 스타일--%>\r\n<style>\r\n    .route-legend {\r\n        margin-bottom: 20px;\r\n        padding-bottom: 10px;\r\n        border-bottom: 2px solid #ddd;\r\n    }\r\n\r\n    .route-legend h4 {\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        color: #333;\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .route-legend ul {\r\n        list-style: none;\r\n        padding: 0;\r\n        margin: 0;\r\n    }\r\n\r\n    .route-legend li {\r\n        display: flex;\r\n        align-items: center;\r\n        margin-bottom: 8px;\r\n        font-size: 14px;\r\n        color: #444;\r\n    }\r\n\r\n    .route-legend .legend-item {\r\n        width: 20px;\r\n        height: 20px;\r\n        margin-right: 10px;\r\n        border-radius: 50%;\r\n    }\r\n\r\n    .route-legend .walk {\r\n        background-color: #e6e6e6; /* 도보 색상 */\r\n    }\r\n\r\n    .route-legend .bus {\r\n        background-color: #ffe6e6; /* 버스 색상 */\r\n    }\r\n\r\n    .route-legend .subway {\r\n        background-color: #e6ffe6; /* 지하철 색상 */\r\n    }\r\n\r\n    .route-legend .default {\r\n        background-color: #fff9e6; /* 기타 색상 */\r\n    }\r\n    /* 공통 스타일 */\r\n    #routeInfo {\r\n        font-family: Arial, sans-serif;\r\n        line-height: 1.6;\r\n    }\r\n\r\n    #routeTitle{\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n    }\r\n    /* 모달 배경 스타일 */\r\n    .routeModal {\r\n        display: none; /* 초기 상태 숨김 */\r\n        position: fixed; /* 화면 고정 */\r\n        z-index: 1000; /* 최상위 표시 */\r\n        left: 0;\r\n        top: 0;\r\n        width: 100vw;\r\n        height: 100vh;\r\n        background-color: rgba(0, 0, 0, 0.5); /* 반투명 검정 배경 */\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        overflow: hidden; /* 모달 외부 스크롤 방지 */\r\n    }\r\n\r\n    /* 모달 콘텐츠 */\r\n    .modal-content {\r\n        position: relative;\r\n        width: 80%; /* 모달 가로 크기 */\r\n        max-width: 600px; /* 최대 가로 크기 */\r\n        height: 70%; /* 모달 세로 크기 */\r\n        background-color: white;\r\n        border-radius: 10px;\r\n        padding: 20px;\r\n        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.25);\r\n        display: flex;\r\n        flex-direction: column; /* 콘텐츠 상하 정렬 */\r\n        overflow: hidden; /* 내부 콘텐츠 스크롤 */\r\n        left: 50%;\r\n        top: 50%;\r\n        transform: translate(-50%,-50%);\r\n    }\r\n\r\n    /* 모달 제목 */\r\n    .modal-content h4 {\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        margin-bottom: 15px;\r\n        color: #333;\r\n    }\r\n\r\n    /* 스크롤 가능한 영역 */\r\n    #routeInfo {\r\n        flex: 1; /* 남은 공간 채우기 */\r\n        overflow-y: auto; /* 세로 스크롤 활성화 */\r\n        font-family: Arial, sans-serif;\r\n        line-height: 1.6;\r\n        font-size: 14px;\r\n        color: #444;\r\n        padding-right: 10px; /* 스크롤바와 텍스트 간 여백 */\r\n        margin-bottom: 15px; /* 버튼과 간격 */\r\n    }\r\n\r\n    /* 스크롤바 숨김 (크롬, 엣지) */\r\n    #routeInfo::-webkit-scrollbar {\r\n        width: 0; /* 스크롤바 너비 제거 */\r\n    }\r\n\r\n\r\n    #routeInfo > ul, ol {\r\n        list-style-type: none;\r\n        padding: 0;\r\n        margin: 0;\r\n    }\r\n\r\n    #routeInfo > ul li {\r\n        margin-bottom: 15px;\r\n    }\r\n\r\n    .total-info {\r\n        font-size: 16px;\r\n        margin: 5px 0;\r\n    }\r\n\r\n    .leg-list {\r\n        border-left: 3px solid #ddd;\r\n        padding-left: 15px;\r\n        margin-top: 10px;\r\n    }\r\n\r\n    .leg-item {\r\n        margin-bottom: 20px;\r\n        padding: 10px;\r\n        border-radius: 8px;\r\n        background-color: #f9f9f9;\r\n        transition: transform 0.3s ease;\r\n    }\r\n\r\n    .leg-item:hover {\r\n        transform: translateX(10px);\r\n        background-color: #f5f5f5;\r\n    }\r\n\r\n    /* 스타일별 이동 방법 */\r\n    .leg-item.walk {\r\n        border-left-color: black;\r\n        background-color: #e6e6e6;\r\n        color: black;\r\n    }\r\n\r\n    .leg-item.bus {\r\n        border-left-color: red;\r\n        background-color: #ffe6e6;\r\n        color: red;\r\n    }\r\n\r\n    .leg-item.subway {\r\n        border-left-color: green;\r\n        background-color: #e6ffe6;\r\n        color: green;\r\n    }\r\n\r\n    .leg-item.default {\r\n        border-left-color: yellow;\r\n        background-color: #fff9e6;\r\n        color: #b58900;\r\n    }\r\n\r\n    /* 세부 단계 (steps) */\r\n    .step-list {\r\n        padding-left: 20px;\r\n        margin-top: 10px;\r\n    }\r\n\r\n    .step-list li {\r\n        margin-bottom: 8px;\r\n        font-size: 14px;\r\n        color: #555;\r\n    }\r\n\r\n    .step-list li strong {\r\n        color: #333;\r\n    }\r\n\r\n    .modal-content h4 {\r\n        margin-top: 0;\r\n        font-size: 20px;\r\n        color: #333;\r\n    }\r\n    #closeRouteBtn {\r\n        position: absolute;\r\n        top: 10px;\r\n        right: 10px;\r\n        background-color: #e74c3c;\r\n        color: white;\r\n        border: none;\r\n        border-radius: 5px;\r\n        padding: 5px 10px;\r\n        font-size: 16px;\r\n        font-weight: 600;\r\n        cursor: pointer;\r\n        transition: background-color 0.3s ease, transform 0.2s ease;\r\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n    }\r\n\r\n    #closeRouteBtn:hover {\r\n        background-color: #c0392b;\r\n        transform: translateY(-2px);\r\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\r\n    }\r\n</style>\r\n\r\n<div class=\"container\">\r\n    <div class=\"content-wrapper\">\r\n        <div class=\"left-column\">\r\n            <div class=\"hospital-info\">\r\n                <h2>${hospital.hospital_name}</h2>\r\n                <span id=\"myFavoriteHospital\" class=\"favorite-icon\" data-id=\"${hospital.id}\"></span>\r\n                <div class=\"hospital-image\">\r\n                    <img id=\"hospitalImage\" src=\"${hospital.imageUrl}\" alt=\"${hospital.hospital_name}\">\r\n                </div>\r\n                <div class=\"hospital-details\">\r\n                    <p><strong>주소:</strong> ${hospital.address}</p>\r\n                    <p><strong>전화번호:</strong> ${hospital.tel}</p>\r\n                    <p><strong>홈페이지:</strong> <a href=\"${hospital.homepage}\" target=\"_blank\">${hospital.homepage}</a></p>\r\n                    <p><strong>의사 수:</strong> ${hospital.doctors}명</p>\r\n                    <p><strong>기본진료비:</strong> ${hospital.medical_expenses}원</p>\r\n                </div>\r\n                <div class=\"jinryo-description\">\r\n                    <h3>진료과</h3>\r\n                    <div class=\"tags\">\r\n                        <c:forEach var=\"jinryo\" items=\"${jinryoNames}\">\r\n                            <span class=\"tag\">${jinryo}</span>\r\n                        </c:forEach>\r\n                    </div>\r\n                </div>\r\n                <div class=\"hospital-time\">\r\n                    <h3>운영 시간</h3>\r\n                    <table>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>요일</th>\r\n                            <th>운영 시간</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td>월요일</td>\r\n                            <td>\r\n                                <c:choose>\r\n                                    <c:when test=\"${not empty hospitalTime.mon_start && not empty hospitalTime.mon_end}\">\r\n                                        ${hospitalTime.mon_start.substring(0, 2)}:${hospitalTime.mon_start.substring(2, 4)} - ${hospitalTime.mon_end.substring(0, 2)}:${hospitalTime.mon_end.substring(2, 4)}\r\n                                    </c:when>\r\n                                    <c:otherwise>\r\n                                        9:00 - 18:00\r\n                                    </c:otherwise>\r\n                                </c:choose>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>화요일</td>\r\n                            <td>\r\n                                <c:choose>\r\n                                    <c:when test=\"${not empty hospitalTime.tue_start && not empty hospitalTime.tue_end}\">\r\n                                        ${hospitalTime.tue_start.substring(0, 2)}:${hospitalTime.tue_start.substring(2, 4)} - ${hospitalTime.tue_end.substring(0, 2)}:${hospitalTime.tue_end.substring(2, 4)}\r\n                                    </c:when>\r\n                                    <c:otherwise>\r\n                                        9:00 - 18:00\r\n                                    </c:otherwise>\r\n                                </c:choose>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>수요일</td>\r\n                            <td>\r\n                                <c:choose>\r\n                                    <c:when test=\"${not empty hospitalTime.wed_start && not empty hospitalTime.wed_end}\">\r\n                                        ${hospitalTime.wed_start.substring(0, 2)}:${hospitalTime.wed_start.substring(2, 4)} - ${hospitalTime.wed_end.substring(0, 2)}:${hospitalTime.wed_end.substring(2, 4)}\r\n                                    </c:when>\r\n                                    <c:otherwise>\r\n                                        9:00 - 18:00\r\n                                    </c:otherwise>\r\n                                </c:choose>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>목요일</td>\r\n                            <td>\r\n                                <c:choose>\r\n                                    <c:when test=\"${not empty hospitalTime.thu_start && not empty hospitalTime.thu_end}\">\r\n                                        ${hospitalTime.thu_start.substring(0, 2)}:${hospitalTime.thu_start.substring(2, 4)} - ${hospitalTime.thu_end.substring(0, 2)}:${hospitalTime.thu_end.substring(2, 4)}\r\n                                    </c:when>\r\n                                    <c:otherwise>\r\n                                        9:00 - 18:00\r\n                                    </c:otherwise>\r\n                                </c:choose>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>금요일</td>\r\n                            <td>\r\n                                <c:choose>\r\n                                    <c:when test=\"${not empty hospitalTime.fri_start && not empty hospitalTime.fri_end}\">\r\n                                        ${hospitalTime.fri_start.substring(0, 2)}:${hospitalTime.fri_start.substring(2, 4)} - ${hospitalTime.fri_end.substring(0, 2)}:${hospitalTime.fri_end.substring(2, 4)}\r\n                                    </c:when>\r\n                                    <c:otherwise>\r\n                                        9:00 - 18:00\r\n                                    </c:otherwise>\r\n                                </c:choose>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>토요일</td>\r\n                            <td>\r\n                                <c:choose>\r\n                                    <c:when test=\"${not empty hospitalTime.sat_start && not empty hospitalTime.sat_end}\">\r\n                                        ${hospitalTime.sat_start.substring(0, 2)}:${hospitalTime.sat_start.substring(2, 4)} - ${hospitalTime.sat_end.substring(0, 2)}:${hospitalTime.sat_end.substring(2, 4)}\r\n                                    </c:when>\r\n                                    <c:otherwise>\r\n                                        9:00 - 13:00\r\n                                    </c:otherwise>\r\n                                </c:choose>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>일요일</td>\r\n                            <td>\r\n                                <c:choose>\r\n                                    <c:when test=\"${not empty hospitalTime.sun_start && not empty hospitalTime.sun_end}\">\r\n                                        ${hospitalTime.sun_start.substring(0, 2)}:${hospitalTime.sun_start.substring(2, 4)} - ${hospitalTime.sun_end.substring(0, 2)}:${hospitalTime.sun_end.substring(2, 4)}\r\n                                    </c:when>\r\n                                    <c:otherwise>\r\n                                        -\r\n                                    </c:otherwise>\r\n                                </c:choose>\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div id=\"timeDiff\" class=\"time-diff hidden\"></div>\r\n                <div id=\"payment\" class=\"payment\"></div>\r\n                <div id=\"bookingBtn\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n        <div class=\"right-column\">\r\n            <div class=\"hospital-address\">\r\n                <h3>위치</h3>\r\n                <div id=\"DynamicMap\"></div>\r\n                <div class=\"find-route\">\r\n                    <button class=\"find-route-btn\" id=\"findRouteBtn\">찾아오는 길</button>\r\n                </div>\r\n            </div>\r\n            <div class=\"review-section\">\r\n                <h3>리뷰</h3>\r\n                <div id=\"reviewListSome\">\r\n                    <c:if test=\"${empty reviewList}\">\r\n                        <div class=\"no-reviews\">\r\n                            <p>아직 리뷰가 없습니다. 첫 번째 리뷰를 작성해 주세요!</p>\r\n                        </div>\r\n                    </c:if>\r\n                    <c:forEach var=\"review\" items=\"${reviewList}\">\r\n                        <div class=\"review-card\">\r\n                            <div class=\"review-header\">\r\n                                <img class=\"profile-img\" src=\"${review.PROFILE_IMG}\" alt=\"User Image\">\r\n                                <div class=\"user-info\">\r\n                                    <div class=\"user-id\">${review.USERID}</div>\r\n                                    <div class=\"created-at\">${review.CREATED_AT}</div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"review-body\">\r\n                                <div class=\"rating\">\r\n                                    <c:forEach var=\"i\" begin=\"1\" end=\"${review.RATING}\">\r\n                                        ★\r\n                                    </c:forEach>\r\n                                    <c:forEach var=\"i\" begin=\"${review.RATING + 1}\" end=\"5\">\r\n                                        ☆\r\n                                    </c:forEach>\r\n                                </div>\r\n                                <p class=\"comments\">${review.COMMENTS}</p>\r\n                            </div>\r\n                        </div>\r\n                    </c:forEach>\r\n                </div>\r\n                <div class=\"review-footer\">\r\n                    <a href=\"${cpath}/review/${id}/view\">\r\n                        <button class=\"view-all-reviews-btn\">리뷰 전체보기</button>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n   </div>\r\n\r\n\r\n<div id=\"routeModal\" class=\"routeModal\">\r\n    <div class=\"modal-content\">\r\n        <div class=\"route-legend\">\r\n            <h4>이동 방법별 색상 범례</h4>\r\n            <ul>\r\n                <li><span class=\"legend-item walk\"></span> 도보</li>\r\n                <li><span class=\"legend-item bus\"></span> 버스</li>\r\n                <li><span class=\"legend-item subway\"></span> 지하철</li>\r\n                <li><span class=\"legend-item default\"></span> 기타</li>\r\n            </ul>\r\n        </div>\r\n        <h4>경로 정보</h4>\r\n        <div id=\"routeInfo\"></div> <!-- 경로 정보가 들어갈 부분 -->\r\n        <button id=\"closeRouteBtn\">닫기</button>\r\n    </div>\r\n</div>\r\n\r\n\r\n<%@ include file=\"../footer.jsp\" %>\r\n\r\n\r\n\r\n<!-- 민재 스크립트 -->\r\n\r\n<script>\r\n    const closeRouteBtn = document.getElementById('closeRouteBtn');\r\n    const findRouteBtn = document.getElementById('findRouteBtn');\r\n    function loadHandler() {\r\n// 카카오 지도 API Geocoder 인스턴스 생성\r\n        const geocoder = new kakao.maps.services.Geocoder();\r\n\r\n// 서버에서 받아온 병원 주소\r\n        var address = '${hospital.address}'; // JSP에서 병원 주소로 대체됩니다\r\n        const splitAddress = address.split(' ');\r\n         address = splitAddress.slice(0, 4).join(' ');\r\n\r\n// 주소를 좌표로 변환\r\n        geocoder.addressSearch(address, function (result, status) {\r\n            if (status === kakao.maps.services.Status.OK) {\r\n                const lat = result[0].y // 위도\r\n                const lng = result[0].x // 경도\r\n                const coords = new kakao.maps.LatLng(lat, lng) // 카카오 지도에 사용할 좌표 객체\r\n\r\n// 지도 컨테이너와 기본 옵션 설정\r\n                const mapContainer = document.getElementById('DynamicMap') // 지도 표시할 HTML 요소\r\n                const mapOptions = {\r\n                    center: coords, // 지도의 중심 좌표 설정\r\n                    level: 2, // 지도 확대/축소 레벨 설정 (1: 가장 축소, 15: 가장 확대)\r\n                }\r\n\r\n// 카카오 지도 객체 생성\r\n                const map = new kakao.maps.Map(mapContainer, mapOptions)\r\n\r\n// 병원 위치에 마커 생성\r\n                const marker = new kakao.maps.Marker({\r\n                    position: coords, // 마커의 위치 설정\r\n                });\r\n                marker.setMap(map) // 지도에 마커 추가\r\n\r\n// 병원 이름을 표시할 인포윈도우 생성\r\n                const infowindow = new kakao.maps.InfoWindow({\r\n                    content: `<div class=\"hospital-info-window\">${hospital.hospital_name}</div>`,\r\n                })\r\n\r\n// 지도 로드 시 바로 인포윈도우 표시\r\n                infowindow.open(map, marker) // 마커 위에 바로 인포윈도우 표시\r\n            } else {\r\n// 주소 검색 실패 시 오류 메시지\r\n                swal({\r\n                    title: '오류 발생',\r\n                    text: '주소를 찾을 수 없습니다.',\r\n                    type: 'error', // 오류에 맞는 아이콘 선택\r\n                    button: \"확인\"\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    function openRouteModal() {\r\n        const modal = document.getElementById(\"routeModal\")\r\n        modal.style.display = \"block\"  // 모달 표시\r\n        // console.log(\"모달이 열렸습니다.\")\r\n        getUserLocationAndDirections()\r\n    }\r\n\r\n    function closeRouteModal() {\r\n        const modal = document.getElementById('routeModal')\r\n        modal.style.display = 'none'  // 모달 숨기기\r\n        // console.log(\"모달이 닫혔습니다.\")\r\n        document.getElementById('routeInfo').innerHTML = '';\r\n    }\r\n\r\n    async function getUserLocationAndDirections() {\r\n        // 사용자에게 \"주소 사용\" 또는 \"현재 위치 사용\"을 물어보는 팝업\r\n        const userChoice = await Swal.fire({\r\n            title: \"위치 설정\",\r\n            text: \"주소를 사용하시겠습니까? 아니면 현재 위치를 사용하시겠습니까?\",\r\n            icon: \"question\",\r\n            showCancelButton: true,\r\n            confirmButtonText: \"주소 사용\",\r\n            cancelButtonText: \"현재 위치 사용\",\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n        });\r\n\r\n        // \"주소 사용\"을 선택했을 때\r\n        if (userChoice.isConfirmed) {\r\n            useLoginLocation(); // 로그인된 주소로 위치 정보 변환 및 경로 찾기\r\n        }\r\n        // \"현재 위치 사용\"을 선택했을 때\r\n        else {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(function(position) {\r\n                    var userLat = position.coords.latitude;\r\n                    var userLng = position.coords.longitude;\r\n                    var hospitalLat = ${hospital.lat}; // 서버에서 전달받은 병원 위도\r\n                    var hospitalLng = ${hospital.lng}; // 서버에서 전달받은 병원 경도\r\n\r\n                    getDirections(userLat, userLng, hospitalLat, hospitalLng); // 경로 찾기\r\n                }, function(error) {\r\n                    Swal.fire({\r\n                        title: \"위치 오류\",\r\n                        text: \"위치 정보를 가져오는데 실패했습니다.\",\r\n                        icon: \"error\",\r\n                        confirmButtonColor: '#3085d6',\r\n                        confirmButtonText: \"확인\"\r\n                    });\r\n                });\r\n            } else {\r\n                Swal.fire({\r\n                    title: \"오류\",\r\n                    text: \"Geolocation을 지원하지 않는 브라우저입니다.\",\r\n                    icon: \"error\",\r\n                    confirmButtonColor: '#3085d6',\r\n                    confirmButtonText: \"확인\"\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    // 로그인된 사용자 주소를 사용하는 함수\r\n    function useLoginLocation() {\r\n        if (${not empty login.location}) {  // 사용자 주소가 있을 때\r\n            var loginAddress = \"${login.location}\";  // 로그인된 사용자 주소\r\n            convertAddressToCoordinates(loginAddress, function(result) {\r\n                if (result) {\r\n                    var userLat = result.y;\r\n                    var userLng = result.x;\r\n                    var hospitalLat = ${hospital.lat}; // 서버에서 전달받은 병원 위도\r\n                    var hospitalLng = ${hospital.lng}; // 서버에서 전달받은 병원 경도\r\n\r\n                    console.log(\"사용자 주소 위치:\", userLat, userLng); // 주소에서 가져온 사용자 위치\r\n                    console.log(\"병원 위치:\", hospitalLat, hospitalLng); // 병원 위치 확인\r\n\r\n                    getDirections(userLat, userLng, hospitalLat, hospitalLng); // 경로 찾기\r\n                } else {\r\n                    Swal.fire({\r\n                        title: \"오류\",\r\n                        text: \"주소를 좌표로 변환할 수 없습니다.\",\r\n                        icon: \"error\",\r\n                        confirmButtonColor: '#3085d6',\r\n                        confirmButtonText: \"확인\"\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            // 로그인 되어 있지 않은 경우, 로그인 페이지로 이동\r\n            Swal.fire({\r\n                title: \"로그인 필요\",\r\n                text: \"주소를 사용하려면 로그인해야 합니다.\",\r\n                icon: \"warning\",\r\n                confirmButtonColor: '#3085d6',\r\n                confirmButtonText: \"로그인\",\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    const currentPageUrl = window.location.href\r\n                    window.location.href = cpath + '/member/login?redirectUrl=' + encodeURIComponent(currentPageUrl) // 로그인 페이지로 리다이렉션\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // 주소를 좌표로 변환하는 함수\r\n    function convertAddressToCoordinates(address, callback) {\r\n        var geocoder = new kakao.maps.services.Geocoder();\r\n\r\n        geocoder.addressSearch(address, function(result, status) {\r\n            if (status === kakao.maps.services.Status.OK) {\r\n                callback(result[0]);\r\n            } else {\r\n                callback(null);\r\n            }\r\n        });\r\n    }\r\n\r\n    async function getDirections(startY, startX, endY, endX) {\r\n        const url = '${cpath}/hospitals/routes' // 경로 API 호출 URL\r\n        const requestBody = { startY, startX, endY, endX }\r\n\r\n        const options = {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        }\r\n\r\n        try {\r\n            const result = await fetch(url, options).then(resp=>resp.json())\r\n            const itineraries = result.itineraries\r\n            displayRoute(itineraries)\r\n        } catch (error) {\r\n            await closeRouteModal()\r\n            console.error(\"경로 API 호출 중 오류:\", error)\r\n            swal({\r\n                title: '오류',\r\n                text: '예기치 못한 오류가 발생했습니다',\r\n                type: 'error',\r\n                confirmButtonColor: '#3085d6',\r\n                button: \"확인\"\r\n            })\r\n        }\r\n    }\r\n\r\n    function displayRoute(itineraries) {\r\n        const routeInfoDiv = document.getElementById('routeInfo')\r\n\r\n        if (itineraries && Array.isArray(itineraries)) {\r\n            let routeHtml = '<ul>'\r\n\r\n            itineraries.forEach((itinerary, index) => {\r\n                routeHtml += '<li id=\"routeTitle\"><strong>추천 경로' + (index + 1) + '</strong>'\r\n\r\n                // 총 소요 시간 및 거리\r\n                routeHtml += '<p class=\"total-info\"><strong>총 소요 시간:</strong> ' + Math.floor(itinerary.totalTime / 60) + '분</p>'\r\n                routeHtml += '<p class=\"total-info\"><strong>총 거리:</strong> ' + (itinerary.totalDistance / 1000).toFixed(2) + 'km</p>'\r\n\r\n                // 요금 정보 (존재하는 경우에만)\r\n                if (itinerary.fare && itinerary.fare.regular) {\r\n                    routeHtml += '<p class=\"total-info\"><strong>총 요금:</strong> ' + itinerary.fare.regular.currency.symbol + itinerary.fare.regular.totalFare + '원</p>'\r\n                }\r\n\r\n                // 각 구간(legs) 정보\r\n                routeHtml += '<ol class=\"leg-list\">'\r\n                itinerary.legs.forEach((leg, legIndex) => {\r\n                    routeHtml += '<li class=\"leg-item ' + leg.mode.toLowerCase() + '\"><strong>' + (legIndex + 1) + '번째</strong> '\r\n\r\n                    // 구간 출발지와 도착지\r\n                    if (leg.start && leg.start.name) {\r\n                        routeHtml += '<p class=\"leg-info\"><strong>출발지:</strong> ' + leg.start.name + '</p>'\r\n                    }\r\n                    if (leg.end && leg.end.name) {\r\n                        routeHtml += '<p class=\"leg-info\"><strong>도착지:</strong> ' + leg.end.name + '</p>'\r\n                    }\r\n\r\n                    // 이동 방법 스타일 적용\r\n                    routeHtml += '<p class=\"leg-mode\"><strong>이동 방법:</strong> '\r\n                    switch (leg.mode) {\r\n                        case 'WALK':\r\n                            routeHtml += '도보 (' + Math.floor(leg.sectionTime / 60) + '분, ' + leg.distance + 'm)</p>'\r\n                            break\r\n                        case 'BUS':\r\n                            routeHtml += leg.route  + '번 버스 (' + Math.floor(leg.sectionTime / 60) + '분)</p>'\r\n                            break\r\n                        case 'SUBWAY':\r\n                            routeHtml += leg.route + ' 지하철 (' + Math.floor(leg.sectionTime / 60) + '분)</p>'\r\n                            break\r\n                        default:\r\n                            routeHtml += '비행기 외 기타</p>'\r\n                            break\r\n                    }\r\n\r\n                    // 각 구간의 상세 이동 단계 (steps)\r\n                    if (leg.steps && leg.steps.length > 0) {\r\n                        routeHtml += '<ul class=\"step-list\">'\r\n                        leg.steps.forEach(step => {\r\n                            routeHtml += '<li><strong>' + (step.streetName || '도로명 없음') + ':</strong> ' + step.description + ' (' + step.distance + 'm)</li>'\r\n                        });\r\n                        routeHtml += '</ul>'\r\n                    }\r\n\r\n                    routeHtml += '</li>'\r\n                })\r\n                routeHtml += '</ol>'\r\n                routeHtml += '</li>'\r\n            })\r\n\r\n            routeHtml += '</ul>'\r\n            routeInfoDiv.innerHTML = routeHtml\r\n        } else {\r\n            Swal.fire({\r\n                title: \"경로 찾기 실패\",\r\n                text: \"경로를 찾을 수 없습니다.\",\r\n                icon: \"error\",\r\n                confirmButtonColor: '#3085d6',\r\n                confirmButtonText: \"확인\"\r\n            });\r\n        }\r\n    }\r\n    findRouteBtn.onclick = openRouteModal\r\n    closeRouteBtn.onclick = closeRouteModal\r\n    window.addEventListener('DOMContentLoaded', loadHandler)\r\n</script>\r\n\r\n<!--  호원 스크립트 -->\r\n<script>\r\n    const payment = document.getElementById('payment')\r\n   const timeDiff = document.getElementById('timeDiff')\r\n   const bookingInfo = '${bookingInfo}'\r\n   const hospital_id = '${hospital.id}'   // 병원의 고유id\r\n   const member_id = '${login.id}'      // 멤버의 id\r\n   const bookingModal = document.getElementById('bookingModal')\r\n   const bookingBtn = document.getElementById('bookingBtn')\r\n   const booking_date = new Date('${booking_date }').getTime()\r\n   let bookingTimerInterval   // 예약시간까지 남은 시간 타이머 설정변수\r\n   \r\n   // 예약시간이 30분 남았을때 알림테이블에 넣고 그 알림 메일을 보내는 함수\r\n   async function notificationBookingOneDay(){   \r\n      const url = '${cpath}/notificationBookingOneDay/' + member_id + '/' + hospital_id\r\n      const opt = {\r\n            method : 'GET'\r\n      }\r\n      const result = await fetch(url, opt).then(resp => resp.json())\r\n      if(result == 1) sendNotificationMail()\r\n   }\r\n   \r\n   // 예약시간까지 남은 시간을 실시간으로 보여주는 함수\r\n   function updateBookingTimer(booking_date) {\r\n       let now = new Date().getTime()\r\n       let difference = booking_date - now\r\n       if (difference > 0) {\r\n          let years = Math.floor(difference / (1000 * 60 * 60 * 24 * 365))\r\n           let months = Math.floor((difference % (1000 * 60 * 60 * 24 * 365)) / (1000 * 60 * 60 * 24 * 30))\r\n           let days = Math.floor((difference % (1000 * 60 * 60 * 24 * 30)) / (1000 * 60 * 60 * 24))\r\n           let hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\r\n           let minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60))\r\n           let seconds = Math.floor((difference % (1000 * 60)) / 1000)\r\n           let timerText = \"예약시간 \" + formatDate(booking_date) + \"까지 \" + (years == 0 ? '' : years + \"년 \") + (months == 0 ? '' : months + \"월 \")\r\n           + (days == 0 ? '' : days + \"일 \") + (hours == 0 ? '' : hours + \"시간 \") + (minutes == 0 ? '' : minutes + \"분 \") + (seconds == 0 ? '남음' : seconds + \"초 남음\");\r\n         document.getElementById(\"timeDiff\").innerHTML = timerText\r\n           \r\n           // 시간차이가 30분이되면 자동으로 알림을 띄우고 메일을 보냄\r\n           if(difference < 86400500 && difference > 86399500) {\r\n              Swal.fire({\r\n                 title: '예약 알림',\r\n                 text: '예약이 하루 남았습니다.',\r\n                 icon: 'info',\r\n                 confirmButtonText: '확인',\r\n                    confirmButtonColor: '#3085d6',\r\n                    allowOutsideClick: false,\r\n                 allowEscapeKey: false,\r\n                 showCloseButton: false\r\n               }).then((result) => {if(result.isConfirmed) notificationBookingOneDay()})\r\n          }\r\n       }\r\n       \r\n       // 예약시간에 도달하면 자동으로 알림의 띄우고 메일을 보냄\r\n       else {\r\n          document.getElementById(\"timeDiff\").innerHTML = '예약시간 만료'\r\n           clearInterval(bookingTimerInterval)\r\n          bookingTimeOver()\r\n       }\r\n   }\r\n   \r\n   // 입력폼을 모달에 띄우는 함수\r\n   function readyToBook(event) {\r\n      event.preventDefault()\r\n      bookingInsertForm.classList.remove('hidden')\r\n      openBookingModal('예약하기', bookingInsertForm)\r\n   }\r\n   \r\n   // 변경폼을 모달에 띄우는 함수\r\n   function readyToUpdateBooking(event) {\r\n      event.preventDefault()\r\n      bookingUpdateForm.classList.remove('hidden')\r\n      openBookingModal('예약 변경하기', bookingUpdateForm)\r\n   }\r\n   \r\n   // 알림테이블에 어떤 정보가 추가되면 그 정보를 메일로 보내는 함수\r\n   async function sendNotificationMail(){\r\n      const url = '${cpath}/sendNotificationMail'\r\n      const opt = {\r\n            method : 'POST'\r\n      }\r\n      const result = await fetch(url, opt).then(resp => resp.json())\r\n      location.reload()\r\n   }\r\n   \r\n   // 예약한 정보를 알림테이블에 추가하고 메일로 보내는 함수\r\n   async function notificationBooking(){\r\n      const url = '${cpath}/notificationBooking/' + member_id + '/' + hospital_id\r\n      const opt = {\r\n         method : 'POST'\r\n      }\r\n      const result = await fetch(url, opt).then(resp => resp.json())\r\n      if(result == 1) sendNotificationMail()\r\n      \r\n   }\r\n   \r\n   // 예약 변경한 정보를 알림테이블에 추가하고 메일로 보내는 함수\r\n   async function notificationBookingUpdate(){\r\n      const url = '${cpath}/notificationBookingUpdate/' + member_id + '/' + hospital_id\r\n      const opt = {\r\n         method : 'POST'\r\n      }\r\n      const result = await fetch(url, opt).then(resp => resp.json())\r\n      if(result == 1) sendNotificationMail()\r\n   }\r\n\r\n    async function bookingInsert() {\r\n        const isLoggedIn = '${login}'\r\n        if (!isLoggedIn) {\r\n            const confirmResult = await Swal.fire({\r\n                title: '로그인 필요',\r\n                text: '예약을 진행하시려면 로그인이 필요합니다. 로그인 페이지로 이동하시겠습니까?',\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: '예, 로그인하러 가기',\r\n                cancelButtonText: '아니오'\r\n            })\r\n\r\n            if (confirmResult.isConfirmed) {\r\n                // 로그인 페이지로 리디렉션\r\n                const currentPageUrl = window.location.href\r\n                window.location.href = cpath + '/member/login?redirectUrl=' + encodeURIComponent(currentPageUrl) // 로그인 페이지로 리다이렉션\r\n            }\r\n            return\r\n        }\r\n\r\n        const url = '${cpath}/bookingInsert'\r\n        const formData = new FormData(bookingInsertForm)\r\n        const data = {}\r\n        formData.forEach((value, key) => {\r\n            data[key] = value;\r\n        })\r\n\r\n        const bookingTime = new Date(data.booking_date).getTime()\r\n        const now = new Date().getTime()\r\n        const timeDifference = bookingTime - now\r\n        const thirtyMinutesInMillis = 30 * 60 * 1000\r\n\r\n        // 예약시간이 지금시간보다  30분 전이면 빠꾸먹임\r\n        if (timeDifference <= 0) {\r\n            const confirmResult = await Swal.fire({\r\n                title: '예약 실패',\r\n                text: '이미 지난 시간대입니다. 다시 선택해주세요.',\r\n                icon: 'error',\r\n                confirmButtonText: '확인',\r\n                allowOutsideClick: false,\r\n                allowEscapeKey: false,\r\n                showCloseButton: false,\r\n                confirmButtonColor: '#3085d6' // 확인 버튼 색상\r\n            })\r\n            if (confirmResult.isConfirmed) {\r\n                return\r\n            }\r\n        }\r\n\r\n        // 예약시간이 지금보다 30분 이내일 경우 추가 확인\r\n        else if (timeDifference <= thirtyMinutesInMillis) {\r\n            const confirmResult = await Swal.fire({\r\n                title: '주의',\r\n                text: '예약 시간이 30분 이내입니다. 정말로 예약하시겠습니까?',\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: '예, 예약합니다',\r\n                cancelButtonText: '아니오'\r\n            })\r\n\r\n            if (!confirmResult.isConfirmed) {\r\n                return\r\n            }\r\n        }\r\n\r\n        const opt = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n\r\n        // 예약에 성공하면 그 정보를 알림테이블에 추가하고 메일로 보냄\r\n        if (result == 1) {\r\n            Swal.fire({\r\n                title: '예약 완료',\r\n                text: '예약이 완료되었습니다.',\r\n                icon: 'success',\r\n                confirmButtonText: '확인',\r\n                allowOutsideClick: false,\r\n                allowEscapeKey: false,\r\n                showCloseButton: false,\r\n                confirmButtonColor: '#3085d6'\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    notificationBooking();\r\n                }\r\n            })\r\n        } else if (result == 2) {\r\n            Swal.fire({\r\n                title: '예약 실패',\r\n                text: '진료시간이 아닙니다. 다시 선택해주세요.',\r\n                icon: 'error',\r\n                confirmButtonText: '확인',\r\n                allowOutsideClick: false,\r\n                allowEscapeKey: false,\r\n                showCloseButton: false,\r\n                confirmButtonColor: '#3085d6'\r\n            })\r\n        } else if (result == 3) {\r\n            Swal.fire({\r\n                title: '예약 불가',\r\n                text: '해당 병원은 예약 불가능합니다.',\r\n                icon: 'info',\r\n                confirmButtonText: '확인',\r\n                allowOutsideClick: false,\r\n                allowEscapeKey: false,\r\n                showCloseButton: false,\r\n                confirmButtonColor: '#3085d6'\r\n            })\r\n        } else {\r\n            Swal.fire({\r\n                title: '예약 실패',\r\n                text: '알 수 없는 이유로 예약에 실패하였습니다.',\r\n                icon: 'error',\r\n                confirmButtonText: '확인',\r\n                allowOutsideClick: false,\r\n                allowEscapeKey: false,\r\n                showCloseButton: false,\r\n                confirmButtonColor: '#3085d6'\r\n            })\r\n        }\r\n    }\r\n\r\n   // 예약 취소하는 함수\r\n   async function bookingCancel(){\r\n         const url = '${cpath}/bookingCancel/' + member_id + '/' + hospital_id\r\n         const opt = {\r\n            method : 'PATCH'\r\n         }\r\n         const result = await fetch(url, opt).then(resp => resp.json())\r\n         \r\n         // 예약 취소에 성공하면 그 내용을 알림테이블에 추가하고 메일로 보냄\r\n         if(result == 1) {\r\n            Swal.fire({\r\n                 title: '예약 취소 완료',\r\n                 text: '예약이 취소되었습니다.',\r\n                 icon: 'success',\r\n                 confirmButtonText: '확인',\r\n                 allowOutsideClick: false,\r\n                 allowEscapeKey: false,\r\n                 showCloseButton: false,\r\n                    confirmButtonColor: '#3085d6'\r\n               }).then((result) => {if(result.isConfirmed) sendNotificationMail()})\r\n         } \r\n         \r\n         // 예외 상황 대처\r\n         else Swal.fire({\r\n              title: '예약 취소 실패',\r\n              text: '알 수 없는 이유로 예약 취소에 실패하였습니다.',\r\n              icon: 'error',\r\n              confirmButtonText: '확인',\r\n              allowOutsideClick: false,\r\n              allowEscapeKey: false,\r\n              showCloseButton: false,\r\n                confirmButtonColor: '#3085d6'\r\n            })    \r\n   }\r\n   \r\n   // 예약 변경하는 함수\r\n    async function bookingUpdate(){\r\n        const url = '${cpath}/bookingUpdate'\r\n        const formData = new FormData(bookingUpdateForm)\r\n\r\n        const bookingDate1 = formData.get('booking_date')\r\n        const bookingDate2 = '${booking_date}'\r\n        const date1 = new Date(bookingDate1)\r\n        const date2 = new Date(bookingDate2.replace(' ', 'T'))\r\n        const oldTimeDifference = parseInt(Math.abs(date1 - date2))\r\n        console.log(Math.abs(oldTimeDifference))\r\n        const data = {}\r\n        formData.forEach((value, key) => {\r\n            data[key] = value\r\n        })\r\n        const bookingTime = new Date(data.booking_date).getTime()\r\n        const now = new Date().getTime()\r\n        const timeDifference = bookingTime - now\r\n        const thirtyMinutesInMillis = 30 * 60 * 1000\r\n\r\n        // 예약시간이 지금시간보다 이전이면 빠꾸먹임\r\n        if(timeDifference <= 0){\r\n            const confirmResult = await Swal.fire({\r\n                title: '예약 변경 실패',\r\n                text: '이미 지난 시간대입니다. 다시 선택해주세요.',\r\n                icon: 'error',\r\n                confirmButtonText: '확인',\r\n                allowOutsideClick: false,\r\n                allowEscapeKey: false,\r\n                showCloseButton: false,\r\n                confirmButtonColor: '#3085d6'\r\n            })\r\n            if (confirmResult.isConfirmed) {\r\n                return\r\n            }\r\n        }\r\n\r\n        // 예약시간이 지금보다 30분 이내일 경우 추가 확인\r\n        else if (timeDifference <= thirtyMinutesInMillis) {\r\n            const confirmResult = await Swal.fire({\r\n                title: '주의',\r\n                text: '변경 시 예약시간이 30분 이내입니다. 정말로 예약을 변경하시겠습니까?',\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: '예, 변경합니다',\r\n                cancelButtonText: '아니오'\r\n            })\r\n            if (!confirmResult.isConfirmed) {\r\n                return\r\n            }\r\n        }\r\n        // 예약시간이 변경 전 예약시간에서 1시간 이상 차이 안나면 빠꾸\r\n        else if (oldTimeDifference < 60 * 60 * 1000) {\r\n            const confirmResult = await Swal.fire({\r\n                title: '예약 변경 실패',\r\n                text: '예약시간이 변경 전 예약시간과 1시간 이상 차이나야 합니다.',\r\n                icon: 'error',\r\n                confirmButtonText: '확인',\r\n                allowOutsideClick: false,\r\n                allowEscapeKey: false,\r\n                showCloseButton: false,\r\n                confirmButtonColor: '#3085d6'\r\n            })\r\n            if (confirmResult.isConfirmed) {\r\n                return\r\n            }\r\n        }\r\n        const opt = {\r\n            method : 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n\r\n        // 예약 변경에 성공하면 그 내용을 알림테이블에 추가하고 메일로 보냄\r\n        if(result == 1) {\r\n            Swal.fire({\r\n                title: '예약 변경 완료',\r\n                text: '예약이 변경되었습니다.',\r\n                icon: 'success',\r\n                confirmButtonText: '확인',\r\n                allowOutsideClick: false,\r\n                allowEscapeKey: false,\r\n                showCloseButton: false,\r\n                confirmButtonColor: '#3085d6'\r\n            }).then((result) => {if(result.isConfirmed) notificationBookingUpdate()})\r\n\r\n        }\r\n        else if(result == 2) Swal.fire({\r\n            title: '예약 변경 실패',\r\n            text: '진료시간이 아닙니다. 다시 선택해주세요.',\r\n            icon: 'error',\r\n            confirmButtonText: '확인',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            showCloseButton: false,\r\n            confirmButtonColor: '#3085d6'\r\n        })\r\n\r\n        // 예외 상황 처리\r\n        else Swal.fire({\r\n                title: '예약 변경 실패',\r\n                text: '알 수 없는 이유로 예약 변경에 실패하였습니다.',\r\n                icon: 'error',\r\n                confirmButtonText: '확인',\r\n                allowOutsideClick: false,\r\n                allowEscapeKey: false,\r\n                showCloseButton: false,\r\n                confirmButtonColor: '#3085d6'\r\n            })\r\n\r\n    }\r\n   // 예약한 시간에 도달하면 기간 만료처리하는 함수\r\n   async function bookingTimeOver(){\r\n      const url = '${cpath}/bookingTimeOver/' + member_id + '/' + hospital_id\r\n      const opt = {\r\n         method : 'PATCH'\r\n      }\r\n      const result = await fetch(url, opt).then(resp => resp.json())\r\n       \r\n      // 예약시간 만료처리에 성공하면그 내용을 알림테이블에 추가하고 메일로 보냄\r\n      if(result == 1) {\r\n         Swal.fire({\r\n              title: '예약 시간',\r\n              text: '예약한 시간이 되었습니다!!',\r\n              icon: 'info',\r\n              confirmButtonText: '확인',\r\n              allowOutsideClick: false,\r\n              allowEscapeKey: false,\r\n              showCloseButton: false,\r\n                confirmButtonColor: '#3085d6'\r\n            }).then((result) => {if(result.isConfirmed) sendNotificationMail()})\r\n      } \r\n      \r\n      // 예외 상황 처리\r\n      else alert('시간 처리 안됨') \r\n   }\r\n   \r\n   document.addEventListener('DOMContentLoaded', () => {\r\n\r\n       const paymentStatus = sessionStorage.getItem('paymentStatus')\r\n       console.log(paymentStatus)\r\n\r\n\r\n\r\n       // 예약 후 적용되는 페이지\r\n       if (bookingInfo != \"\") {\r\n           bookingBtn.innerHTML = '<button id=\"bookingCancelBtn\">예약취소하기</button><button id=\"bookingUpdateBtn\">예약변경하기</button><button id=\"paymentBtn\">결제하기</button><button id=\"cancelPaymentBtn\">결제 취소</button>';\r\n           const bookingCancelBtn = document.getElementById('bookingCancelBtn');\r\n           const bookingUpdateBtn = document.getElementById('bookingUpdateBtn');\r\n           const paymentBtn = document.getElementById('paymentBtn');\r\n           const payment = document.getElementById('payment'); // payment 요소 확인\r\n           const cancelPaymentBtn = document.getElementById('cancelPaymentBtn')\r\n\r\n           timeDiff.classList.remove('hidden');\r\n           document.querySelector('#bookingUpdateForm #booking_date').value = '${booking_date}';\r\n\r\n           // 남은 시간 타이머를 1초단위로 카운트다운하도록 설정\r\n           bookingTimerInterval = setInterval(() => updateBookingTimer(booking_date), 1000);\r\n           updateBookingTimer(booking_date);\r\n\r\n           bookingCancelBtn.onclick = () => {\r\n               Swal.fire({\r\n                   title: '예약 취소',\r\n                   text: '예약을 취소하시겠습니까?',\r\n                   icon: 'question',\r\n                   confirmButtonText: '확인',\r\n                   cancelButtonText: '취소',\r\n                   confirmButtonColor: '#3085d6',\r\n                   cancelButtonColor: '#d33',\r\n                   showCancelButton: true,\r\n                   allowOutsideClick: false,\r\n                   allowEscapeKey: false,\r\n                   showCloseButton: false\r\n               }).then((result) => { if (result.isConfirmed) bookingCancel() });\r\n           };\r\n           bookingUpdateBtn.onclick = readyToUpdateBooking;\r\n           bookingUpdateForm.onsubmit = (event) => {\r\n               event.preventDefault();\r\n               Swal.fire({\r\n                   title: '예약 변경',\r\n                   text: '예약을 변경하시겠습니까?',\r\n                   icon: 'question',\r\n                   confirmButtonText: '확인',\r\n                   cancelButtonText: '취소',\r\n                   confirmButtonColor: '#3085d6',\r\n                   cancelButtonColor: '#d33',\r\n                   showCancelButton: true,\r\n                   allowOutsideClick: false,\r\n                   allowEscapeKey: false,\r\n                   showCloseButton: false\r\n               }).then((result) => { if (result.isConfirmed) bookingUpdate() });\r\n           };\r\n\r\n           // 결제 버튼 클릭 이벤트\r\n           paymentBtn.onclick = async () => {\r\n               var IMP = window.IMP;\r\n               IMP.init('imp22288473'); // 아임포트 가맹점 식별 코드\r\n               const paymentData = {\r\n                   pg: 'html5_inicis.INIpayTest',\r\n                   pay_method: 'card', // 결제 수단\r\n                   merchant_uid: 'merchant_' + new Date().getTime(), // 주문 고유 번호\r\n                   name: '병원 예약 결제', // 결제 상품 이름\r\n                   amount: +'${hospital.medical_expenses}', // 결제 금액 (테스트로 10,000원)\r\n                   buyer_email: '${login.email}', // 구매자 이메일\r\n                   buyer_name: '${login.name}', // 구매자 이름\r\n                   buyer_addr: '${login.location}', // 구매자 주소\r\n                   m_redirect_url: '${cpath}/hospitalInfo/' + hospital_id // 결제 완료 후 리디렉션될 페이지\r\n               };\r\n\r\n               IMP.request_pay(paymentData, function (rsp) {\r\n                   console.log(rsp);\r\n                   if (rsp.success) {\r\n                       Swal.fire({\r\n                           title: '결제 성공',\r\n                           text: '결제가 성공적으로 완료되었습니다.',\r\n                           icon: 'success',\r\n                           confirmButtonText: '확인',\r\n                           confirmButtonColor: '#3085d6'\r\n                       }).then(() => {\r\n                           // 결제 상태를 sessionStorage에 저장\r\n                           sessionStorage.setItem('paymentStatus', 'success');\r\n                           sessionStorage.setItem('paymentData', JSON.stringify(paymentData)); // paymentData 세션에 저장\r\n\r\n                           // 결제 취소 버튼 클릭 이벤트 추가\r\n                           addCancelPaymentListener(paymentData); // 결제 취소 이벤트 리스너를 추가\r\n                           location.reload()\r\n                       });\r\n                   } else {\r\n                       Swal.fire({\r\n                           title: '결제 실패',\r\n                           text: '결제가 실패하였습니다. 사유: ' + rsp.error_msg,\r\n                           icon: 'error',\r\n                           confirmButtonText: '확인',\r\n                           confirmButtonColor: '#3085d6'\r\n                       });\r\n                   }\r\n               });\r\n           };\r\n       }\r\n           // 예약 전 적용되는 페이지\r\n      else {\r\n            timeDiff.classList.add('hidden')\r\n         bookingBtn.innerHTML = '<button id=\"bookingInsertBtn\">예약하기</button>'\r\n         const bookingInsertBtn = document.getElementById('bookingInsertBtn')\r\n         document.querySelector('#bookingInsertForm #booking_date').value = '${now}'         \r\n         bookingInsertBtn.onclick = readyToBook\r\n         bookingInsertForm.onsubmit = async (event) => {\r\n                event.preventDefault()\r\n               await Swal.fire({\r\n                 title: '예약',\r\n                 text: '예약하시겠습니까?',\r\n                 icon: 'question',\r\n                 confirmButtonText: '확인',\r\n                 cancelButtonText: '취소',\r\n                   confirmButtonColor: '#3085d6',\r\n                   cancelButtonColor: '#d33',\r\n                 showCancelButton: true,\r\n                 allowOutsideClick: false,\r\n                 allowEscapeKey: false,\r\n                 showCloseButton: false\r\n             }).then((result) => {if(result.isConfirmed) bookingInsert()})\r\n         }\r\n      }\r\n       // 결제 상태에 따른 버튼 표시 여부 처리\r\n       if (paymentStatus === 'cancelled') {\r\n           // 결제 취소 후 결제하기 버튼 보이기, 결제 취소 버튼 숨기기\r\n           if (paymentBtn) paymentBtn.style.display = 'inline-block'\r\n           if (cancelPaymentBtn) cancelPaymentBtn.style.display = 'none'\r\n       } else if (paymentStatus === 'success') {\r\n           // 결제 성공 후 결제하기 버튼 숨기기, 결제 취소 버튼 보이기\r\n           if (paymentBtn) paymentBtn.style.display = 'none'\r\n           if (cancelPaymentBtn) cancelPaymentBtn.style.display = 'inline-block'\r\n           // 결제 취소 이벤트 리스너 추가\r\n           addCancelPaymentListener();\r\n       } else {\r\n           if(bookingInfo != \"\"){\r\n           if (paymentBtn) paymentBtn.style.display = 'inline-block'\r\n           if (cancelPaymentBtn) cancelPaymentBtn.style.display = 'none'\r\n            }\r\n       }\r\n\r\n       function addCancelPaymentListener(paymentData = null) {\r\n           cancelPaymentBtn.onclick = async () => {\r\n               const confirmCancel = await Swal.fire({\r\n                   title: '결제 취소',\r\n                   text: '결제를 취소하시겠습니까?',\r\n                   icon: 'warning',\r\n                   showCancelButton: true,\r\n                   confirmButtonText: '네',\r\n                   cancelButtonText: '아니오',\r\n                   confirmButtonColor: '#d33',\r\n                   cancelButtonColor: '#3085d6'\r\n               })\r\n               if (confirmCancel.isConfirmed) {\r\n                   // paymentData가 null이면 sessionStorage에서 가져옴\r\n                   const storedPaymentData = paymentData || JSON.parse(sessionStorage.getItem('paymentData'));\r\n                   if (storedPaymentData) {\r\n                       console.log('결제 취소:', storedPaymentData.merchant_uid)\r\n                       // 서버에 취소 요청 보내기\r\n                       const cancelUrl = cpath + '/cancelPayment'\r\n                       const response = await fetch(cancelUrl, {\r\n                           method: 'POST',\r\n                           headers: {\r\n                               'Content-Type': 'application/json'\r\n                           },\r\n                           body: JSON.stringify({\r\n                               merchant_uid: storedPaymentData.merchant_uid // 결제 데이터에 있는 고유 주문 번호 전달\r\n                           })\r\n                       })\r\n\r\n                       const result = await response.json()\r\n\r\n                       if (result.success) {\r\n                           await Swal.fire({\r\n                               title: '결제 취소 성공',\r\n                               text: '결제가 성공적으로 취소되었습니다.',\r\n                               icon: 'success',\r\n                               confirmButtonText: '확인',\r\n                               confirmButtonColor: '#3085d6'\r\n                           })\r\n                           // 결제 취소 상태를 로컬 저장소에 기록\r\n                           sessionStorage.setItem('paymentStatus', 'cancelled')\r\n\r\n                           // 결제 취소 후 버튼 상태 변경\r\n                           cancelPaymentBtn.style.display = 'none'// 결제 취소 버튼 숨기기\r\n                           paymentBtn.style.display = 'inline-block' // 결제 버튼 다시 보이기\r\n                       } else {\r\n                           Swal.fire({\r\n                               title: '결제 취소 실패',\r\n                               text: '결제 취소가 실패하였습니다. 사유: ' + result.message,\r\n                               icon: 'error',\r\n                               confirmButtonText: '확인',\r\n                               confirmButtonColor: '#3085d6'\r\n                           })\r\n                       }\r\n                   } else {\r\n                       Swal.fire({\r\n                           title: '결제 데이터 없음',\r\n                           text: '결제 데이터가 존재하지 않습니다.',\r\n                           icon: 'warning',\r\n                           confirmButtonText: '확인',\r\n                           confirmButtonColor: '#3085d6'\r\n                       })\r\n                   }\r\n               }\r\n           }\r\n       }\r\n   })\r\n   \r\n   const myFavoriteHospital = document.getElementById('myFavoriteHospital')\r\n   document.addEventListener('DOMContentLoaded', async () => {\r\n         const id = '${hospital.id}'\r\n        const isFavorite = await getFavorite(id)\r\n        // 병원이 즐겨찾기일 경우, 즐겨찾기 아이콘을 배경으로 설정\r\n        if (isFavorite == 1) {\r\n            myFavoriteHospital.style.backgroundImage = 'url(\\'' + cpath + '/resources/image/KakaoTalk_20241118_165527259_01.png\\')'\r\n        } else {\r\n            myFavoriteHospital.style.backgroundImage = 'url(\\'' + cpath + '/resources/image/KakaoTalk_20241118_165527259_02.png\\')'\r\n        }\r\n        myFavoriteHospital.onclick = async (event) => {\r\n            if('${login}' != '' && (await getFavorite(id)) == 1) {\r\n                Swal.fire({\r\n                    title: '즐겨찾기 삭제',\r\n                    text: '해당 병원을 즐겨찾기 삭제 하시겠습니까?',\r\n                    icon: 'question',\r\n                    confirmButtonText: '확인',\r\n                    cancelButtonText: '취소',\r\n                    showCancelButton: true,\r\n                    allowOutsideClick: false,\r\n                    allowEscapeKey: false,\r\n                    showCloseButton: false,\r\n                    confirmButtonColor: '#3085d6', // 확인 버튼 색상\r\n                    cancelButtonColor: '#d33'\r\n                }).then((result) => {if(result.isConfirmed) myFavorite(event)})\r\n            }\r\n            else if('${login}' != '' && await getFavorite(id) != 1) {\r\n                Swal.fire({\r\n                    title: '즐겨찾기 추가',\r\n                    text: '해당 병원을 즐겨찾기 추가 하시겠습니까?',\r\n                    icon: 'question',\r\n                    confirmButtonText: '확인',\r\n                    cancelButtonText: '취소',\r\n                    showCancelButton: true,\r\n                    allowOutsideClick: false,\r\n                    allowEscapeKey: false,\r\n                    showCloseButton: false,\r\n                    confirmButtonColor: '#3085d6', // 확인 버튼 색상\r\n                    cancelButtonColor: '#d33'\r\n                }).then((result) => {if(result.isConfirmed) myFavorite(event)})\r\n            }\r\n            else {\r\n                Swal.fire({\r\n                    title: '',\r\n                    text: '로그인 해주세요.',\r\n                    icon: 'info',\r\n                    confirmButtonText: '확인',\r\n                    cancelButtonText: '취소',\r\n                    showCancelButton: true,\r\n                    allowOutsideClick: false,\r\n                    allowEscapeKey: false,\r\n                    showCloseButton: false,\r\n                    confirmButtonColor: '#3085d6', // 확인 버튼 색상\r\n                    cancelButtonColor: '#d33'\r\n                }).then((result) => {\r\n                    if(result.isConfirmed){\r\n                        const currentPageUrl = window.location.href\r\n                        window.location.href = cpath + '/member/login?redirectUrl=' + encodeURIComponent(currentPageUrl) // 로그인 페이지로 리다이렉션\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    })\r\n\r\n    const footer = document.getElementById('footer')\r\n    footer.style.backgroundColor = '#929497'\r\n</script>\r\n\r\n\r\n\r\n\r\n</body>\r\n</html>\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/hospital/view.jsp b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/hospital/view.jsp
--- a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/hospital/view.jsp	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/hospital/view.jsp	(date 1732155578128)
@@ -47,13 +47,13 @@
     }
     /* 예약 취소 및 변경 버튼 스타일 */
     #bookingCancelBtn, #bookingUpdateBtn,#bookingInsertBtn , #paymentBtn ,#cancelPaymentBtn {
-        padding: 12px 20px; /* 패딩 */
-        font-size: 1.1em; /* 폰트 크기 */
-        font-weight: bold; /* 폰트 두께 */
-        color: #fff; /* 글자 색상 */
-        border: none; /* 테두리 없음 */
-        border-radius: 5px; /* 둥근 모서리 */
-        cursor: pointer; /* 커서 모양 변경 */
+        padding: 12px 20px; 
+        font-size: 1.1em; 
+        font-weight: bold; 
+        color: #fff; 
+        border: none; 
+        border-radius: 5px; 
+        cursor: pointer; 
         transition: background-color 0.3s ease, transform 0.2s ease; /* 배경색 변화와 변형 애니메이션 */
     }
     #bookingInsertBtn {
Index: target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/reCheckEmail.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" \r\n\tpageEncoding=\"UTF-8\"%>\r\n<%@ include file=\"../header.jsp\" %>\r\n\r\n<form method=\"POST\" id=\"reCheckForm\">\r\n    <h3>고객님의 ID를 입력하세요.</h3>\r\n    <p><input type=\"text\" name=\"userid\" placeholder=\"기억하시는 ID를 입력해주세요\" required></p>\r\n    <p><input type=\"submit\" value=\"조회\"></p>\r\n</form>\r\n\r\n<script>\r\n\tdocument.addEventListener('DOMContentLoaded', function() {\r\n\t    const form = document.getElementById('reCheckForm')\r\n\t    form.onsubmit = function(event) {\r\n\t        event.preventDefault()\r\n\t        \r\n\t        const formData = new FormData(form)\r\n\t        fetch('${cpath}/member/reCheckEmail', {\r\n\t            method: 'POST',\r\n\t            body: formData\r\n\t        })\r\n\t        .then(response => response.json()) // JSON으로 응답 받기\r\n\t        .then(data => {\r\n\t            if (data.status === 'fail') {\r\n\t                swal({\r\n\t                    title: \"조회 실패\",\r\n\t                    text: data.message,\r\n\t                    type: \"error\",\r\n\t                    confirmButtonText: \"확인\"\r\n\t                }, function() {\r\n\t                    location.href = '${cpath}/member/reCheckEmail'\r\n\t                })\r\n\t            } else if (data.status === 'success') {\r\n\t                swal({\r\n\t                    title: \"조회 성공\",\r\n\t                    text: data.message,\r\n\t                    type: \"success\",\r\n\t                    confirmButtonText: \"로그인 페이지로\"\r\n\t                }, function() {\r\n\t                    location.href = '${cpath}/member/login'\r\n\t                })\r\n\t            } else {\r\n\t                swal(\"알림\", \"예상치 못한 응답을 받았습니다.\", \"warning\");\r\n\t            }\r\n\t        })\r\n\t        .catch(error => {\r\n\t            console.error('Error:', error)\r\n\t            swal(\"오류\", \"처리 중 오류가 발생했습니다.\", \"error\")\r\n\t        })\r\n\t    }\r\n\t})\r\n</script>\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/reCheckEmail.jsp b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/reCheckEmail.jsp
--- a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/reCheckEmail.jsp	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/reCheckEmail.jsp	(date 1732155578142)
@@ -1,54 +1,142 @@
 <%@ page language="java" contentType="text/html; charset=UTF-8" 
-	pageEncoding="UTF-8"%>
+   pageEncoding="UTF-8"%>
 <%@ include file="../header.jsp" %>
-
-<form method="POST" id="reCheckForm">
-    <h3>고객님의 ID를 입력하세요.</h3>
-    <p><input type="text" name="userid" placeholder="기억하시는 ID를 입력해주세요" required></p>
-    <p><input type="submit" value="조회"></p>
-</form>
+<style>
+   body{
+        background: linear-gradient(to bottom,#2c3e50, #a2a3a3);
+        width: 100vw;
+        height: 100vh;
+    }
+    .EreCheckmodal {
+       width: 100%;
+       height: 91%;
+       display: flex;
+       justify-content: center;
+       align-items: center;
+   }   
+   .EreCheckmodal > .ImgEreCheckoverlay {
+       width: 100%;
+       height: 100%;
+       background-color: rgba(0, 0, 0, 0.8);
+       z-index: 1;
+   }   
+   .EreCheckmodal > .ImgEreCheckcontent {
+       width: 300px;
+       height: 400px;
+       display: flex;
+       flex-direction: column;
+       justify-content: center;
+       align-items: center;
+       z-index: 2;
+       position: fixed;
+       top: 50%;
+       left: 50%;
+       transform: translate(-50%, -50%);
+       border-radius: 25px;
+       box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
+   }
+   .EreCheckcontent {
+       width: 100%;
+       max-width: 400px;
+       padding: 20px;
+       background-color: rgba(247, 249, 250, 0.8);
+       border-radius: 8px;
+       box-shadow: 0 0 10px rgba(0,0,0,0.1);
+       text-align: center;
+       /* background-color: rgba(0, 0, 0, 0.5); */
+   }   
+   .EreCheckcontent form {
+       display: flex;
+       flex-direction: column;
+       align-items: center;
+   }   
+   .EreCheckcontent input[type="text"],
+   .EreCheckcontent input[type="submit"] {
+       width: 100%;
+       padding: 10px;
+       margin: 5px 0;
+       border: 1px solid #ddd;
+       border-radius: 4px;
+   }   
+   .EreCheckcontent input[type="submit"] {
+       background-color: #2c3e50;
+       font-size: 17px;
+       color: white;
+       cursor: pointer;
+       width: 213px;
+       height: 43px;
+       margin-bottom: 0;
+       padding-top: 6.5px;
+       display: flex;
+       justify-content: center;
+       align-items: center;
+       text-align: center;
+       border: 0;
+   }   
+   .EreCheckcontent a {
+       color: #333;
+       text-decoration: none;
+       margin: 5px;
+   }
+</style>
+<div class="EreCheckmodal">
+<div class="EreCheckoverlay"></div>
+      <div class="EreCheckcontent">
+   <h3 style="margin-left: 25px;">고객님의 ID를 입력하세요.</h3>
+   <form method="POST" id="EreCheckForm">
+       <p><input type="text" name="userid" placeholder="기억하시는 ID를 입력해주세요" required></p>
+       <p style="padding-left: 20px;"><input type="submit" value="조회"></p>
+   </form>
+      <p style="margin-left: 18px;"><a href="${cpath }/member/resetPassword"><button type="button" formnovalidate>뒤로가기</button></a></p>
+   </div>
+</div>
+
+<%@ include file="../footer.jsp" %>
 
 <script>
-	document.addEventListener('DOMContentLoaded', function() {
-	    const form = document.getElementById('reCheckForm')
-	    form.onsubmit = function(event) {
-	        event.preventDefault()
-	        
-	        const formData = new FormData(form)
-	        fetch('${cpath}/member/reCheckEmail', {
-	            method: 'POST',
-	            body: formData
-	        })
-	        .then(response => response.json()) // JSON으로 응답 받기
-	        .then(data => {
-	            if (data.status === 'fail') {
-	                swal({
-	                    title: "조회 실패",
-	                    text: data.message,
-	                    type: "error",
-	                    confirmButtonText: "확인"
-	                }, function() {
-	                    location.href = '${cpath}/member/reCheckEmail'
-	                })
-	            } else if (data.status === 'success') {
-	                swal({
-	                    title: "조회 성공",
-	                    text: data.message,
-	                    type: "success",
-	                    confirmButtonText: "로그인 페이지로"
-	                }, function() {
-	                    location.href = '${cpath}/member/login'
-	                })
-	            } else {
-	                swal("알림", "예상치 못한 응답을 받았습니다.", "warning");
-	            }
-	        })
-	        .catch(error => {
-	            console.error('Error:', error)
-	            swal("오류", "처리 중 오류가 발생했습니다.", "error")
-	        })
-	    }
-	})
+   document.addEventListener('DOMContentLoaded', function() {
+       const form = document.getElementById('reCheckForm')
+       form.onsubmit = function(event) {
+           event.preventDefault()
+           
+           const formData = new FormData(form)
+           fetch('${cpath}/member/reCheckEmail', {
+               method: 'POST',
+               body: formData
+           })
+           .then(response => response.json()) // JSON으로 응답 받기
+           .then(data => {
+               if (data.status === 'fail') {
+                   swal({
+                       title: "조회 실패",
+                       text: data.message,
+                       type: "error",
+                       confirmButtonText: "확인"
+                   }, function() {
+                       location.href = '${cpath}/member/reCheckEmail'
+                   })
+               } else if (data.status === 'success') {
+                   swal({
+                       title: "조회 성공",
+                       text: data.message,
+                       type: "success",
+                       confirmButtonText: "로그인 페이지로"
+                   }, function() {
+                       location.href = '${cpath}/member/login'
+                   })
+               } else {
+                   swal("알림", "예상치 못한 응답을 받았습니다.", "warning");
+               }
+           })
+           .catch(error => {
+               console.error('Error:', error)
+               swal("오류", "처리 중 오류가 발생했습니다.", "error")
+           })
+       }
+   })
+   
+   const footer = document.getElementById('footer')
+   footer.style.backgroundColor = '#a2a3a3'
 </script>
 
 </body>
Index: target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/pwUpdate.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<%@ include file=\"../header.jsp\" %>\r\n\r\n<h3>패스워드 수정</h3>\r\n\r\n<form method=\"POST\">\r\n\t<p><input type=\"password\" name=\"currentPw\" placeholder=\"현재 등록된 비밀번호 입력\" required autocomplete=\"off\"></p>\r\n\t<p><input type=\"password\" name=\"newPw\" placeholder=\"변경할 비밀번호 입력\" required></p>\r\n\t<p><input type=\"submit\" value=\"변경하기\"></p> \r\n</form>\r\n\r\n<script>\r\n\tdocument.addEventListener('DOMContentLoaded', function() {\r\n\t    // 서버에서 전송된 메시지 받기\r\n\t    const error = '${error}'\r\n\t    const pwMessage = '${pwMessage}'\r\n\t\tconsole.log(pwMessage)\r\n\t    if (error) {\r\n\t        swal({\r\n\t            title: \"변경 실패\",\r\n\t            text: error,\r\n\t            type: \"error\",\r\n\t            button: \"확인\"\r\n\t        })\r\n\t    } \r\n\t    if (pwMessage) {\r\n\t        swal({\r\n\t            title: \"변경 성공\",\r\n\t            text: pwMessage,\r\n\t            type: \"success\",\r\n\t            button: \"확인\"\r\n\t        }).then(() => {\r\n\t            location.href = \"${cpath}/member/login\"\r\n\t        })\r\n\t    }\r\n\t})\r\n</script>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/pwUpdate.jsp b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/pwUpdate.jsp
--- a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/pwUpdate.jsp	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/pwUpdate.jsp	(date 1732155578140)
@@ -2,20 +2,120 @@
     pageEncoding="UTF-8"%>
 <%@ include file="../header.jsp" %>
 
-<h3>패스워드 수정</h3>
-
-<form method="POST">
-	<p><input type="password" name="currentPw" placeholder="현재 등록된 비밀번호 입력" required autocomplete="off"></p>
-	<p><input type="password" name="newPw" placeholder="변경할 비밀번호 입력" required></p>
-	<p><input type="submit" value="변경하기"></p> 
-</form>
-
+<style>
+	@keyframes slideBackground {
+	    0% {
+	        background-position: 0% 10%;
+	    }
+	    50% {
+	        background-position: 100% 10%;
+	    }
+	    100% {
+	        background-position: 0% 10%;
+	    }
+	}
+	body {
+	    background-image: linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)), url('${cpath}/resources/image/network-security-system-perforated-paper-padlock.jpg');
+	    background-size: 110% auto;
+	    background-position: 0% 10%;
+	    animation: slideBackground 50s ease infinite;
+	    background-repeat: no-repeat;
+	    background-attachment: fixed;
+	}
+	.pwUpdateModal {
+	/* 	position: fixed;
+        top: 50%;
+        left: 50%;
+        transform: translate(-50%, -50%);
+        width: 100%;
+        height: 100%;
+        display: flex;
+        justify-content: center;
+        align-items: center; */
+        position: fixed;
+        top: 0;
+        left: 0;
+        width: 100%;
+        height: 100%;
+        display: flex;
+        justify-content: center;
+        align-items: center;
+	}
+	.pwUpdatecontent {
+		width: 480px;
+        height: 300px;
+        padding: 20px;
+        background-color: rgba(247, 249, 250, 0.8);
+        border-radius: 8px;
+        box-shadow: 0 0 10px rgba(0,0,0,0.1);
+        text-align: center;
+        padding-top: 25px;
+	}
+	.pwUpdateoverlay {
+		background-color: rgba(0, 0, 0, 0.3);
+    	border-radius: 8px;
+    	height: 288px;
+	}
+	.topText {
+    	display: flex;
+    }
+    .text1 {
+    	margin-top: 5px;
+    	text-align: left;
+	    margin-left: 15px;
+    }
+    .text2 {
+    	text-align: left;
+	    font-size: 14px;
+	    margin-top: 22px;
+    }
+    .pwUpdateBtn {
+    	padding-left: 112px;
+    }
+    .pwUpdateBtn input[type="submit"]{
+    	background-color: #2c3e50;
+	    font-size: 17px;
+	    color: white;
+	    width: 177px;
+	    height: 32px;
+	    margin-bottom: 0;
+	    padding-top: 0px;
+	    display: flex;
+	    justify-content: center;
+	    align-items: center;
+	    text-align: center;
+	    border: 0;
+	    border-radius: 4px;
+	    text-decoration: none;
+	    margin-left: 40px;
+	    padding-bottom: 3px;
+    }
+    .pwUpdateBtn input[type="submit"]:hover {
+    	background-color: #34495e;
+    }
+</style>
+<div id="pwUpdateModal" class="pwUpdateModal" >
+<div class="pwUpdatecontent">
+	<div class="pwUpdateoverlay">
+	<div class="topText">
+		<div><h3 class="text1">AMD, Password Update</h3></div>
+		<div><p  class="text2">비밀번호를 수정하여 개인보안을 관리할 수 있습니다.</p></div>
+	</div>
+	<form method="POST">
+		<p><input type="password" name="currentPw" placeholder="현재 등록된 비밀번호 입력" required autocomplete="off"></p>
+		<p><input type="password" name="newPw" placeholder="변경할 비밀번호 입력" required></p>
+		<p class="pwUpdateBtn"><input type="submit" value="변경하기"></p> 
+	</form>
+		<p><a href="${cpath }/member/info/${login.id}"><button>뒤로가기</button></a></p>
+	</div>	
+	</div>
+</div>
 <script>
 	document.addEventListener('DOMContentLoaded', function() {
 	    // 서버에서 전송된 메시지 받기
 	    const error = '${error}'
-	    const pwMessage = '${pwMessage}'
-		console.log(pwMessage)
+	    const message2 = '${message2}'
+	
 	    if (error) {
 	        swal({
 	            title: "변경 실패",
@@ -23,15 +123,15 @@
 	            type: "error",
 	            button: "확인"
 	        })
-	    } 
-	    if (pwMessage) {
+	    }
+	    if (message2) {
 	        swal({
 	            title: "변경 성공",
-	            text: pwMessage,
+	            text: message2,
 	            type: "success",
-	            button: "확인"
-	        }).then(() => {
-	            location.href = "${cpath}/member/login"
+	            button: "확인",
+	        }, function() {
+	            location.href = '${cpath}/member/login'
 	        })
 	    }
 	})
Index: target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/header.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n         pageEncoding=\"UTF-8\"%>\r\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\r\n<%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %>\r\n<%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\" %>\r\n<c:set var=\"cpath\" value=\"${pageContext.request.contextPath }\" />\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>finalProject</title>\r\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Do+Hyeon&family=Gugi&family=Noto+Sans+KR:wght@100..900&display=swap\" rel=\"stylesheet\">\r\n    <style>\r\n    \tbody, html {\r\n\t        margin: 0;\r\n\t        padding: 0;\r\n\t        font-family: Arial, sans-serif;\r\n    \t}\r\n        /*    챗봇 아이콘 */\r\n        #chat_icon img {\r\n            position: fixed;\r\n            right: 50px;\r\n            bottom: 50px;\r\n        }\r\n\r\n        /*   민재 파트 (홈 검색 기능) */\r\n\r\n\r\n        #mapModal {\r\n            z-index: 4;\r\n            width: 100%;\r\n            height: 100%;\r\n            display: none; /* 기본적으로 숨김 */\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            background-color: rgba(0, 0, 0, 0.7); /* 반투명 검은색 배경 */\r\n        }\r\n\r\n        #mapModal.show {\r\n            display: block;\r\n        }\r\n\r\n        #mapModal > .content {\r\n            border: 2px solid grey;\r\n            background-color: white;\r\n            position: fixed;\r\n            width: 80%; /* 모달 너비 설정 */\r\n            max-width: 1000px; /* 최대 너비 */\r\n            height: 80%; /* 모달 높이 설정 */\r\n            max-height: 500px; /* 최대 높이 */\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            display: flex; /* 지도와 리스트를 가로로 나란히 배치 */\r\n            flex-direction: row; /* 가로 배치 */\r\n            border-radius: 25px;\r\n            box-shadow: 10px 10px 10px grey;\r\n        }\r\n\r\n\r\n        #hospitalList {\r\n            list-style-type: none;\r\n            padding:50px 10px;\r\n            overflow-y: auto;\r\n            margin: 0;\r\n            max-height: 100%; /* 리스트가 모달 높이에 맞게 늘어나도록 설정 */\r\n            width: 30%; /* 리스트 영역을 지도 옆에 붙게 설정 */\r\n            background-color: rgba(255, 255, 255, 0.4); /* 투명한 배경 설정 (투명도 높임) */\r\n            opacity: 0.8;\r\n            border-radius: 10px;\r\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); /* 그림자 효과 */\r\n            position: relative; /* 부모 요소에 맞춰 위치 */\r\n        }\r\n        #hospitalList::-webkit-scrollbar {\r\n            display: none;\r\n        }\r\n        .hospital-list li {\r\n            margin: 5px 0;\r\n            cursor: pointer;\r\n            padding: 5px;\r\n            border: 1px solid #ccc;\r\n            border-radius: 5px;\r\n            transition: background-color 0.3s;\r\n        }\r\n\r\n        .hospital-list li:hover {\r\n            background-color: #e9ecef; /* 마우스 오버 시 배경색 변경 */\r\n        }\r\n\r\n\r\n        #map2 {\r\n            width: 70%; /* 지도 영역 크기 */\r\n            height: 100%;\r\n            position: relative;\r\n        }\r\n\r\n\r\n\r\n        .hospital-list li.selected {\r\n            background-color: #007bff; /* 선택된 항목 배경색 */\r\n            color: white; /* 선택된 항목 글자색 */\r\n            font-weight: bold; /* 선택된 항목 글씨 진하게 */\r\n        }\r\n\r\n        \r\n        header{\r\n            width: 100%;\r\n            height: 80px;\r\n            display: flex;\r\n            z-index: 100;\r\n            background-color: rgba(255, 255, 255, 0.2);\r\n   \t\t\tbackdrop-filter: blur(3px);\r\n        }\r\n        .bookingModal {\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            z-index: 1000;\r\n        }\r\n\r\n        .hidden {\r\n            display: none!important;\r\n        }\r\n\r\n\r\n        .bookingOverlay {\r\n            position: absolute;\r\n            width: 100%;\r\n            height: 100%;\r\n            background-color: rgba(0, 0, 0, 0.5); /* 반투명한 검은색 배경 */\r\n        }\r\n\r\n        .bookingContent {\r\n            position: relative;\r\n            background-color: white;\r\n            padding: 30px;\r\n            border-radius: 15px;\r\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n            z-index: 5;\r\n            max-width: 500px;\r\n            width: 90%;\r\n            max-height: 80vh;\r\n            overflow-y: auto;\r\n            scrollbar-width: none; /* Firefox */\r\n            -ms-overflow-style: none; /* Internet Explorer 10+ */\r\n        }\r\n\r\n        .bookingContent::-webkit-scrollbar {\r\n            display: none; /* WebKit */\r\n        }\r\n\r\n        .bookingTitle {\r\n            font-size: 24px;\r\n            color: #2c3e50;\r\n            text-align: center;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .bookingDetail {\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        #bookingInsertForm input[type=\"datetime-local\"],\r\n        #bookingUpdateForm input[type=\"datetime-local\"] {\r\n            width: 100%;\r\n            padding: 5px;\r\n            border: 1px solid #ddd;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n            color: #333;\r\n        }\r\n\r\n        #bookingInsertForm input[type=\"submit\"],\r\n        #bookingUpdateForm input[type=\"submit\"] {\r\n            width: 100%;\r\n            padding: 12px;\r\n            background-color: #2c3e50;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 8px;\r\n            font-size: 18px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            transition: background-color 0.3s ease;\r\n        }\r\n\r\n        #bookingInsertForm input[type=\"submit\"]:hover,\r\n        #bookingUpdateForm input[type=\"submit\"]:hover {\r\n            background-color: #34495e;\r\n        }\r\n\r\n        #closeBookingBtn ,#closeMapModalBtn{\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 10px;\r\n            background-color: #ff4d4d;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 5px;\r\n            padding: 5px 10px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            transition: background-color 0.3s ease, transform 0.2s ease;\r\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        #closeBookingBtn:hover ,#closeMapModalBtn:hover{\r\n           background-color: #ff3333;\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\r\n        }\r\n\r\n        #closeBookingBtn:active {\r\n            transform: translateY(0);\r\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        /* 애니메이션 효과 */\r\n        @keyframes fadeIn {\r\n            from { opacity: 0; transform: translateY(-20px); }\r\n            to { opacity: 1; transform: translateY(0); }\r\n        }\r\n\r\n        .bookingContent {\r\n            animation: fadeIn 0.3s ease-out;\r\n        }\r\n\r\n        /* 반응형 디자인을 위한 미디어 쿼리 */\r\n        @media (max-width: 600px) {\r\n            .bookingContent {\r\n                padding: 25px;\r\n                width: 95%;\r\n            }\r\n\r\n            .bookingTitle {\r\n                font-size: 20px;\r\n            }\r\n        }\r\n\r\n\r\n        #notificationPaging {\r\n            justify-content: space-between;\r\n            display: flex;\r\n        }\r\n\r\n        #notificationCountSpan {\r\n            position: absolute;\r\n            top: -5px;\r\n            right: -5px;\r\n            background-color: red;\r\n            color: white;\r\n            border-radius: 50%;\r\n            padding: 2px 6px;\r\n            font-size: 12px;\r\n        }\r\n\r\n        #myFavoritesPaging {\r\n            justify-content: space-between;\r\n            display: flex;\r\n        }\r\n        a {\r\n            color: inherit;\r\n            text-decoration: none;\r\n        }\r\n        /* 최근 본 병원 스타일 */\r\n        #recentHospitalsContainer {\r\n            width: 180px; /* 컨테이너 너비를 조금 더 줄임 */\r\n            position: fixed; /* 화면에 고정 */\r\n            top: 118px; /* 상단에서 80px 떨어지게 위치 */\r\n            right: 20px; /* 화면 오른쪽에 위치 */\r\n            background-color: #f9f9f9;\r\n            padding: 10px;\r\n            border-radius: 8px; /* 카드와 동일하게 둥글게 */\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n            z-index: 5; /* 다른 콘텐츠 위에 표시 */\r\n            max-height: 75vh; /* 화면 높이에 맞게 제한 */\r\n            overflow-y: hidden; /* 스크롤 숨기기 */\r\n            border: 1px solid #e0e0e0; /* 약간의 테두리로 강조 */\r\n        }\r\n\r\n        #recentHospitalsContainer h2 {\r\n            font-size: 18px; /* 제목 크기 약간 줄임 */\r\n            font-weight: bold;\r\n            margin-bottom: 10px; /* 여백 줄이기 */\r\n            color: #333;\r\n            text-align: center;\r\n        }\r\n\r\n        .recent-hospitals {\r\n            display: flex;\r\n            flex-direction: column; /* 세로로 정렬 */\r\n            gap: 8px; /* 카드 간격을 조금 줄임 */\r\n            max-height: 70vh; /* 내용이 많으면 더 이상 스크롤되지 않게 */\r\n        }\r\n\r\n        .hospital-card {\r\n            width: 100%; /* 카드가 컨테이너에 맞게 꽉 차게 */\r\n            background-color: #fff;\r\n            border-radius: 6px; /* 카드 모서리 둥글게 */\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n            overflow: hidden;\r\n            transition: transform 0.3s ease-in-out;\r\n            display: flex;\r\n            flex-direction: column;\r\n            margin: 10px 0px;\r\n        }\r\n\r\n        .hospital-card:hover {\r\n            transform: scale(1.03); /* 카드 호버시 확대 효과 */\r\n        }\r\n\r\n        .recentHospital-image {\r\n            width: 100%;\r\n            height: 100px; /* 이미지 크기를 조금 더 줄임 */\r\n            object-fit: cover; /* 이미지 비율 유지하면서 잘리도록 설정 */\r\n        }\r\n\r\n        .recentHospital-info {\r\n            padding: 8px; /* 패딩을 줄여서 내용 영역을 더 좁게 */\r\n            font-size: 13px; /* 폰트 크기 좀 더 줄임 */\r\n        }\r\n\r\n        .hospital-name {\r\n            font-size: 14px; /* 병원 이름 폰트 크기 더 줄임 */\r\n            font-weight: bold;\r\n            margin-bottom: 5px;\r\n            color: #007bff;\r\n            white-space: nowrap; /* 텍스트가 한 줄로 나오도록 */\r\n            overflow: hidden;\r\n            text-overflow: ellipsis; /* 긴 이름은 ... 으로 표시 */\r\n        }\r\n\r\n        .loginIcon ,.loginIcon2 {\r\n            background-image: url('${cpath}/resources/image/로그인아이콘최종.png');\r\n            position: absolute;\r\n            width: 30px;\r\n            height: 30px;\r\n            top: 30px;\r\n            right: 30px;\r\n            background-size: cover;\r\n            cursor: pointer;\r\n        }\r\n        .notificationIcon {\r\n            background-image: url('${cpath}/resources/image/알림.png');\r\n            position: absolute;\r\n            width: 27px;\r\n            height: 27px;\r\n            top: 33px;\r\n            right: 150px;\r\n            background-size: cover;\r\n        }\r\n        .healthInfoIcon {\r\n        \tbackground-image: url('${cpath}/resources/image/건강정보.png');\r\n            position: absolute;\r\n            width: 30px;\r\n            height: 30px;\r\n            top: 31px;\r\n            right: 90px;\r\n            background-size: cover;\r\n        }\r\n        .myFavoritesIcon{\r\n            background-image: url('${cpath}/resources/image/즐겨찾기.png');\r\n            position: absolute;\r\n            width: 30px;\r\n            height: 30px;\r\n            top: 31px;\r\n            right: 205px;\r\n            background-size: cover;\r\n        }\r\n    </style>\r\n\r\n<%--    알림 메시지 스타일--%>\r\n        <style>\r\n            /* 알림 테이블 스타일 */\r\n            #notificationTable {\r\n                width: 100%;\r\n                border-collapse: collapse;\r\n                margin-top: 20px;\r\n                box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n            }\r\n\r\n            #notificationTable th, #notificationTable td {\r\n                padding: 12px 15px;\r\n                text-align: left;\r\n                border-bottom: 1px solid #e0e0e0;\r\n            }\r\n\r\n            #notificationTable th {\r\n                background-color: #f8f8f8;\r\n                font-weight: bold;\r\n                color: #333;\r\n            }\r\n\r\n            /* 읽지 않은 알림 스타일 */\r\n            #notificationTable th[style*=\"background-color: lightskyblue\"] {\r\n                background-color: #e3f2fd;\r\n                font-weight: bold;\r\n            }\r\n\r\n            /* 알림 삭제 버튼 스타일 */\r\n            .notificationDeleteBtn {\r\n                padding: 6px 12px;\r\n                background-color: #ff4d4d;\r\n                color: white;\r\n                border: none;\r\n                border-radius: 4px;\r\n                cursor: pointer;\r\n                transition: background-color 0.3s;\r\n            }\r\n\r\n            .notificationDeleteBtn:hover  {\r\n                background-color: #ff3333; /* 삭제 버튼의 호버 효과는 유지 */\r\n            }\r\n\r\n            /* 페이징 스타일 */\r\n            #notificationPaging {\r\n                display: flex;\r\n                justify-content: space-around;\r\n                margin-top: 20px;\r\n                margin-bottom: 20px;\r\n            }\r\n\r\n            #notificationPaging td {\r\n                padding: 8px 12px;\r\n                margin: 0 5px;\r\n                cursor: pointer;\r\n                border: 1px solid #ddd;\r\n                border-radius: 4px;\r\n            }\r\n\r\n            /* 현재 페이지 강조 스타일 */\r\n            #notificationPaging td[style*=\"font-weight: bold\"] {\r\n                background-color: #007bff; /* 강조 색상 */\r\n                color: white; /* 강조 색상에서의 글자 색상 */\r\n            }\r\n\r\n            /* '이전'과 '다음' 버튼 스타일 */\r\n            #notificationPaging td:first-child,\r\n            #notificationPaging td:last-child {\r\n                background-color: #f8f9fa; /* 기본 배경색 */\r\n                font-weight: bold; /* 두꺼운 폰트 */\r\n            }\r\n\r\n            /* 알림 없음 메시지 스타일 */\r\n            #notificationTableBody:empty::before {\r\n                content: '알림이 없습니다.';\r\n                display: block;\r\n                text-align: center;\r\n                padding: 20px;\r\n                color: #666; /* 회색 글자 색상 */\r\n                font-style: italic; /* 이탤릭체 */\r\n            }\r\n\r\n            /* 알림 셀 스타일 */\r\n            .notification-cell {\r\n                padding: 15px; /* 패딩 */\r\n                border-bottom: 1px solid #ddd; /* 하단 테두리 */\r\n            }\r\n\r\n            /* 알림 내용 스타일 */\r\n            .notification-content {\r\n                display: flex; /* 플렉스 박스 사용 */\r\n                flex-direction: column; /* 세로 방향 정렬 */\r\n            }\r\n\r\n            /* 날짜 및 이름 강조 스타일 */\r\n            .notification-date {\r\n                font-size: 0.9em; /* 폰트 크기 조정 */\r\n                color: #666; /* 회색 글자 색상 */\r\n            }\r\n\r\n            .notification-name {\r\n                font-weight: bold; /* 두꺼운 폰트 */\r\n                color: #333; /* 어두운 글자 색상 */\r\n            }\r\n\r\n            /* 메시지 스타일 */\r\n            .notification-message {\r\n                font-size: 1em; /* 기본 폰트 크기 */\r\n                color: #444; /* 어두운 회색 글자 색상 */\r\n            }\r\n\r\n            /* '일괄 삭제하기' 버튼 스타일 */\r\n            #deleteNotificationAllBtn {\r\n                margin: 10px 10px;\r\n                padding: 10px 20px;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                background-color: #ff4d4d;\r\n                color: white;\r\n                border: none;\r\n                border-radius: 8px;\r\n                cursor: pointer;\r\n                transition: background-color 0.3s ease, transform 0.2s ease;\r\n            }\r\n\r\n            /* '일괄 삭제하기' 버튼 호버 및 클릭 효과 */\r\n            #deleteNotificationAllBtn:hover {\r\n                background-color: #ff3333; /* 호버 시 배경색 */\r\n            }\r\n    </style>\r\n\r\n<%--    즐겨찾기 스타일--%>\r\n    <style>\r\n        #myFavoritesTable {\r\n            width: 500px;\r\n            border-collapse: collapse;\r\n            margin-top: 20px;\r\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n\r\n        }\r\n\r\n        #myFavoritesTable th, #myFavoritesTable td {\r\n            text-align: center;\r\n            border-bottom: 1px solid #e0e0e0;\r\n        }\r\n        #myFavoritesTable th {\r\n            background-color: #f8f8f8;\r\n            font-weight: bold;\r\n            color: #333;\r\n            padding: 20px 0px;\r\n        }\r\n        /* 즐겨찾기 목록의 링크 스타일 */\r\n        #myFavoritesTable a {\r\n            color: #007bff; /* 링크 색상 */\r\n            text-decoration: none; /* 밑줄 제거 */\r\n        }\r\n        #myFavoritesTable th:nth-child(2){\r\n            width: 18%;\r\n            font-size: 14px;\r\n        }\r\n        #myFavoritesTable a:hover {\r\n            text-decoration: underline; /* 호버 시 밑줄 추가 */\r\n        }\r\n        /* 페이징 스타일 */\r\n        #myFavoritesPaging {\r\n            display: flex;\r\n            justify-content: space-around;\r\n            margin-top: 20px;\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        #myFavoritesPaging td {\r\n            padding: 8px 10px; /* 패딩 조정 (위아래 8px, 좌우 10px) */\r\n            margin: 0 5px; /* 좌우 여백 */\r\n            cursor: pointer; /* 커서 모양 변경 */\r\n            border: 1px solid #ddd; /* 테두리 색상 */\r\n            border-radius: 4px; /* 둥근 모서리 */\r\n            min-width: 40px; /* 최소 너비 설정 */\r\n            text-align: center; /* 텍스트 중앙 정렬 */\r\n        }\r\n\r\n        /* 현재 페이지 강조 스타일 */\r\n        #myFavoritesPaging td[style*=\"font-weight: bold\"] {\r\n            background-color: #007bff; /* 강조 색상 */\r\n            color: white; /* 강조 색상에서의 글자 색상 */\r\n        }\r\n\r\n        /* '이전'과 '다음' 버튼 스타일 */\r\n        #myFavoritesPaging td:first-child,\r\n        #myFavoritesPaging td:last-child {\r\n            background-color: #f8f9fa; /* 기본 배경색 */\r\n            font-weight: bold; /* 두꺼운 폰트 */\r\n        }\r\n        /* 알림 없음 메시지 스타일 */\r\n        #myFavoritesTableBody:empty::before {\r\n            content: '즐겨찾기 한 병원이 없습니다.';\r\n            display: block;\r\n            text-align: center;\r\n            padding: 20px;\r\n            color: #666; /* 회색 글자 색상 */\r\n            font-style: italic; /* 이탤릭체 */\r\n        }\r\n\r\n        /* 삭제 버튼 스타일 */\r\n        .myFavoritesDeleteBtn {\r\n            padding: 6px 12px;\r\n            background-color: #ff4d4d; /* 삭제 버튼 배경색 */\r\n            color: white; /* 버튼 텍스트 색상 */\r\n            border: none; /* 테두리 제거 */\r\n            border-radius: 4px; /* 버튼 모서리 둥글게 */\r\n            cursor: pointer; /* 클릭 가능 커서 */\r\n            transition: background-color 0.3s ease, transform 0.2s ease; /* 효과 */\r\n        }\r\n\r\n        .myFavoritesDeleteBtn:hover {\r\n            background-color: #ff3333; /* 호버 시 배경색 */\r\n        }\r\n\r\n        .myFavoritesDeleteBtn:active {\r\n            transform: scale(0.95); /* 클릭 시 버튼 크기 감소 */\r\n        }\r\n\r\n        /* '일괄 삭제하기' 버튼 스타일 */\r\n        #deleteMyFavoritesAllBtn {\r\n            margin: 10px 10px;\r\n            padding: 10px 20px;\r\n            font-size: 14px;\r\n            font-weight: bold;\r\n            background-color: #ff4d4d;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 8px;\r\n            cursor: pointer;\r\n            transition: background-color 0.3s ease, transform 0.2s ease;\r\n        }\r\n\r\n        #deleteMyFavoritesAllBtn:hover {\r\n            background-color: #ff3333;\r\n        }\r\n\r\n        #deleteMyFavoritesAllBtn:active {\r\n            transform: scale(0.95);\r\n        }\r\n    </style>\r\n    \r\n    <style>\r\n    \t/* footer */\r\n\t\t#footer {\r\n\t\t    position: relative;\r\n\t\t    width: 100%;\r\n\t\t    background-color: #8a8e92;\r\n\t\t    padding: 20px;\r\n\t\t    color: white;\r\n\t\t    z-index: 2;\r\n\t\t    display: flex;\r\n\t\t}\r\n\t\tfooter p {\r\n\t\t    color: white;\r\n\t\t    font-weight: 400;\r\n\t\t    align-items: center;\r\n\t\t    line-height: 30px;\r\n\t\t    font-size: 20px;\r\n\t\t    font-family: \"Do Hyeon\", sans-serif;\r\n\t\t}\r\n\t\tfooter p:first-child {\r\n\t\t    padding-left: 500px;\r\n\t\t}\r\n\t\t.footerRight {\r\n\t\t    margin-left: 90px;\r\n\t\t}\r\n\t\t.icons {\r\n\t\t    display: flex;\r\n\t\t    margin: 20px;\r\n\t\t    margin-left: 0;\r\n\t\t    align-items: center;\r\n\t\t}\r\n\t\t.icons a {\r\n\t\t    background-size: cover;\r\n\t\t    background-repeat: no-repeat;\r\n\t\t    background-position: center;\r\n\t\t    margin: 0 8px;\r\n\t\t}\r\n\t\t.icon_youtube {\r\n\t\t\twidth: 50px;\r\n\t\t\theight: 45px;\r\n\t\t    background-image: url('${cpath}/resources/image/icon_youtube.png');\r\n\t\t}\r\n\t\t.icon_instagram {\r\n\t\t\twidth: 43px;\r\n\t\t    height: 43px;\r\n\t\t    background-image: url('${cpath}/resources/image/icon_instagram.png');\r\n\t\t}\r\n\t\t.icon_facebook {\r\n\t\t\twidth: 45px;\r\n\t\t    height: 45px;\r\n\t\t    background-image: url('${cpath}/resources/image/icon_facebook.png');\r\n\t\t}\r\n\t\t.logo img {\r\n\t\t\twidth: 146px;\r\n\t\t\theight: 145px;\r\n\t\t\tmargin-top: -32px;\r\n\t\t\tmargin-left: -33px;\r\n\t\t}\r\n\r\n    </style>\r\n    <%--    chart    --%>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js@4.4.4/dist/chart.umd.min.js\"></script>\r\n    <!--  sweetalert2 -->\r\n    <script src=\"https://unpkg.com/sweetalert/dist/sweetalert.min.js\"></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>\r\n    <%-- sweetalert --%>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.js\"\r\n            integrity=\"sha512-7VTiy9AhpazBeKQAlhaLRUk+kAMAb8oczljuyJHPsVPWox/QIXDFOnT9DUk1UC8EbnHKRdQowT7sOBe7LAjajQ==\"\r\n            crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css\"\r\n          integrity=\"sha512-gOQQLjHRpD3/SEOtalVq50iDn4opLVup2TF8c4QPI3/NmUPNZOk2FG0ihi8oCU/qYEsw4P6nuEZT2lAG0UNYaw==\"\r\n          crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"/>\r\n\r\n    <%-- 카카오맵 API --%>\r\n    <script type=\"text/javascript\"\r\n            src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=f714ffceece9359c7acaeb2b338b1ae7&libraries=services,clusterer,drawing\"></script>\r\n\r\n    <%-- 좌표계산을 쉽게 할 수 있음 --%>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/geolib@3.3.4/lib/index.min.js\"></script>\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css\"/>\r\n\r\n    <!-- 다음 주소 API -->\r\n    <script src=\"https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n<%--아임포트 API--%>\r\n    <script type=\"text/javascript\" src=\"https://cdn.iamport.kr/js/iamport.payment-1.2.0.js\"></script>\r\n    <!-- jQuery 로드 -->\r\n    <script src=\"https://code.jquery.com/jquery-1.12.4.min.js\"></script>\r\n<%--    포트원 결제--%>\r\n    <script src=\"https://cdn.iamport.kr/v1/iamport.js\"></script>\r\n\r\n\r\n</head>\r\n<body>\r\n<!-- 즐겨찾기 테이블 -->\r\n<table id=\"myFavoritesTable\" class=\"hidden\">\r\n    <thead></thead>\r\n    <tbody></tbody>\r\n</table>\r\n\r\n<!-- 챗봇 아이콘 -->\r\n<div id=\"chat_icon\">\r\n    <a href=\"${cpath }/chat/room\" onclick=\"window.open(this.href, '_blank', 'width=600, height=1080'); return false;\">\r\n        <img src=\"${cpath }/resources/image/chat-icon.png\" width=\"50\">\r\n    </a>\r\n</div>\r\n\r\n\r\n<header>\r\n\t<div class=\"logo\">\r\n\t\t<a href=\"${cpath }\"><img src=\"${cpath }/resources/image/로고.png\"></a>\r\n\t</div>\r\n    <a href=\"${cpath }/healthInfo/healthInfo\">\r\n\t\t<div class=\"healthInfoIcon\"></div>\r\n\t</a>\r\n    <div class=\"-container\">\r\n        <c:if test=\"${empty login }\">\r\n        <div class=\"loginIcon\"></div>\r\n\t    </c:if>\r\n    </div>\r\n\r\n    <c:set var=\"default\" value=\"${cpath }/resources/image/default.png\" />\r\n    <c:if test=\"${not empty login }\">\r\n        <div class=\"header-right\">\r\n            <div class=\"loginIcon2\"></div>\r\n            <div class=\"notificationIcon\" id=\"notification\" data-page=\"1\"><span id=\"notificationCountSpan\" class=\"hidden\"></span></div>\r\n            <div class=\"myFavoritesIcon\" id=\"myFavorites\" data-page=\"1\"></div>\r\n            <span>${login.name }</span>\r\n            <a href=\"${cpath }/member/logout\"><button>로그아웃</button></a>\r\n\r\n        </div>\r\n    </c:if>\r\n</header>\r\n\r\n<!--예약 모달 -->\r\n<div id=\"bookingModal\" class=\"bookingModal hidden\" >\r\n    <div class=\"bookingOverlay\"></div>\r\n    <div class=\"bookingContent\">\r\n        <h3 class=\"bookingTitle\"></h3>\r\n        <div class=\"bookingDetail\"></div>\r\n        <button id=\"closeBookingBtn\">닫기</button>\r\n    </div>\r\n</div>\r\n\r\n<%-- 최근 본 병원 목록 표시 (로그인 후) --%>\r\n<c:if test=\"${not empty recentHospitals}\">\r\n<div id=\"recentHospitalsContainer\">\r\n    <h2>최근 본 병원</h2>\r\n    <div class=\"recent-hospitals\">\r\n        <c:forEach var=\"hospital\" items=\"${recentHospitals}\">\r\n            <a href=\"${cpath}/hospitalInfo/${hospital.id}\">\r\n                <div class=\"hospital-card\">\r\n                    <img src=\"${hospital.imageUrl}\" class=\"recentHospital-image\"/>\r\n                    <div class=\"recentHospital-info\">\r\n                        <h3 class=\"hospital-name\">${hospital.hospital_name}</h3>\r\n                    </div>\r\n                </div>\r\n            </a>\r\n        </c:forEach>\r\n    </div>\r\n</div>\r\n</c:if>\r\n\r\n<!-- 예약하기 입력 폼 -->\r\n<form id=\"bookingInsertForm\" class=\"hidden\">\r\n    <p><input type=\"hidden\" name=\"member_id\" value=\"${login.id }\"></p>\r\n    <p><input id=\"hospital_id\" type=\"hidden\" name=\"hospital_id\" value=\"${hospital.id }\"></p>\r\n    <p><input type=\"hidden\" name=\"status\" value=1></p>\r\n    <p><input id=\"booking_date\" type=\"datetime-local\" name=\"booking_date\"  value=\"${now }\" required></p>\r\n    <p><input type=\"submit\" value=\"예약하기\"></p>\r\n</form>\r\n\r\n<!-- 예약 변경 입력 폼 -->\r\n<form id=\"bookingUpdateForm\" class=\"hidden\">\r\n    <p><input type=\"hidden\" name=\"member_id\" value=\"${login.id }\"></p>\r\n    <p><input id=\"hospital_id\" type=\"hidden\" name=\"hospital_id\" value=\"${hospital.id }\"></p>\r\n    <p><input id=\"booking_date\" type=\"datetime-local\" name=\"booking_date\" required><p>\r\n    <p><input type=\"submit\" value=\"예약변경\"></p>\r\n</form>\r\n\r\n<!-- 알림 정보 테이블 -->\r\n<table id=\"notificationTable\" class=\"hidden\">\r\n    <thead></thead>\r\n    <tbody></tbody>\r\n</table>\r\n\r\n<%--로그인--%>\r\n<script>\r\n    const cpath = '${cpath}'\r\n    const loginIcon = document.querySelector('div.loginIcon')\r\n    console.log(loginIcon)\r\n    const loginIcon2 = document.querySelector('div.loginIcon2')\r\n    if (loginIcon) {\r\n        loginIcon.addEventListener('click', function() {\r\n            location.href = cpath + '/member/login'\r\n        })\r\n    }\r\n\r\n    if (loginIcon2) {\r\n        loginIcon2.addEventListener('click', function() {\r\n            location.href =  '${cpath}/member/info/${login.id}'\r\n        })\r\n    }\r\n</script>\r\n\r\n<!-- 호원 스크립트 -->\r\n<script>\r\n    <!-- 알림 스크립트 -->\r\n    const notification = document.getElementById('notification')\r\n    const notificationTable = document.getElementById('notificationTable')\r\n    const notificationTableHead = document.querySelector('#notificationTable thead')\r\n    const notificationTableBody = document.querySelector('#notificationTable tbody')\r\n    const bookingTitleElement = document.querySelector('.bookingTitle')\r\n    const bookingDetailElement = document.querySelector('.bookingDetail')\r\n    const bookingOverlay = document.querySelector('.bookingOverlay')\r\n    const notificationCountSpan = document.getElementById('notificationCountSpan')\r\n    const closeBookingBtn = document.getElementById('closeBookingBtn')\r\n    const bookingInsertForm = document.getElementById('bookingInsertForm')\r\n    const bookingUpdateForm = document.getElementById('bookingUpdateForm')\r\n\r\n    // 밀리초단위의 시간정보를 년월일시분 형태의 문자열로 변환하는 함수\r\n    function formatDate(d) {\r\n        const date = new Date(d)\r\n        const year = date.getFullYear()\r\n        const month = String(date.getMonth() + 1).padStart(2, '0') // 월은 0부터 시작하므로 +1\r\n        const day = String(date.getDate()).padStart(2, '0')\r\n        const hours = String(date.getHours()).padStart(2, '0')\r\n        const minutes = String(date.getMinutes()).padStart(2, '0')\r\n        return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes\r\n    }\r\n\r\n    // 예약 모달 여는 함수\r\n    function openBookingModal(bookingTitle, bookingDetail) {\r\n        bookingTitleElement.innerText = bookingTitle\r\n        bookingDetailElement.appendChild(bookingDetail)\r\n        bookingModal.classList.remove('hidden')\r\n    }\r\n\r\n    // 예약 모달 닫는 함수\r\n    function closeBookingModal(event){\r\n        bookingModal.classList.add('hidden')\r\n        bookingInsertForm.classList.add('hidden')\r\n        bookingUpdateForm.classList.add('hidden')\r\n        notificationTable.classList.add('hidden')\r\n        myFavoritesTable.classList.add('hidden')\r\n    }\r\n\r\n\r\n\r\n    // 아직 안읽은 알림 갯수 가져와서 띄우는 함수\r\n    async function notificationCount(){\r\n        const url = '${cpath}/notificationCount'\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if (result > 0) {\r\n            notificationCountSpan.classList.remove('hidden')\r\n            if (result >= 10) {\r\n                notificationCountSpan.innerText = '9+' // 10 이상은 '9+'로 표시\r\n            } else {\r\n                notificationCountSpan.innerText = result // 10 미만은 해당 숫자 표시\r\n            }\r\n            return result\r\n        } else {\r\n            notificationCountSpan.innerText = '' // 0 이하일 경우 비움\r\n            notificationCountSpan.classList.add('hidden')\r\n            return ''\r\n        }\r\n    }\r\n\r\n    // 알림 페이징 최대 페이지 수 가져오는 함수\r\n    async function notificationMaxPage(startPage){\r\n        const url = '${cpath}/notificationMaxPage'\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if(result != 0){\r\n            let tag = '<tr id=\"notificationPaging\">'\r\n            tag += '<td>이전</td>'\r\n            for(let i = startPage; i <= Math.min(startPage + 4, result); i++){\r\n                tag += '<td data-page=\"' + i + '\">' + i + '</td>'\r\n            }\r\n            tag += '<td>다음</td></tr>'\r\n            notificationTableBody.innerHTML = tag\r\n        }\r\n        else notificationTableBody.innerText = '알림이 없습니다.'\r\n        return result\r\n    }\r\n\r\n\r\n    // 알림 리스트 가져와서 페이지별로 띄우는 함수\r\n    async function notificationList(thisPage){\r\n        const url = '${cpath}/notificationList/' + thisPage\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        let tag = ''\r\n        tag += '<tr><button id=\"deleteNotificationAllBtn\">일괄 삭제하기</button></tr>'\r\n        result.forEach(e => {\r\n            tag += '<tr>' +\r\n                '<td class=\"notification-cell\" style=\"background-color: ' + (e.read ? '#ffffff' : 'lightskyblue') + ';\">' +\r\n                '<div class=\"notification-content\">' +\r\n                '<span class=\"notification-date\">' + formatDate(e.sent_time) + '</span>  ' +\r\n                '<span class=\"notification-name\">' + e.name + '님의 ' + e.hospital_name + '</span> ' +\r\n                '<span class=\"notification-date\">' + formatDate(e.booking_date) + '</span> ' +\r\n                '<span class=\"notification-message\">' + e.message + '</span>' +\r\n                '</div>' +\r\n                '</td>' +\r\n                '<td>' +\r\n                '<button class=\"notificationDeleteBtn\" data-page=\"' + thisPage + '\" data-id=\"' + e.id + '\">삭제</button>' +\r\n                '</td>' +\r\n                '</tr>'\r\n        })\r\n        notificationTableHead.innerHTML = tag\r\n\r\n        // 알림삭제 버튼 기능부여\r\n        document.querySelectorAll('.notificationDeleteBtn').forEach(btn => {\r\n            btn.onclick = (event) => {\r\n                deleteNotification(event)\r\n                readNotification(event)\r\n            }\r\n        })\r\n        document.getElementById('deleteNotificationAllBtn').addEventListener('click', deleteNotificationAll)\r\n        return result  // 결과를 반환합니다.\r\n    }\r\n\r\n    // 알림 지우는 함수\r\n    async function deleteNotification(event) {\r\n        event.preventDefault()\r\n        const id = parseInt(event.target.dataset.id)\r\n        const thisPage = parseInt(event.target.dataset.page)\r\n        const url = '${cpath}/deleteNotification/' + id\r\n        const opt = {\r\n            method: 'DELETE'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json());\r\n        if (result == 1) {\r\n            await notificationCount()\r\n            await updateNotificationPage(thisPage)\r\n        }\r\n    }\r\n\r\n    // 알림 페이지 업데이트 함수\r\n    function updateNotificationPagination(currentPage, startPage, maxPage) {\r\n        document.querySelectorAll('#notificationPaging td').forEach((td, i, arr) => {\r\n            if(i == 0) {\r\n                td.onclick = () => {\r\n                    const prevPage = Math.max(1, currentPage - 1)\r\n                    readNotification({ target: { dataset: { page: prevPage } } })\r\n                }\r\n            } else if(i == arr.length - 1) {\r\n                td.onclick = () => {\r\n                    const nextPage = Math.min(maxPage, currentPage + 1)\r\n                    readNotification({ target: { dataset: { page: nextPage } } })\r\n                }\r\n            } else {\r\n                td.onclick = (e) => readNotification(e)\r\n            }\r\n\r\n            if(i + startPage - 1 == currentPage) td.style.fontWeight = 'bold'\r\n        })\r\n    }\r\n\r\n    // 알림 페이지 변경 함수\r\n    async function updateNotificationPage(currentPage) {\r\n        const startPage = (Math.floor((currentPage + 4) / 5) - 1) * 5 + 1\r\n        const maxPage = await notificationMaxPage(startPage)\r\n\r\n        // 현재 페이지의 알림 목록을 가져옵니다.\r\n        const notifications = await notificationList(currentPage)\r\n\r\n        if (notifications.length === 0 && currentPage > 1) {\r\n            // 현재 페이지가 비어있고, 첫 번째 페이지가 아니라면 이전 페이지로 이동\r\n            await readNotification({ target: { dataset: { page: currentPage - 1 } } })\r\n        } else {\r\n            // 페이징 업데이트\r\n            updateNotificationPagination(currentPage, startPage, maxPage)\r\n        }\r\n    }\r\n\r\n\r\n    // 알림 읽음 처리하는 함수\r\n    async function readNotification(event) {\r\n        const thisPage = parseInt(event.target.dataset.page)\r\n        const startPage = (Math.floor((thisPage + 4) / 5) - 1) * 5 + 1\r\n\r\n        // 알림 리스트 불러오기\r\n        await notificationList(thisPage)\r\n\r\n        // 알림 읽음 처리\r\n        const url = '${cpath}/readNotification/' + thisPage\r\n        const opt = {\r\n            method : 'PATCH'\r\n        }\r\n        await fetch(url, opt)\r\n\r\n        // 알림 안읽은 수에서 읽은만큼 빼기\r\n        notificationCount()\r\n\r\n        // 알림창 최대 페이지 수\r\n        const maxPage = await notificationMaxPage(startPage)\r\n\r\n        // 알림 페이징\r\n        document.querySelectorAll('#notificationPaging td').forEach((td, i, arr) => {\r\n\r\n            // 이전\r\n            if(i == 0) {\r\n                td.onclick = (e) => {\r\n                    const prevPage = Math.max(1, thisPage - 1)\r\n                    readNotification({ target: { dataset: { page: prevPage } } })\r\n                }\r\n            }\r\n\r\n            // 다음\r\n            else if(i == arr.length - 1) {\r\n                td.onclick = async (e) => {\r\n                    const nextPage = Math.min(maxPage, thisPage + 1)\r\n                    readNotification({ target: { dataset: { page: nextPage } } })\r\n                }\r\n            }\r\n\r\n            // 페이지\r\n            else td.onclick = (e) => readNotification(e)\r\n\r\n            // 현재 페이지 숫자 굵게 표시\r\n            if(i + startPage - 1 == thisPage) td.style.fontWeight = 'bold'\r\n        })\r\n        notificationTable.classList.remove('hidden')\r\n        openBookingModal('알림', notificationTable)\r\n    }\r\n\r\n    async function deleteNotificationAll(event){\r\n        const url = '${cpath}/deleteNotificationAll'\r\n        const opt = {\r\n            method : 'DELETE'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if(result > 0) readNotification({ target: { dataset: { page: 1 } } })\r\n\r\n\r\n    }\r\n\r\n\r\n    closeBookingBtn.addEventListener('click', closeBookingModal)\r\n    bookingOverlay.onclick = closeBookingModal\r\n    notification.addEventListener('click', readNotification)\r\n    document.addEventListener('DOMContentLoaded', notificationCount)\r\n</script>\r\n\r\n\r\n\r\n<!-- 즐겨찾기 -->\r\n<script>\r\n    const myFavorites = document.getElementById('myFavorites')\r\n    const myFavoritesTable = document.getElementById('myFavoritesTable')\r\n    const myFavoritesTableHead = document.querySelector('#myFavoritesTable thead')\r\n    const myFavoritesTableBody = document.querySelector('#myFavoritesTable tbody')\r\n\r\n\r\n    async function getFavorite(id){\r\n        const url = cpath + '/getFavorite/' + parseInt(id)\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        return result\r\n    }\r\n\r\n    // 즐겨찾기 추가하는 함수\r\n    async function myFavorite(event){\r\n        event.preventDefault()\r\n        const url = cpath + '/myFavorite/' + parseInt(event.target.dataset.id)\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        location.reload()\r\n    }\r\n\r\n    // 즐겨찾기 목록 가져오는 함수\r\n    async function myFavoritesList(thisPage){\r\n        const url = cpath + '/myFavoritesList/' + thisPage\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        let tag = ''\r\n        tag += '<tr><button id=\"deleteMyFavoritesAllBtn\">일괄 삭제하기</button></tr>'\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        console.log(result)\r\n        result.forEach(favorite => {\r\n            tag += '<tr>'\r\n            tag += '<th><a href=\"${cpath }/hospitalInfo/' + favorite.hospital_id + '\">' + favorite.hospital_name + '</a></th>'\r\n            tag += '<th>' + favorite.address + '</th><th>' + favorite.tel + '</th><th><button class=\"myFavoritesDeleteBtn\" data-page=\"' + thisPage + '\" data-id=\"' + favorite.hospital_id + '\">삭제</button></th>'\r\n            tag += '</tr>'\r\n        })\r\n        myFavoritesTableHead.innerHTML = tag\r\n\r\n        // 즐찾삭제 버튼 기능부여\r\n        document.querySelectorAll('.myFavoritesDeleteBtn').forEach(btn => {\r\n            btn.onclick = (event) => {\r\n                Swal.fire({\r\n                    title: '즐겨찾기 삭제',\r\n                    text: '해당 병원을 즐겨찾기 삭제 하시겠습니까?',\r\n                    icon: 'question',  // 'type' 대신 'icon' 사용\r\n                    showCancelButton: true,\r\n                    confirmButtonText: '확인',\r\n                    cancelButtonText: '취소',\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    reverseButtons: true, // 취소 버튼을 왼쪽에 배치하려면 추가\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        deleteMyFavorites(event)\r\n                        openMyFavorites(event)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        document.getElementById('deleteMyFavoritesAllBtn').addEventListener('click', () => {\r\n            if(result != ''){\r\n                Swal.fire({\r\n                    title: '즐겨찾기 일괄삭제',\r\n                    text: '즐겨찾기 목록을 전부 삭제 하시겠습니까?',\r\n                    icon: 'question',\r\n                    confirmButtonText: '확인',\r\n                    cancelButtonText: '취소',\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    showCancelButton: true,\r\n                    allowOutsideClick: false,\r\n                    allowEscapeKey: false,\r\n                    showCloseButton: false\r\n                }).then((result) => {if(result.isConfirmed) deleteMyFavoritesAll()})}})\r\n        return result\r\n    }\r\n\r\n    // 즐겨찾기 지우는 함수\r\n    async function deleteMyFavorites(event) {\r\n        event.preventDefault()\r\n        const id = parseInt(event.target.dataset.id)\r\n        const thisPage = parseInt(event.target.dataset.page)\r\n        console.log(thisPage)\r\n        const url = '${cpath}/deleteMyFavorites/' + id\r\n        const opt = {\r\n            method: 'DELETE'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json());\r\n        if (result == 1) {\r\n            await updateMyFavoritesPage(thisPage)\r\n        }\r\n    }\r\n\r\n    // 즐겨찾기 페이징 최대 페이지 수 가져오는 함수\r\n    async function myFavoritesMaxPage(startPage){\r\n        const url = '${cpath}/myFavoritesMaxPage'\r\n        const opt = {\r\n            method : 'GET'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if(result != 0){\r\n            let tag = '<tr id=\"myFavoritesPaging\">'\r\n            tag += '<td>이전</td>'\r\n            for(let i = startPage; i <= Math.min(startPage + 4, result); i++){\r\n                tag += '<td data-page=\"' + i + '\">' + i + '</td>'\r\n            }\r\n            tag += '<td>다음</td></tr>'\r\n            myFavoritesTableBody.innerHTML = tag\r\n        }\r\n        else myFavoritesTableBody.innerText = '즐겨찾기 한 병원이 없습니다.'\r\n        return result\r\n    }\r\n\r\n    // 즐찾 페이지 업데이트 함수\r\n    function updateMyFavoritesPagination(currentPage, startPage, maxPage) {\r\n\r\n        document.querySelectorAll('#myFavoritesPaging td').forEach((td, i, arr) => {\r\n            if(i == 0) {\r\n                td.onclick = () => {\r\n                    const prevPage = Math.max(1, currentPage - 1)\r\n                    openMyFavorites({ target: { dataset: { page: prevPage } } })\r\n                }\r\n            } else if(i == arr.length - 1) {\r\n                td.onclick = () => {\r\n                    const nextPage = Math.min(maxPage, currentPage + 1)\r\n                    openMyFavorites({ target: { dataset: { page: nextPage } } })\r\n                }\r\n            } else {\r\n                td.onclick = (e) => openMyFavorites(e)\r\n            }\r\n\r\n            if(i + startPage - 1 == currentPage) td.style.fontWeight = 'bold'\r\n        })\r\n    }\r\n\r\n    // 즐찾 페이지 변경 함수\r\n    async function updateMyFavoritesPage(currentPage) {\r\n        const startPage = (Math.floor((currentPage + 4) / 5) - 1) * 5 + 1\r\n        const maxPage = await myFavoritesMaxPage(startPage)\r\n\r\n        // 현재 페이지의 알림 목록을 가져옵니다.\r\n        const myFavoritess = await myFavoritesList(currentPage)\r\n\r\n        if (myFavoritess.length === 0 && currentPage > 1) {\r\n            // 현재 페이지가 비어있고, 첫 번째 페이지가 아니라면 이전 페이지로 이동\r\n            await openMyFavorites({ target: { dataset: { page: currentPage - 1 } } })\r\n        } else {\r\n            // 페이징 업데이트\r\n            updateMyFavoritesPagination(currentPage, startPage, maxPage)\r\n        }\r\n    }\r\n\r\n    // 즐겨찾기 목록 여는 함수\r\n    async function openMyFavorites(event) {\r\n        console.log(event.target.dataset.page)\r\n        const thisPage = parseInt(event.target.dataset.page)\r\n        const startPage = (Math.floor((thisPage + 4) / 5) - 1) * 5 + 1\r\n\r\n        // 즐겨찾기 리스트 불러오기\r\n        await myFavoritesList(thisPage)\r\n\r\n        // 즐겨찾기 최대 페이지 수\r\n        const maxPage = await myFavoritesMaxPage(startPage)\r\n\r\n\r\n        // 즐겨찾기 페이징\r\n        document.querySelectorAll('#myFavoritesPaging td').forEach((td, i, arr) => {\r\n\r\n            // 이전\r\n            if(i == 0) {\r\n                td.onclick = (e) => {\r\n                    const prevPage = Math.max(1, thisPage - 1)\r\n                    openMyFavorites({ target: { dataset: { page: prevPage } } })\r\n                }\r\n            }\r\n\r\n            // 다음\r\n            else if(i == arr.length - 1) {\r\n                td.onclick = async (e) => {\r\n                    const nextPage = Math.min(maxPage, thisPage + 1)\r\n                    openMyFavorites({ target: { dataset: { page: nextPage } } })\r\n                }\r\n            }\r\n\r\n            // 페이지\r\n            else td.onclick = (e) => openMyFavorites(e)\r\n\r\n            // 현재 페이지 숫자 굵게 표시\r\n            if(i + startPage - 1 == thisPage) td.style.fontWeight = 'bold'\r\n        })\r\n\r\n        myFavoritesTable.classList.remove('hidden')\r\n        openBookingModal('즐겨찾기 목록', myFavoritesTable)\r\n    }\r\n\r\n    async function deleteMyFavoritesAll(event){\r\n        const url = '${cpath}/deleteMyfavoritesAll'\r\n        const opt = {\r\n            method : 'DELETE'\r\n        }\r\n        const result = await fetch(url, opt).then(resp => resp.json())\r\n        if(result > 0) openMyFavorites({ target: { dataset: { page: 1 } } })\r\n    }\r\n\r\n\r\n    myFavorites.addEventListener('click', (event) => {\r\n        if('${login}' != '') openMyFavorites(event)\r\n        else {\r\n            Swal.fire({\r\n                title: '',\r\n                text: '로그인 해주세요.',\r\n                icon: 'info',\r\n                confirmButtonText: '확인',\r\n                cancelButtonText: '취소',\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                showCancelButton: true,\r\n                allowOutsideClick: false,\r\n                allowEscapeKey: false,\r\n                showCloseButton: false\r\n            }).then((result) => {if(result.isConfirmed) location.href = '${cpath}/member/login'})\r\n        }\r\n    })\r\n</script>\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/header.jsp b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/header.jsp
--- a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/header.jsp	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/header.jsp	(date 1732156555922)
@@ -99,9 +99,9 @@
 
 
         .hospital-list li.selected {
-            background-color: #007bff; /* 선택된 항목 배경색 */
-            color: white; /* 선택된 항목 글자색 */
-            font-weight: bold; /* 선택된 항목 글씨 진하게 */
+            background-color: #007bff;
+            color: white;
+            font-weight: bold;
         }
 
         
@@ -134,7 +134,7 @@
             position: absolute;
             width: 100%;
             height: 100%;
-            background-color: rgba(0, 0, 0, 0.5); /* 반투명한 검은색 배경 */
+            background-color: rgba(0, 0, 0, 0.5);
         }
 
         .bookingContent {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ArtifactsWorkspaceSettings\">\r\n    <artifacts-to-build>\r\n      <artifact name=\"finalProject:war exploded\" />\r\n    </artifacts-to-build>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4350750a-29a0-43ea-8a70-32cef6523690\" name=\"변경\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"KubernetesApiPersistence\">{}</component>\r\n  <component name=\"KubernetesApiProvider\">{\r\n  &quot;isMigrated&quot;: true\r\n}</component>\r\n  <component name=\"LogFilters\">\r\n    <option name=\"FILTER_ERRORS\" value=\"false\" />\r\n    <option name=\"FILTER_WARNINGS\" value=\"false\" />\r\n    <option name=\"FILTER_INFO\" value=\"true\" />\r\n    <option name=\"FILTER_DEBUG\" value=\"true\" />\r\n    <option name=\"CUSTOM_FILTER\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2p5ghq9lF0oZ6VQk0yLls6s72qj\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;Tomcat 서버.Tomcat 9.0.91.executor&quot;: &quot;Run&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;라이브러리&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;DatabaseDriversLRU&quot;: [\r\n      &quot;oracle&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Tomcat 9.0.91\" type=\"#com.intellij.j2ee.web.tomcat.TomcatRunConfigurationFactory\" factoryName=\"Local\" APPLICATION_SERVER_NAME=\"Tomcat 9.0.91\" ALTERNATIVE_JRE_ENABLED=\"false\" nameIsGenerated=\"true\">\r\n      <option name=\"BROWSER_ID\" value=\"98ca6316-2f89-46d9-a9e5-fa9e2b0625b3\" />\r\n      <option name=\"UPDATE_ON_FRAME_DEACTIVATION\" value=\"true\" />\r\n      <option name=\"UPDATE_CLASSES_ON_FRAME_DEACTIVATION\" value=\"true\" />\r\n      <option name=\"UPDATING_POLICY\" value=\"restart-server\" />\r\n      <deployment>\r\n        <artifact name=\"finalProject:war exploded\">\r\n          <settings>\r\n            <option name=\"CONTEXT_PATH\" value=\"/finalProject_war_exploded\" />\r\n          </settings>\r\n        </artifact>\r\n      </deployment>\r\n      <server-settings>\r\n        <option name=\"BASE_DIRECTORY_NAME\" value=\"5e781fa9-5350-44d9-bc55-c58663d36feb\" />\r\n      </server-settings>\r\n      <predefined_log_file enabled=\"true\" id=\"Tomcat\" />\r\n      <predefined_log_file enabled=\"true\" id=\"Tomcat Catalina\" />\r\n      <predefined_log_file id=\"Tomcat Manager\" />\r\n      <predefined_log_file id=\"Tomcat Host Manager\" />\r\n      <predefined_log_file id=\"Tomcat Localhost Access\" />\r\n      <RunnerSettings RunnerId=\"Debug\">\r\n        <option name=\"DEBUG_PORT\" value=\"64914\" />\r\n      </RunnerSettings>\r\n      <ConfigurationWrapper VM_VAR=\"JAVA_OPTS\" RunnerId=\"Cover\">\r\n        <option name=\"USE_ENV_VARIABLES\" value=\"true\" />\r\n        <STARTUP>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </STARTUP>\r\n        <SHUTDOWN>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </SHUTDOWN>\r\n      </ConfigurationWrapper>\r\n      <ConfigurationWrapper VM_VAR=\"JAVA_OPTS\" RunnerId=\"Debug\">\r\n        <option name=\"USE_ENV_VARIABLES\" value=\"true\" />\r\n        <STARTUP>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </STARTUP>\r\n        <SHUTDOWN>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </SHUTDOWN>\r\n      </ConfigurationWrapper>\r\n      <ConfigurationWrapper VM_VAR=\"JAVA_OPTS\" RunnerId=\"Profile\">\r\n        <option name=\"USE_ENV_VARIABLES\" value=\"true\" />\r\n        <STARTUP>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </STARTUP>\r\n        <SHUTDOWN>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </SHUTDOWN>\r\n      </ConfigurationWrapper>\r\n      <ConfigurationWrapper VM_VAR=\"JAVA_OPTS\" RunnerId=\"Run\">\r\n        <option name=\"USE_ENV_VARIABLES\" value=\"true\" />\r\n        <STARTUP>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </STARTUP>\r\n        <SHUTDOWN>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </SHUTDOWN>\r\n      </ConfigurationWrapper>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n        <option name=\"BuildArtifacts\" enabled=\"true\">\r\n          <artifact name=\"finalProject:war exploded\" />\r\n        </option>\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.23339.11\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.23339.11\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"애플리케이션 수준\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"디폴트 작업\">\r\n      <changelist id=\"4350750a-29a0-43ea-8a70-32cef6523690\" name=\"변경\" comment=\"\" />\r\n      <created>1732061473944</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1732061473944</updated>\r\n      <workItem from=\"1732061474888\" duration=\"10603000\" />\r\n      <workItem from=\"1732075410748\" duration=\"6001000\" />\r\n      <workItem from=\"1732113363596\" duration=\"288000\" />\r\n      <workItem from=\"1732147509740\" duration=\"879000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/.idea/workspace.xml	(date 1732158493929)
@@ -9,7 +9,77 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="4350750a-29a0-43ea-8a70-32cef6523690" name="변경" comment="" />
+    <list default="true" id="4350750a-29a0-43ea-8a70-32cef6523690" name="변경" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/webapp/WEB-INF/views/header.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/webapp/WEB-INF/views/header.jsp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/webapp/WEB-INF/views/home.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/webapp/WEB-INF/views/home.jsp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/com/itbank/finalProject/HomeController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/itbank/finalProject/HomeController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/Coordinates.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/Coordinates.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/NaverMapCrawler.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/NaverMapCrawler.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/component/ChatComponent.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/component/ChatComponent.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/component/FileComponent.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/component/FileComponent.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/component/HashComponent.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/component/HashComponent.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/component/MailComponent.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/component/MailComponent.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/component/NaverLoginComponent.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/component/NaverLoginComponent.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/component/NotificationMailComponent$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/component/NotificationMailComponent$1.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/component/NotificationMailComponent.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/component/NotificationMailComponent.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/config/PaymentConfig.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/config/PaymentConfig.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/BookingController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/BookingController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/ChatController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/ChatController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/FavoriteController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/FavoriteController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/HealthInfoController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/HealthInfoController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/HospitalAjaxController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/HospitalAjaxController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/HospitalController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/HospitalController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/HospitalsController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/HospitalsController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/MemberAjaxController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/MemberAjaxController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/MemberController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/MemberController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/PaymentController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/PaymentController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/ReviewAjaxController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/ReviewAjaxController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/ReviewController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/controller/ReviewController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/BookingDTO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/BookingDTO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/DailyViewCountDTO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/DailyViewCountDTO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/FavoriteDTO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/FavoriteDTO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/HospitalDTO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/HospitalDTO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/HospitalPaging.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/HospitalPaging.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/HospitalTimeDTO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/HospitalTimeDTO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/MemberDTO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/MemberDTO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/NotificationDTO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/NotificationDTO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/ProfileDTO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/ProfileDTO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/ReviewDTO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/ReviewDTO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/RoomDTO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/RoomDTO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/RouteRequest.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/RouteRequest.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/SearchHistoryDTO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/SearchHistoryDTO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/SubLocationDTO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/model/SubLocationDTO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/repository/BookingDAO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/repository/BookingDAO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/repository/DailyViewCountDAO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/repository/DailyViewCountDAO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/repository/FavoriteDAO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/repository/FavoriteDAO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/repository/HospitalDAO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/repository/HospitalDAO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/repository/HospitalTimeDAO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/repository/HospitalTimeDAO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/repository/MemberDAO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/repository/MemberDAO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/repository/ReviewDAO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/repository/ReviewDAO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/repository/SearchHistoryDAO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/repository/SearchHistoryDAO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/service/DailyViewCountService.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/service/DailyViewCountService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/service/HospitalService.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/service/HospitalService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/service/HospitalTimeService.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/service/HospitalTimeService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/service/NaverCaptchaService.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/service/NaverCaptchaService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/service/NaverLoginService.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/service/NaverLoginService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/service/ReviewService.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/service/ReviewService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/service/SearchHistoryService.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/classes/com/itbank/finalProject/service/SearchHistoryService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/header.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/header.jsp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/home.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/home.jsp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/hospital/view.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/hospital/view.jsp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/addLocation.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/addLocation.jsp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/bookingList.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/bookingList.jsp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/info.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/info.jsp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/join.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/join.jsp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/locationUpdate.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/locationUpdate.jsp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/login.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/login.jsp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/naverCallback.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/naverCallback.jsp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/pwUpdate.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/pwUpdate.jsp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/reCheckEmail.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/reCheckEmail.jsp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/reCheckUserid.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/reCheckUserid.jsp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/resetPassword.jsp" beforeDir="false" afterPath="$PROJECT_DIR$/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/resetPassword.jsp" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -22,6 +92,26 @@
       </list>
     </option>
   </component>
+  <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="9-깃-테슽" />
+      </map>
+    </option>
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="GitHubPullRequestSearchHistory"><![CDATA[{
+  "lastFilter": {
+    "state": "OPEN",
+    "assignee": "jiminjae1444"
+  }
+}]]></component>
+  <component name="GithubPullRequestsUISettings"><![CDATA[{
+  "selectedUrlAndAccountId": {
+    "url": "https://github.com/jiminjae1444/finalProject.git",
+    "accountId": "7819fdd4-7c51-45b8-9060-e6ec07ba6dab"
+  }
+}]]></component>
   <component name="KubernetesApiPersistence">{}</component>
   <component name="KubernetesApiProvider">{
   &quot;isMigrated&quot;: true
@@ -41,33 +131,34 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,
-    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,
-    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,
-    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;Tomcat 서버.Tomcat 9.0.91.executor&quot;: &quot;Run&quot;,
-    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
-    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;라이브러리&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Downloaded.Files.Path.Enabled": "false",
+    "Repository.Attach.Annotations": "false",
+    "Repository.Attach.JavaDocs": "false",
+    "Repository.Attach.Sources": "false",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "Tomcat 서버.Tomcat 9.0.91.executor": "Run",
+    "git-widget-placeholder": "develop",
+    "ignore.virus.scanning.warn.message": "true",
+    "kotlin-language-version-configured": "true",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "project.structure.last.edited": "라이브러리",
+    "project.structure.proportion": "0.0",
+    "project.structure.side.proportion": "0.0",
+    "settings.editor.selected.configurable": "preferences.pluginManager",
+    "vue.rearranger.settings.migration": "true"
   },
-  &quot;keyToStringList&quot;: {
-    &quot;DatabaseDriversLRU&quot;: [
-      &quot;oracle&quot;
+  "keyToStringList": {
+    "DatabaseDriversLRU": [
+      "oracle"
     ]
   }
-}</component>
+}]]></component>
   <component name="RunManager">
     <configuration name="Tomcat 9.0.91" type="#com.intellij.j2ee.web.tomcat.TomcatRunConfigurationFactory" factoryName="Local" APPLICATION_SERVER_NAME="Tomcat 9.0.91" ALTERNATIVE_JRE_ENABLED="false" nameIsGenerated="true">
       <option name="BROWSER_ID" value="98ca6316-2f89-46d9-a9e5-fa9e2b0625b3" />
@@ -179,7 +270,7 @@
       <workItem from="1732061474888" duration="10603000" />
       <workItem from="1732075410748" duration="6001000" />
       <workItem from="1732113363596" duration="288000" />
-      <workItem from="1732147509740" duration="879000" />
+      <workItem from="1732147509740" duration="5911000" />
     </task>
     <servers />
   </component>
Index: target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/bookingList.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<%@ include file=\"../header.jsp\" %>\r\n\r\n<h3>${login.name }님의 예약 정보 리스트입니다</h3>\r\n<table>\r\n\t<thead>\r\n\t\t<tr>\t\r\n\t\t\t<th>ID</th><!-- userid -->\r\n\t\t\t<th>병원명</th>\r\n\t\t\t<th>병원 주소</th>\r\n\t\t\t<th>예약일/ 예약 날짜</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<c:forEach var=\"dto\" items=\"${list }\">\r\n\t\t<tr>\r\n\t\t\t<td>${dto.userid }</td>\r\n\t\t\t<td><a href=\"#\">${dto.hospital_name }</a></td>\r\n\t\t\t<td>${dto.address }</td>\r\n\t\t\t<td>${dto.booked_at }/ ${dto.booking_date }</td>\r\n\t\t</tr>\r\n\t\t</c:forEach>\r\n\t</tbody>\r\n</table>\r\n\r\n<script>\r\n\t\r\n</script>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/bookingList.jsp b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/bookingList.jsp
--- a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/bookingList.jsp	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/bookingList.jsp	(date 1732155578132)
@@ -2,30 +2,238 @@
     pageEncoding="UTF-8"%>
 <%@ include file="../header.jsp" %>
 
-<h3>${login.name }님의 예약 정보 리스트입니다</h3>
-<table>
-	<thead>
-		<tr>	
-			<th>ID</th><!-- userid -->
-			<th>병원명</th>
-			<th>병원 주소</th>
-			<th>예약일/ 예약 날짜</th>
-		</tr>
-	</thead>
-	<tbody>
-		<c:forEach var="dto" items="${list }">
-		<tr>
-			<td>${dto.userid }</td>
-			<td><a href="#">${dto.hospital_name }</a></td>
-			<td>${dto.address }</td>
-			<td>${dto.booked_at }/ ${dto.booking_date }</td>
-		</tr>
-		</c:forEach>
-	</tbody>
-</table>
-
+<style>
+	@keyframes slideBackground {
+        0% {
+            background-position: 0% 10%;
+        }
+        50% {
+            background-position: 100% 10%;
+        }
+        100% {
+            background-position: 0% 10%;
+        }
+    }
+    body {
+        background-image: linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)), url('${cpath}/resources/image/pexels-nathanjhilton-17500379.jpg');
+        background-size: 110% auto;
+        background-position: 0% 10%;
+        animation: slideBackground 50s ease infinite;
+        background-repeat: no-repeat;
+        background-attachment: fixed;
+    }
+    .bookingListModal {
+    	position: fixed;
+        top: 0;
+        left: 0;
+        width: 100%;
+        height: 100%;
+        display: flex;
+        justify-content: center;
+        align-items: center;
+        margin-left: 8px;
+        margin-right: 8px;
+    }
+    .bookingContent {
+    	width: 940px;
+    	height: auto;
+    	background-color: rgba(247, 249, 250, 0.8);
+        border-radius: 8px;
+        box-shadow: 0 0 10px rgba(0,0,0,0.1);
+        text-align: center; 
+    }
+    .topBox {
+	    display: flex; /* 두 개의 div를 나란히 배치 */
+	    justify-content: space-between; /* 두 div 사이에 공간을 균등하게 배치 */
+	    align-items: center; /* 세로 중앙 정렬 */
+	    margin-bottom: 20px; /* 상자 아래에 간격을 추가 */
+	}
+	.topBox .guide {
+		width: 485px;
+	}
+    .profile-image {
+	    width: 400px;
+	    background-color: rgba(0, 0, 0, 0.3);
+	    padding: 5px;
+	    border-radius: 10px;
+	    margin-top: 17px;
+	    margin-left: 20px;
+	    display: flex;
+	}
+    .profile-image .size {
+    	padding-top: 5px;
+	    padding-left: 7px;
+	    width: 100px;
+	    height: 100px;
+	    border-radius: 10px;
+    }
+    .profile-image p {
+    	width: 115px;
+    	margin-top: 0px;
+    	margin-bottom: 0px;
+    }
+    .profile-image .text {
+	    color: white;
+	    width: 335px;
+	    margin-top: 0px;
+	    margin-bottom: 5px;
+	}
+	.profile-image .titleText {
+	    color: black;
+	    text-align: left;
+	    width: 150px;
+	    margin-bottom: 20px;
+	    padding-left: 15px;
+	}
+	.mainTable {
+		text-align: center;
+		padding-left: 20px;
+    	padding-right: 20px;
+	}
+    table {
+        width: 100%;
+        border-collapse: separate; /* 셀 간격을 유지하기 위해 separate 설정 */
+        border-spacing: 0; /* 셀 간격 초기화 */
+    }
+    th {
+        text-align: center;
+        font-size: 17px;
+        padding: 8px;
+    }   
+    tbody.tbody1 tr:first-child td:first-child {
+	    border-top-left-radius: 8px;
+	}
+	tbody.tbody1 tr:first-child td:last-child {
+	    border-top-right-radius: 8px;
+	}
+	tbody.tbody1 tr:last-child td:first-child {
+	    border-bottom-left-radius: 8px;
+	}
+	tbody.tbody1 tr:last-child td:last-child {
+	    border-bottom-right-radius: 8px;
+	}
+    .bodyTr {
+	    height: 30px; 
+	    padding: 1px 0; 
+	    font-size: 15px; 
+	    line-height: 1.2; 
+	    overflow: hidden; 
+    }
+    td {    	
+        padding: 10px 5px;
+        border-bottom: 1px solid black; 
+    }
+    td > div {
+    	margin-bottom: 0;
+    	margin-top: 5px;
+    	margin-left: 5px;
+    	margin-right: 5px;
+    }
+    a {
+        color: black;  /* 기본 색상 */
+        text-decoration: none;  /* 밑줄 제거 */
+        transition: color 0.3s ease, background-color 0.3s ease;  /* 호버 시 색상과 배경 색상 변경 효과 */
+    }
+    a:hover {
+        color: rgba(44, 62, 80, 0.9);
+    }
+</style>
+<div class="bookingListModal">
+<div class="bookingOverlay"></div>
+	<div class="bookingContent">
+	<div class="topBox">
+		<div class="profile-image">
+			<div><img class="size" src="${cpath }/fpupload/image/${empty login.storedFileName ? 'default.png' : login.storedFileName }" alt="프로필 이미지"></div>
+			<div><h2 class="titleText" >AMD, Booking List</h2></div>
+		</div>
+		<div class="guide">
+			<p style="color: gray;">예약된 병원 리스트를 한눈에 관리해 보세요.<br>병원 정보는 리스트 병원명 클릭을 통하여 확인 가능합니다.</p>
+			<h3 class="text" style="color: white;">${login.name }님의 예약 정보 리스트입니다</h3>
+		</div>
+	</div>
+	<div class="mainTable">
+	<table>
+		<thead>
+			<tr >	
+				<th>ID</th><!-- userid -->
+				<th>병원명</th>
+				<th>병원 주소</th>
+				<th>예약일 / 예약 날짜</th>
+				<th>예약 상태</th>
+			</tr>
+		</thead>
+			<tbody class="tbody1">
+				<c:forEach var="dto" items="${list }">
+				<tr class="bodyTr">
+					<td>
+					    <div>[${dto.userid}]</div> <!-- 각 셀의 내용을 div로 감싸서 출력 -->
+					</td>
+					<td>
+					    <div><a href="#" style="list-style: none;">${dto.hospital_name}</a></div> <!-- 병원명 -->
+					</td>
+					<td>
+					    <div>${dto.address}</div> <!-- 주소 -->
+					</td>
+					<td>
+					    <div>${dto.booked_at}/${dto.booking_date}</div> <!-- 예약일 -->
+					</td>
+					<td>
+					    <div>${dto.status}</div> <!-- 예약 상태 -->
+					</td>
+				</tr>
+				</c:forEach>
+			</tbody>
+		</table>
+	</div>
+	<p><a href="${cpath }/member/info/${login.id}"><button type="button" formnovalidate>뒤로가기</button></a></p>
+	</div>
+</div>
 <script>
+	//예약 상태 숫자를 문자열로 변환하는 함수
+	function getStatusText(status) {
+	    switch (status) {
+	        case 1:
+	            return "예약 완료"
+	        case 0:
+	            return "예약 취소"
+	        case -1:
+	            return "완료된 예약"
+	        default:
+	            return "알 수 없음"
+	    }
+	}
+	
+	// 예약 상태를 변환하고 색상 변경하는 함수
+	function updateBookingStatus() {
+	    // 모든 테이블 행을 가져오기
+	    const rows = document.querySelectorAll("tbody tr")
+	    rows.forEach(row => {
+	        // 현재 행에서 상태 열(td)의 내용을 가져오기
+	        const statusCell = row.querySelector("td:last-child")
+	        const statusValue = parseInt(statusCell.textContent.trim(), 10) // 숫자로 변환
+	        const statusText = getStatusText(statusValue) // 변환된 문자열
 	
+	        // 상태 텍스트 업데이트
+	        statusCell.textContent = statusText
+	
+	        // 색상 변경 로직
+	        if (statusValue === 1) {
+	            // 예약 완료 상태: rgba(0, 0, 0, 0.3)
+	            row.style.backgroundColor = 'rgba(0, 0, 0, 0.3)'
+	        } else if (statusValue === 0) {
+	            // 예약 취소 상태: 빨간색
+	            row.style.backgroundColor = 'rgba(148, 34, 34, 0.8)'
+	        } else if (statusValue === -1) {
+	            // 완료된 예약 상태: 녹색
+	            row.style.backgroundColor = 'rgba(3, 199, 90, 0.6)'
+	        } else {
+	            // 기본 색상: 흰색 (알 수 없는 상태)
+	            row.style.backgroundColor = 'rgba(247, 249, 250, 0.8)'
+	        }
+	    })
+	}	
+	// DOM이 준비되면 상태 변환 실행
+	document.addEventListener("DOMContentLoaded", updateBookingStatus)
 </script>
 </body>
 </html>
\ No newline at end of file
Index: target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/naverCallback.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<%@ include file=\"../header.jsp\" %>\r\n\r\n<script>\r\n\tconst arr = opener.location.href.split('/')\r\n\tconst menu = arr[arr.length - 1]\r\n\t\r\n\tconst userProfile = '${userProfile}'\r\n\tswitch(menu) {\r\n\tcase 'login':\r\n\t\tconst naver_id = JSON.parse(userProfile).response.id\r\n\t\tconst formData = new FormData()\r\n\t\tformData.append('naver_id', naver_id)\r\n\t\tconst url = '${cpath}/members/naverLogin'\r\n\t\tconst opt = {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: formData\r\n\t\t}\r\n\t\tfetch(url, opt)\r\n\t\t\t.then(resp => resp.json())\r\n\t\t\t.then(json => {\r\n\t\t\t\tconsole.log(json)\r\n\t\t\t\tconst str = JSON.stringify(json)\r\n\t\t\t\topener.document.querySelector('input[name=\"result\"]').value = str\r\n\t\t\t\twindow.close()\t// fetch가 끝나면 마지막에 창을 닫는다(비동기 함수를 사용시는 await로 작업하는게 좋다)\r\n\t\t\t})\r\n\t\tbreak\r\n\t\t\r\n\tcase 'join':\r\n\t\tif(userProfile != '') {\r\n\t\t\tconst ob = JSON.parse(userProfile)\r\n\t\t\topener.document.querySelector('input[name=\"name\"]').value = ob.response.name\r\n\t\t\topener.document.querySelector('input[name=\"email\"]').value = ob.response.email\r\n\t\t\topener.document.querySelector('input[name=\"gender\"][value=\"' + ob.response.gender + '\"]').checked = 'checked'\r\n\t\t\topener.document.querySelector('input[name=\"userid\"]').value = ob.response.email.split('@')[0]\r\n\t\t\topener.document.querySelector('input[name=\"birth\"]').value = ob.response.birthyear.substring(2) + ob.response.birthday.replace('-', '')\r\n\t\t\t\r\n\t\t\tconst naver_id = document.createElement('input')\r\n\t\t\tnaver_id.name = 'naver_id'\r\n\t\t\tnaver_id.type = 'hidden'\r\n\t\t\tnaver_id.value = ob.response.id\r\n\t\t\topener.document.forms[0].appendChild(naver_id)\r\n\t\t}\r\n\t\twindow.close()\r\n\t\tbreak\r\n\t}\r\n//\twindow.close() \t\t// fetch를 호출하자말자 결과 여부 상관없이 window를 close한다\r\n</script>\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/naverCallback.jsp b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/naverCallback.jsp
--- a/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/naverCallback.jsp	(revision c29d37c19039ed019ce0b42d4ad3a60c36482de1)
+++ b/target/finalProject-1.0.0-BUILD-SNAPSHOT/WEB-INF/views/member/naverCallback.jsp	(date 1732155578138)
@@ -12,7 +12,7 @@
 		const naver_id = JSON.parse(userProfile).response.id
 		const formData = new FormData()
 		formData.append('naver_id', naver_id)
-		const url = '${cpath}/members/naverLogin'
+		const url = '${cpath}/ajax/naverLogin'
 		const opt = {
 			method: 'POST',
 			body: formData
