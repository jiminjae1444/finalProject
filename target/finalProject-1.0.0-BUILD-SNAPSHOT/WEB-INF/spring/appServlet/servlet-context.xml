<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven>
		<message-converters>
			<beans:bean
				class="org.springframework.http.converter.StringHttpMessageConverter">
				<beans:property name="defaultCharset" value="utf-8" />
				<beans:property name="supportedMediaTypes">
					<beans:list>
						<beans:value>text/plain; charset=utf-8</beans:value>
						<beans:value>application/json; charset=utf-8</beans:value>

					</beans:list>
				</beans:property>
			</beans:bean>
		</message-converters>
	</annotation-driven>

	<tx:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/fpupload/**" location="file:D:/fpupload/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxInMemorySize"
			value="104857600" />
		<beans:property name="maxUploadSize" value="104857600" />
		<beans:property name="defaultEncoding" value="utf-8" />
	</beans:bean>


	<!-- 채팅 컴포넌트, 메시지의 흐름을 직접 제어해야 한다 -->
	<beans:bean id="chatComponent" class="com.itbank.finalProject.component.ChatComponent" />
	<websocket:handlers>
		<websocket:mapping handler="chatComponent" path="/chat" />
		<websocket:sockjs websocket-enabled="true" />
	</websocket:handlers>

	<!-- ex02에서 사용하는 웹소켓 브로커, 중간에서 메시지의 흐름 및 내용 처리를 대신해준다 -->
	
<!-- (서버 프로그램이 받는 주소) -->
<!-- 클라이언트가 "/app"으로 시작하는 메시지를 서버에 보낼 때 이 주소로 매핑됩니다. -->
	<websocket:message-broker application-destination-prefix="/app">
	
<!-- 	최초 웹소켓을 연결하기 위한 주소 -->
<!-- 	클라이언트는 이 경로에 연결하여 STOMP 프로토콜을 사용해 메시지를 송수신할 수 있습니다. -->
		<websocket:stomp-endpoint path="/endpoint">		
			<websocket:sockjs websocket-enabled="true" />
		</websocket:stomp-endpoint> 
		
<!-- 	클라이언트가 구독할 주소 (클라이언트가 구독한 채널의 메시지만 받음 = 해당 채널을 구독한 클라이언트에게만 메시지가 감) -->
<!-- 	클라이언트는 "/broker"로 시작하는 주소를 구독할 수 있으며, 해당 주소에 메시지가 전송되면 브로커가 구독한 클라이언트들에게 메시지를 전파합니다. -->
		<websocket:simple-broker prefix="/broker" />	
	</websocket:message-broker>							



	<context:component-scan base-package="com.itbank.finalProject" />



</beans:beans>
